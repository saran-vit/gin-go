// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package completion_hints

import(
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TCompletionHintType int64
const (
  TCompletionHintType_COLUMN TCompletionHintType = 0
  TCompletionHintType_TABLE TCompletionHintType = 1
  TCompletionHintType_VIEW TCompletionHintType = 2
  TCompletionHintType_SCHEMA TCompletionHintType = 3
  TCompletionHintType_CATALOG TCompletionHintType = 4
  TCompletionHintType_REPOSITORY TCompletionHintType = 5
  TCompletionHintType_FUNCTION TCompletionHintType = 6
  TCompletionHintType_KEYWORD TCompletionHintType = 7
)

func (p TCompletionHintType) String() string {
  switch p {
  case TCompletionHintType_COLUMN: return "COLUMN"
  case TCompletionHintType_TABLE: return "TABLE"
  case TCompletionHintType_VIEW: return "VIEW"
  case TCompletionHintType_SCHEMA: return "SCHEMA"
  case TCompletionHintType_CATALOG: return "CATALOG"
  case TCompletionHintType_REPOSITORY: return "REPOSITORY"
  case TCompletionHintType_FUNCTION: return "FUNCTION"
  case TCompletionHintType_KEYWORD: return "KEYWORD"
  }
  return "<UNSET>"
}

func TCompletionHintTypeFromString(s string) (TCompletionHintType, error) {
  switch s {
  case "COLUMN": return TCompletionHintType_COLUMN, nil 
  case "TABLE": return TCompletionHintType_TABLE, nil 
  case "VIEW": return TCompletionHintType_VIEW, nil 
  case "SCHEMA": return TCompletionHintType_SCHEMA, nil 
  case "CATALOG": return TCompletionHintType_CATALOG, nil 
  case "REPOSITORY": return TCompletionHintType_REPOSITORY, nil 
  case "FUNCTION": return TCompletionHintType_FUNCTION, nil 
  case "KEYWORD": return TCompletionHintType_KEYWORD, nil 
  }
  return TCompletionHintType(0), fmt.Errorf("not a valid TCompletionHintType string")
}


func TCompletionHintTypePtr(v TCompletionHintType) *TCompletionHintType { return &v }

func (p TCompletionHintType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TCompletionHintType) UnmarshalText(text []byte) error {
q, err := TCompletionHintTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TCompletionHintType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TCompletionHintType(v)
return nil
}

func (p * TCompletionHintType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Type
//  - Hints
//  - Replaced
type TCompletionHint struct {
  Type TCompletionHintType `thrift:"type,1" db:"type" json:"type"`
  Hints []string `thrift:"hints,2" db:"hints" json:"hints"`
  Replaced string `thrift:"replaced,3" db:"replaced" json:"replaced"`
}

func NewTCompletionHint() *TCompletionHint {
  return &TCompletionHint{}
}


func (p *TCompletionHint) GetType() TCompletionHintType {
  return p.Type
}

func (p *TCompletionHint) GetHints() []string {
  return p.Hints
}

func (p *TCompletionHint) GetReplaced() string {
  return p.Replaced
}
func (p *TCompletionHint) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCompletionHint)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TCompletionHintType(v)
  p.Type = temp
}
  return nil
}

func (p *TCompletionHint)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Hints =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Hints = append(p.Hints, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TCompletionHint)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Replaced = v
}
  return nil
}

func (p *TCompletionHint) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TCompletionHint"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCompletionHint) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *TCompletionHint) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hints", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hints: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Hints)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hints {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hints: ", p), err) }
  return err
}

func (p *TCompletionHint) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("replaced", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:replaced: ", p), err) }
  if err := oprot.WriteString(string(p.Replaced)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.replaced (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:replaced: ", p), err) }
  return err
}

func (p *TCompletionHint) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCompletionHint(%+v)", *p)
}

