// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package extension_functions

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type TExtArgumentType int64

const (
	TExtArgumentType_Int8               TExtArgumentType = 0
	TExtArgumentType_Int16              TExtArgumentType = 1
	TExtArgumentType_Int32              TExtArgumentType = 2
	TExtArgumentType_Int64              TExtArgumentType = 3
	TExtArgumentType_Float              TExtArgumentType = 4
	TExtArgumentType_Double             TExtArgumentType = 5
	TExtArgumentType_Void               TExtArgumentType = 6
	TExtArgumentType_PInt8              TExtArgumentType = 7
	TExtArgumentType_PInt16             TExtArgumentType = 8
	TExtArgumentType_PInt32             TExtArgumentType = 9
	TExtArgumentType_PInt64             TExtArgumentType = 10
	TExtArgumentType_PFloat             TExtArgumentType = 11
	TExtArgumentType_PDouble            TExtArgumentType = 12
	TExtArgumentType_PBool              TExtArgumentType = 13
	TExtArgumentType_Bool               TExtArgumentType = 14
	TExtArgumentType_ArrayInt8          TExtArgumentType = 15
	TExtArgumentType_ArrayInt16         TExtArgumentType = 16
	TExtArgumentType_ArrayInt32         TExtArgumentType = 17
	TExtArgumentType_ArrayInt64         TExtArgumentType = 18
	TExtArgumentType_ArrayFloat         TExtArgumentType = 19
	TExtArgumentType_ArrayDouble        TExtArgumentType = 20
	TExtArgumentType_ArrayBool          TExtArgumentType = 21
	TExtArgumentType_GeoPoint           TExtArgumentType = 22
	TExtArgumentType_GeoLineString      TExtArgumentType = 23
	TExtArgumentType_Cursor             TExtArgumentType = 24
	TExtArgumentType_GeoPolygon         TExtArgumentType = 25
	TExtArgumentType_GeoMultiPolygon    TExtArgumentType = 26
	TExtArgumentType_ColumnInt8         TExtArgumentType = 27
	TExtArgumentType_ColumnInt16        TExtArgumentType = 28
	TExtArgumentType_ColumnInt32        TExtArgumentType = 29
	TExtArgumentType_ColumnInt64        TExtArgumentType = 30
	TExtArgumentType_ColumnFloat        TExtArgumentType = 31
	TExtArgumentType_ColumnDouble       TExtArgumentType = 32
	TExtArgumentType_ColumnBool         TExtArgumentType = 33
	TExtArgumentType_TextEncodingNone   TExtArgumentType = 34
	TExtArgumentType_TextEncodingDict8  TExtArgumentType = 35
	TExtArgumentType_TextEncodingDict16 TExtArgumentType = 36
	TExtArgumentType_TextEncodingDict32 TExtArgumentType = 37
)

func (p TExtArgumentType) String() string {
	switch p {
	case TExtArgumentType_Int8:
		return "Int8"
	case TExtArgumentType_Int16:
		return "Int16"
	case TExtArgumentType_Int32:
		return "Int32"
	case TExtArgumentType_Int64:
		return "Int64"
	case TExtArgumentType_Float:
		return "Float"
	case TExtArgumentType_Double:
		return "Double"
	case TExtArgumentType_Void:
		return "Void"
	case TExtArgumentType_PInt8:
		return "PInt8"
	case TExtArgumentType_PInt16:
		return "PInt16"
	case TExtArgumentType_PInt32:
		return "PInt32"
	case TExtArgumentType_PInt64:
		return "PInt64"
	case TExtArgumentType_PFloat:
		return "PFloat"
	case TExtArgumentType_PDouble:
		return "PDouble"
	case TExtArgumentType_PBool:
		return "PBool"
	case TExtArgumentType_Bool:
		return "Bool"
	case TExtArgumentType_ArrayInt8:
		return "ArrayInt8"
	case TExtArgumentType_ArrayInt16:
		return "ArrayInt16"
	case TExtArgumentType_ArrayInt32:
		return "ArrayInt32"
	case TExtArgumentType_ArrayInt64:
		return "ArrayInt64"
	case TExtArgumentType_ArrayFloat:
		return "ArrayFloat"
	case TExtArgumentType_ArrayDouble:
		return "ArrayDouble"
	case TExtArgumentType_ArrayBool:
		return "ArrayBool"
	case TExtArgumentType_GeoPoint:
		return "GeoPoint"
	case TExtArgumentType_GeoLineString:
		return "GeoLineString"
	case TExtArgumentType_Cursor:
		return "Cursor"
	case TExtArgumentType_GeoPolygon:
		return "GeoPolygon"
	case TExtArgumentType_GeoMultiPolygon:
		return "GeoMultiPolygon"
	case TExtArgumentType_ColumnInt8:
		return "ColumnInt8"
	case TExtArgumentType_ColumnInt16:
		return "ColumnInt16"
	case TExtArgumentType_ColumnInt32:
		return "ColumnInt32"
	case TExtArgumentType_ColumnInt64:
		return "ColumnInt64"
	case TExtArgumentType_ColumnFloat:
		return "ColumnFloat"
	case TExtArgumentType_ColumnDouble:
		return "ColumnDouble"
	case TExtArgumentType_ColumnBool:
		return "ColumnBool"
	case TExtArgumentType_TextEncodingNone:
		return "TextEncodingNone"
	case TExtArgumentType_TextEncodingDict8:
		return "TextEncodingDict8"
	case TExtArgumentType_TextEncodingDict16:
		return "TextEncodingDict16"
	case TExtArgumentType_TextEncodingDict32:
		return "TextEncodingDict32"
	}
	return "<UNSET>"
}

func TExtArgumentTypeFromString(s string) (TExtArgumentType, error) {
	switch s {
	case "Int8":
		return TExtArgumentType_Int8, nil
	case "Int16":
		return TExtArgumentType_Int16, nil
	case "Int32":
		return TExtArgumentType_Int32, nil
	case "Int64":
		return TExtArgumentType_Int64, nil
	case "Float":
		return TExtArgumentType_Float, nil
	case "Double":
		return TExtArgumentType_Double, nil
	case "Void":
		return TExtArgumentType_Void, nil
	case "PInt8":
		return TExtArgumentType_PInt8, nil
	case "PInt16":
		return TExtArgumentType_PInt16, nil
	case "PInt32":
		return TExtArgumentType_PInt32, nil
	case "PInt64":
		return TExtArgumentType_PInt64, nil
	case "PFloat":
		return TExtArgumentType_PFloat, nil
	case "PDouble":
		return TExtArgumentType_PDouble, nil
	case "PBool":
		return TExtArgumentType_PBool, nil
	case "Bool":
		return TExtArgumentType_Bool, nil
	case "ArrayInt8":
		return TExtArgumentType_ArrayInt8, nil
	case "ArrayInt16":
		return TExtArgumentType_ArrayInt16, nil
	case "ArrayInt32":
		return TExtArgumentType_ArrayInt32, nil
	case "ArrayInt64":
		return TExtArgumentType_ArrayInt64, nil
	case "ArrayFloat":
		return TExtArgumentType_ArrayFloat, nil
	case "ArrayDouble":
		return TExtArgumentType_ArrayDouble, nil
	case "ArrayBool":
		return TExtArgumentType_ArrayBool, nil
	case "GeoPoint":
		return TExtArgumentType_GeoPoint, nil
	case "GeoLineString":
		return TExtArgumentType_GeoLineString, nil
	case "Cursor":
		return TExtArgumentType_Cursor, nil
	case "GeoPolygon":
		return TExtArgumentType_GeoPolygon, nil
	case "GeoMultiPolygon":
		return TExtArgumentType_GeoMultiPolygon, nil
	case "ColumnInt8":
		return TExtArgumentType_ColumnInt8, nil
	case "ColumnInt16":
		return TExtArgumentType_ColumnInt16, nil
	case "ColumnInt32":
		return TExtArgumentType_ColumnInt32, nil
	case "ColumnInt64":
		return TExtArgumentType_ColumnInt64, nil
	case "ColumnFloat":
		return TExtArgumentType_ColumnFloat, nil
	case "ColumnDouble":
		return TExtArgumentType_ColumnDouble, nil
	case "ColumnBool":
		return TExtArgumentType_ColumnBool, nil
	case "TextEncodingNone":
		return TExtArgumentType_TextEncodingNone, nil
	case "TextEncodingDict8":
		return TExtArgumentType_TextEncodingDict8, nil
	case "TextEncodingDict16":
		return TExtArgumentType_TextEncodingDict16, nil
	case "TextEncodingDict32":
		return TExtArgumentType_TextEncodingDict32, nil
	}
	return TExtArgumentType(0), fmt.Errorf("not a valid TExtArgumentType string")
}

func TExtArgumentTypePtr(v TExtArgumentType) *TExtArgumentType { return &v }

func (p TExtArgumentType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TExtArgumentType) UnmarshalText(text []byte) error {
	q, err := TExtArgumentTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type TOutputBufferSizeType int64

const (
	TOutputBufferSizeType_kConstant                       TOutputBufferSizeType = 0
	TOutputBufferSizeType_kUserSpecifiedConstantParameter TOutputBufferSizeType = 1
	TOutputBufferSizeType_kUserSpecifiedRowMultiplier     TOutputBufferSizeType = 2
)

func (p TOutputBufferSizeType) String() string {
	switch p {
	case TOutputBufferSizeType_kConstant:
		return "kConstant"
	case TOutputBufferSizeType_kUserSpecifiedConstantParameter:
		return "kUserSpecifiedConstantParameter"
	case TOutputBufferSizeType_kUserSpecifiedRowMultiplier:
		return "kUserSpecifiedRowMultiplier"
	}
	return "<UNSET>"
}

func TOutputBufferSizeTypeFromString(s string) (TOutputBufferSizeType, error) {
	switch s {
	case "kConstant":
		return TOutputBufferSizeType_kConstant, nil
	case "kUserSpecifiedConstantParameter":
		return TOutputBufferSizeType_kUserSpecifiedConstantParameter, nil
	case "kUserSpecifiedRowMultiplier":
		return TOutputBufferSizeType_kUserSpecifiedRowMultiplier, nil
	}
	return TOutputBufferSizeType(0), fmt.Errorf("not a valid TOutputBufferSizeType string")
}

func TOutputBufferSizeTypePtr(v TOutputBufferSizeType) *TOutputBufferSizeType { return &v }

func (p TOutputBufferSizeType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TOutputBufferSizeType) UnmarshalText(text []byte) error {
	q, err := TOutputBufferSizeTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Attributes:
//  - Name
//  - ArgTypes
//  - RetType
type TUserDefinedFunction struct {
	Name     string             `thrift:"name,1" json:"name"`
	ArgTypes []TExtArgumentType `thrift:"argTypes,2" json:"argTypes"`
	RetType  TExtArgumentType   `thrift:"retType,3" json:"retType"`
}

func NewTUserDefinedFunction() *TUserDefinedFunction {
	return &TUserDefinedFunction{}
}

func (p *TUserDefinedFunction) GetName() string {
	return p.Name
}

func (p *TUserDefinedFunction) GetArgTypes() []TExtArgumentType {
	return p.ArgTypes
}

func (p *TUserDefinedFunction) GetRetType() TExtArgumentType {
	return p.RetType
}
func (p *TUserDefinedFunction) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TUserDefinedFunction) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TUserDefinedFunction) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]TExtArgumentType, 0, size)
	p.ArgTypes = tSlice
	for i := 0; i < size; i++ {
		var _elem0 TExtArgumentType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := TExtArgumentType(v)
			_elem0 = temp
		}
		p.ArgTypes = append(p.ArgTypes, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TUserDefinedFunction) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := TExtArgumentType(v)
		p.RetType = temp
	}
	return nil
}

func (p *TUserDefinedFunction) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TUserDefinedFunction"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TUserDefinedFunction) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *TUserDefinedFunction) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argTypes", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:argTypes: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.ArgTypes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ArgTypes {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:argTypes: ", p), err)
	}
	return err
}

func (p *TUserDefinedFunction) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("retType", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:retType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RetType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.retType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:retType: ", p), err)
	}
	return err
}

func (p *TUserDefinedFunction) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TUserDefinedFunction(%+v)", *p)
}

// Attributes:
//  - Name
//  - SizerType
//  - SizerArgPos
//  - InputArgTypes
//  - OutputArgTypes
//  - SqlArgTypes
type TUserDefinedTableFunction struct {
	Name           string                `thrift:"name,1" json:"name"`
	SizerType      TOutputBufferSizeType `thrift:"sizerType,2" json:"sizerType"`
	SizerArgPos    int32                 `thrift:"sizerArgPos,3" json:"sizerArgPos"`
	InputArgTypes  []TExtArgumentType    `thrift:"inputArgTypes,4" json:"inputArgTypes"`
	OutputArgTypes []TExtArgumentType    `thrift:"outputArgTypes,5" json:"outputArgTypes"`
	SqlArgTypes    []TExtArgumentType    `thrift:"sqlArgTypes,6" json:"sqlArgTypes"`
}

func NewTUserDefinedTableFunction() *TUserDefinedTableFunction {
	return &TUserDefinedTableFunction{}
}

func (p *TUserDefinedTableFunction) GetName() string {
	return p.Name
}

func (p *TUserDefinedTableFunction) GetSizerType() TOutputBufferSizeType {
	return p.SizerType
}

func (p *TUserDefinedTableFunction) GetSizerArgPos() int32 {
	return p.SizerArgPos
}

func (p *TUserDefinedTableFunction) GetInputArgTypes() []TExtArgumentType {
	return p.InputArgTypes
}

func (p *TUserDefinedTableFunction) GetOutputArgTypes() []TExtArgumentType {
	return p.OutputArgTypes
}

func (p *TUserDefinedTableFunction) GetSqlArgTypes() []TExtArgumentType {
	return p.SqlArgTypes
}
func (p *TUserDefinedTableFunction) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TUserDefinedTableFunction) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TUserDefinedTableFunction) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TOutputBufferSizeType(v)
		p.SizerType = temp
	}
	return nil
}

func (p *TUserDefinedTableFunction) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SizerArgPos = v
	}
	return nil
}

func (p *TUserDefinedTableFunction) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]TExtArgumentType, 0, size)
	p.InputArgTypes = tSlice
	for i := 0; i < size; i++ {
		var _elem1 TExtArgumentType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := TExtArgumentType(v)
			_elem1 = temp
		}
		p.InputArgTypes = append(p.InputArgTypes, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TUserDefinedTableFunction) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]TExtArgumentType, 0, size)
	p.OutputArgTypes = tSlice
	for i := 0; i < size; i++ {
		var _elem2 TExtArgumentType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := TExtArgumentType(v)
			_elem2 = temp
		}
		p.OutputArgTypes = append(p.OutputArgTypes, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TUserDefinedTableFunction) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]TExtArgumentType, 0, size)
	p.SqlArgTypes = tSlice
	for i := 0; i < size; i++ {
		var _elem3 TExtArgumentType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := TExtArgumentType(v)
			_elem3 = temp
		}
		p.SqlArgTypes = append(p.SqlArgTypes, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TUserDefinedTableFunction) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TUserDefinedTableFunction"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TUserDefinedTableFunction) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *TUserDefinedTableFunction) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sizerType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sizerType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SizerType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sizerType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sizerType: ", p), err)
	}
	return err
}

func (p *TUserDefinedTableFunction) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sizerArgPos", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sizerArgPos: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SizerArgPos)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sizerArgPos (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sizerArgPos: ", p), err)
	}
	return err
}

func (p *TUserDefinedTableFunction) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inputArgTypes", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:inputArgTypes: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.InputArgTypes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.InputArgTypes {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:inputArgTypes: ", p), err)
	}
	return err
}

func (p *TUserDefinedTableFunction) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("outputArgTypes", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:outputArgTypes: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.OutputArgTypes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.OutputArgTypes {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:outputArgTypes: ", p), err)
	}
	return err
}

func (p *TUserDefinedTableFunction) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sqlArgTypes", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sqlArgTypes: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.SqlArgTypes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.SqlArgTypes {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sqlArgTypes: ", p), err)
	}
	return err
}

func (p *TUserDefinedTableFunction) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TUserDefinedTableFunction(%+v)", *p)
}
