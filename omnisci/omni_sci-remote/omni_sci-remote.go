// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"common"
	"completion_hints"
	"serialized_result_set"
	"extension_functions"
	"omnisci"
)

var _ = common.GoUnusedProtection__
var _ = completion_hints.GoUnusedProtection__
var _ = serialized_result_set.GoUnusedProtection__
var _ = extension_functions.GoUnusedProtection__
var _ = omnisci.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  TSessionId connect(string user, string passwd, string dbname)")
  fmt.Fprintln(os.Stderr, "  TKrb5Session krb5_connect(string inputToken, string dbname)")
  fmt.Fprintln(os.Stderr, "  void disconnect(TSessionId session)")
  fmt.Fprintln(os.Stderr, "  void switch_database(TSessionId session, string dbname)")
  fmt.Fprintln(os.Stderr, "  TSessionId clone_session(TSessionId session)")
  fmt.Fprintln(os.Stderr, "  TServerStatus get_server_status(TSessionId session)")
  fmt.Fprintln(os.Stderr, "   get_status(TSessionId session)")
  fmt.Fprintln(os.Stderr, "  TClusterHardwareInfo get_hardware_info(TSessionId session)")
  fmt.Fprintln(os.Stderr, "   get_tables(TSessionId session)")
  fmt.Fprintln(os.Stderr, "   get_physical_tables(TSessionId session)")
  fmt.Fprintln(os.Stderr, "   get_views(TSessionId session)")
  fmt.Fprintln(os.Stderr, "   get_tables_meta(TSessionId session)")
  fmt.Fprintln(os.Stderr, "  TTableDetails get_table_details(TSessionId session, string table_name)")
  fmt.Fprintln(os.Stderr, "  TTableDetails get_internal_table_details(TSessionId session, string table_name)")
  fmt.Fprintln(os.Stderr, "   get_users(TSessionId session)")
  fmt.Fprintln(os.Stderr, "   get_databases(TSessionId session)")
  fmt.Fprintln(os.Stderr, "  string get_version()")
  fmt.Fprintln(os.Stderr, "  void start_heap_profile(TSessionId session)")
  fmt.Fprintln(os.Stderr, "  void stop_heap_profile(TSessionId session)")
  fmt.Fprintln(os.Stderr, "  string get_heap_profile(TSessionId session)")
  fmt.Fprintln(os.Stderr, "   get_memory(TSessionId session, string memory_level)")
  fmt.Fprintln(os.Stderr, "  void clear_cpu_memory(TSessionId session)")
  fmt.Fprintln(os.Stderr, "  void clear_gpu_memory(TSessionId session)")
  fmt.Fprintln(os.Stderr, "  void set_cur_session(TSessionId parent_session, TSessionId leaf_session, string start_time_str, string label)")
  fmt.Fprintln(os.Stderr, "  void invalidate_cur_session(TSessionId parent_session, TSessionId leaf_session, string start_time_str, string label)")
  fmt.Fprintln(os.Stderr, "  void set_table_epoch(TSessionId session, i32 db_id, i32 table_id, i32 new_epoch)")
  fmt.Fprintln(os.Stderr, "  void set_table_epoch_by_name(TSessionId session, string table_name, i32 new_epoch)")
  fmt.Fprintln(os.Stderr, "  i32 get_table_epoch(TSessionId session, i32 db_id, i32 table_id)")
  fmt.Fprintln(os.Stderr, "  i32 get_table_epoch_by_name(TSessionId session, string table_name)")
  fmt.Fprintln(os.Stderr, "   get_table_epochs(TSessionId session, i32 db_id, i32 table_id)")
  fmt.Fprintln(os.Stderr, "  void set_table_epochs(TSessionId session, i32 db_id,  table_epochs)")
  fmt.Fprintln(os.Stderr, "  TSessionInfo get_session_info(TSessionId session)")
  fmt.Fprintln(os.Stderr, "  TQueryResult sql_execute(TSessionId session, string query, bool column_format, string nonce, i32 first_n, i32 at_most_n)")
  fmt.Fprintln(os.Stderr, "  TDataFrame sql_execute_df(TSessionId session, string query, TDeviceType device_type, i32 device_id, i32 first_n, TArrowTransport transport_method)")
  fmt.Fprintln(os.Stderr, "  TDataFrame sql_execute_gdf(TSessionId session, string query, i32 device_id, i32 first_n)")
  fmt.Fprintln(os.Stderr, "  void deallocate_df(TSessionId session, TDataFrame df, TDeviceType device_type, i32 device_id)")
  fmt.Fprintln(os.Stderr, "  void interrupt(TSessionId query_session, TSessionId interrupt_session)")
  fmt.Fprintln(os.Stderr, "  TRowDescriptor sql_validate(TSessionId session, string query)")
  fmt.Fprintln(os.Stderr, "   get_completion_hints(TSessionId session, string sql, i32 cursor)")
  fmt.Fprintln(os.Stderr, "  void set_execution_mode(TSessionId session, TExecuteMode mode)")
  fmt.Fprintln(os.Stderr, "  TRenderResult render_vega(TSessionId session, i64 widget_id, string vega_json, i32 compression_level, string nonce)")
  fmt.Fprintln(os.Stderr, "  TPixelTableRowResult get_result_row_for_pixel(TSessionId session, i64 widget_id, TPixel pixel,  table_col_names, bool column_format, i32 pixelRadius, string nonce)")
  fmt.Fprintln(os.Stderr, "  TDashboard get_dashboard(TSessionId session, i32 dashboard_id)")
  fmt.Fprintln(os.Stderr, "   get_dashboards(TSessionId session)")
  fmt.Fprintln(os.Stderr, "  i32 create_dashboard(TSessionId session, string dashboard_name, string dashboard_state, string image_hash, string dashboard_metadata)")
  fmt.Fprintln(os.Stderr, "  void replace_dashboard(TSessionId session, i32 dashboard_id, string dashboard_name, string dashboard_owner, string dashboard_state, string image_hash, string dashboard_metadata)")
  fmt.Fprintln(os.Stderr, "  void delete_dashboard(TSessionId session, i32 dashboard_id)")
  fmt.Fprintln(os.Stderr, "  void share_dashboards(TSessionId session,  dashboard_ids,  groups, TDashboardPermissions permissions)")
  fmt.Fprintln(os.Stderr, "  void delete_dashboards(TSessionId session,  dashboard_ids)")
  fmt.Fprintln(os.Stderr, "  void share_dashboard(TSessionId session, i32 dashboard_id,  groups,  objects, TDashboardPermissions permissions, bool grant_role)")
  fmt.Fprintln(os.Stderr, "  void unshare_dashboard(TSessionId session, i32 dashboard_id,  groups,  objects, TDashboardPermissions permissions)")
  fmt.Fprintln(os.Stderr, "  void unshare_dashboards(TSessionId session,  dashboard_ids,  groups, TDashboardPermissions permissions)")
  fmt.Fprintln(os.Stderr, "   get_dashboard_grantees(TSessionId session, i32 dashboard_id)")
  fmt.Fprintln(os.Stderr, "  TFrontendView get_link_view(TSessionId session, string link)")
  fmt.Fprintln(os.Stderr, "  string create_link(TSessionId session, string view_state, string view_metadata)")
  fmt.Fprintln(os.Stderr, "  void load_table_binary(TSessionId session, string table_name,  rows,  column_names)")
  fmt.Fprintln(os.Stderr, "  void load_table_binary_columnar(TSessionId session, string table_name,  cols,  column_names)")
  fmt.Fprintln(os.Stderr, "  void load_table_binary_arrow(TSessionId session, string table_name, string arrow_stream, bool use_column_names)")
  fmt.Fprintln(os.Stderr, "  void load_table(TSessionId session, string table_name,  rows,  column_names)")
  fmt.Fprintln(os.Stderr, "  TDetectResult detect_column_types(TSessionId session, string file_name, TCopyParams copy_params)")
  fmt.Fprintln(os.Stderr, "  void create_table(TSessionId session, string table_name, TRowDescriptor row_desc, TFileType file_type, TCreateParams create_params)")
  fmt.Fprintln(os.Stderr, "  void import_table(TSessionId session, string table_name, string file_name, TCopyParams copy_params)")
  fmt.Fprintln(os.Stderr, "  void import_geo_table(TSessionId session, string table_name, string file_name, TCopyParams copy_params, TRowDescriptor row_desc, TCreateParams create_params)")
  fmt.Fprintln(os.Stderr, "  TImportStatus import_table_status(TSessionId session, string import_id)")
  fmt.Fprintln(os.Stderr, "  string get_first_geo_file_in_archive(TSessionId session, string archive_path, TCopyParams copy_params)")
  fmt.Fprintln(os.Stderr, "   get_all_files_in_archive(TSessionId session, string archive_path, TCopyParams copy_params)")
  fmt.Fprintln(os.Stderr, "   get_layers_in_geo_file(TSessionId session, string file_name, TCopyParams copy_params)")
  fmt.Fprintln(os.Stderr, "  i64 query_get_outer_fragment_count(TSessionId session, string query)")
  fmt.Fprintln(os.Stderr, "  TTableMeta check_table_consistency(TSessionId session, i32 table_id)")
  fmt.Fprintln(os.Stderr, "  TPendingQuery start_query(TSessionId leaf_session, TSessionId parent_session, string query_ra, string start_time_str, bool just_explain,  outer_fragment_indices)")
  fmt.Fprintln(os.Stderr, "  TStepResult execute_query_step(TPendingQuery pending_query, TSubqueryId subquery_id, string start_time_str)")
  fmt.Fprintln(os.Stderr, "  void broadcast_serialized_rows(TSerializedRows serialized_rows, TRowDescriptor row_desc, TQueryId query_id, TSubqueryId subquery_id, bool is_final_subquery_result)")
  fmt.Fprintln(os.Stderr, "  TPendingRenderQuery start_render_query(TSessionId session, i64 widget_id, i16 node_idx, string vega_json)")
  fmt.Fprintln(os.Stderr, "  TRenderStepResult execute_next_render_step(TPendingRenderQuery pending_render, TRenderAggDataMap merged_data)")
  fmt.Fprintln(os.Stderr, "  void insert_data(TSessionId session, TInsertData insert_data)")
  fmt.Fprintln(os.Stderr, "  void checkpoint(TSessionId session, i32 table_id)")
  fmt.Fprintln(os.Stderr, "   get_roles(TSessionId session)")
  fmt.Fprintln(os.Stderr, "   get_db_objects_for_grantee(TSessionId session, string roleName)")
  fmt.Fprintln(os.Stderr, "   get_db_object_privs(TSessionId session, string objectName, TDBObjectType type)")
  fmt.Fprintln(os.Stderr, "   get_all_roles_for_user(TSessionId session, string userName)")
  fmt.Fprintln(os.Stderr, "  bool has_role(TSessionId session, string granteeName, string roleName)")
  fmt.Fprintln(os.Stderr, "  bool has_object_privilege(TSessionId session, string granteeName, string ObjectName, TDBObjectType objectType, TDBObjectPermissions permissions)")
  fmt.Fprintln(os.Stderr, "  TLicenseInfo set_license_key(TSessionId session, string key, string nonce)")
  fmt.Fprintln(os.Stderr, "  TLicenseInfo get_license_claims(TSessionId session, string nonce)")
  fmt.Fprintln(os.Stderr, "   get_device_parameters(TSessionId session)")
  fmt.Fprintln(os.Stderr, "  void register_runtime_extension_functions(TSessionId session,  udfs,  udtfs,  device_ir_map)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := omnisci.NewOmniSciClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "connect":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Connect requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.Connect(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "krb5_connect":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Krb5Connect requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.Krb5Connect(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "disconnect":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Disconnect requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    fmt.Print(client.Disconnect(context.Background(), value0))
    fmt.Print("\n")
    break
  case "switch_database":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SwitchDatabase requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SwitchDatabase(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "clone_session":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CloneSession requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    fmt.Print(client.CloneSession(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_server_status":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetServerStatus requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    fmt.Print(client.GetServerStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_status":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetStatus requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    fmt.Print(client.GetStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_hardware_info":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetHardwareInfo requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    fmt.Print(client.GetHardwareInfo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_tables":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTables requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    fmt.Print(client.GetTables(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_physical_tables":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPhysicalTables requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    fmt.Print(client.GetPhysicalTables(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_views":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetViews requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    fmt.Print(client.GetViews(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_tables_meta":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTablesMeta requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    fmt.Print(client.GetTablesMeta(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_table_details":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTableDetails requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetTableDetails(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_internal_table_details":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetInternalTableDetails requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetInternalTableDetails(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_users":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUsers requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    fmt.Print(client.GetUsers(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_databases":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDatabases requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    fmt.Print(client.GetDatabases(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_version":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetVersion requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetVersion(context.Background()))
    fmt.Print("\n")
    break
  case "start_heap_profile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StartHeapProfile requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    fmt.Print(client.StartHeapProfile(context.Background(), value0))
    fmt.Print("\n")
    break
  case "stop_heap_profile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StopHeapProfile requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    fmt.Print(client.StopHeapProfile(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_heap_profile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetHeapProfile requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    fmt.Print(client.GetHeapProfile(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_memory":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetMemory requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetMemory(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "clear_cpu_memory":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ClearCPUMemory requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    fmt.Print(client.ClearCPUMemory(context.Background(), value0))
    fmt.Print("\n")
    break
  case "clear_gpu_memory":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ClearGpuMemory requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    fmt.Print(client.ClearGpuMemory(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_cur_session":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SetCurSession requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := omnisci.TSessionId(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.SetCurSession(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "invalidate_cur_session":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "InvalidateCurSession requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := omnisci.TSessionId(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.InvalidateCurSession(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "set_table_epoch":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SetTableEpoch requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    tmp1, err309 := (strconv.Atoi(flag.Arg(2)))
    if err309 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err310 := (strconv.Atoi(flag.Arg(3)))
    if err310 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    tmp3, err311 := (strconv.Atoi(flag.Arg(4)))
    if err311 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.SetTableEpoch(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "set_table_epoch_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SetTableEpochByName requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err314 := (strconv.Atoi(flag.Arg(3)))
    if err314 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetTableEpochByName(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_table_epoch":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTableEpoch requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    tmp1, err316 := (strconv.Atoi(flag.Arg(2)))
    if err316 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err317 := (strconv.Atoi(flag.Arg(3)))
    if err317 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetTableEpoch(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_table_epoch_by_name":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTableEpochByName requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetTableEpochByName(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_table_epochs":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTableEpochs requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    tmp1, err321 := (strconv.Atoi(flag.Arg(2)))
    if err321 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err322 := (strconv.Atoi(flag.Arg(3)))
    if err322 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetTableEpochs(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "set_table_epochs":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SetTableEpochs requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    tmp1, err324 := (strconv.Atoi(flag.Arg(2)))
    if err324 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    arg325 := flag.Arg(3)
    mbTrans326 := thrift.NewTMemoryBufferLen(len(arg325))
    defer mbTrans326.Close()
    _, err327 := mbTrans326.WriteString(arg325)
    if err327 != nil { 
      Usage()
      return
    }
    factory328 := thrift.NewTJSONProtocolFactory()
    jsProt329 := factory328.GetProtocol(mbTrans326)
    containerStruct2 := omnisci.NewOmniSciSetTableEpochsArgs()
    err330 := containerStruct2.ReadField3(jsProt329)
    if err330 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.TableEpochs
    value2 := argvalue2
    fmt.Print(client.SetTableEpochs(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_session_info":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSessionInfo requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    fmt.Print(client.GetSessionInfo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sql_execute":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "SqlExecute requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    tmp4, err336 := (strconv.Atoi(flag.Arg(5)))
    if err336 != nil {
      Usage()
      return
    }
    argvalue4 := int32(tmp4)
    value4 := argvalue4
    tmp5, err337 := (strconv.Atoi(flag.Arg(6)))
    if err337 != nil {
      Usage()
      return
    }
    argvalue5 := int32(tmp5)
    value5 := argvalue5
    fmt.Print(client.SqlExecute(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "sql_execute_df":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "SqlExecuteDf requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := omnisci.TDeviceType(tmp2)
    value2 := argvalue2
    tmp3, err340 := (strconv.Atoi(flag.Arg(4)))
    if err340 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    tmp4, err341 := (strconv.Atoi(flag.Arg(5)))
    if err341 != nil {
      Usage()
      return
    }
    argvalue4 := int32(tmp4)
    value4 := argvalue4
    tmp5, err := (strconv.Atoi(flag.Arg(6)))
    if err != nil {
      Usage()
     return
    }
    argvalue5 := omnisci.TArrowTransport(tmp5)
    value5 := argvalue5
    fmt.Print(client.SqlExecuteDf(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "sql_execute_gdf":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SqlExecuteGdf requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err344 := (strconv.Atoi(flag.Arg(3)))
    if err344 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    tmp3, err345 := (strconv.Atoi(flag.Arg(4)))
    if err345 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.SqlExecuteGdf(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "deallocate_df":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DeallocateDf requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    arg347 := flag.Arg(2)
    mbTrans348 := thrift.NewTMemoryBufferLen(len(arg347))
    defer mbTrans348.Close()
    _, err349 := mbTrans348.WriteString(arg347)
    if err349 != nil {
      Usage()
      return
    }
    factory350 := thrift.NewTJSONProtocolFactory()
    jsProt351 := factory350.GetProtocol(mbTrans348)
    argvalue1 := omnisci.NewTDataFrame()
    err352 := argvalue1.Read(jsProt351)
    if err352 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := omnisci.TDeviceType(tmp2)
    value2 := argvalue2
    tmp3, err353 := (strconv.Atoi(flag.Arg(4)))
    if err353 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.DeallocateDf(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "interrupt":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Interrupt requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := omnisci.TSessionId(argvalue1)
    fmt.Print(client.Interrupt(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sql_validate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SqlValidate requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SqlValidate(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_completion_hints":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetCompletionHints requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err360 := (strconv.Atoi(flag.Arg(3)))
    if err360 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetCompletionHints(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "set_execution_mode":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetExecutionMode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := omnisci.TExecuteMode(tmp1)
    value1 := argvalue1
    fmt.Print(client.SetExecutionMode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "render_vega":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "RenderVega requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1, err363 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err363 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err365 := (strconv.Atoi(flag.Arg(4)))
    if err365 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.RenderVega(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_result_row_for_pixel":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "GetResultRowForPixel requires 7 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1, err368 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err368 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg369 := flag.Arg(3)
    mbTrans370 := thrift.NewTMemoryBufferLen(len(arg369))
    defer mbTrans370.Close()
    _, err371 := mbTrans370.WriteString(arg369)
    if err371 != nil {
      Usage()
      return
    }
    factory372 := thrift.NewTJSONProtocolFactory()
    jsProt373 := factory372.GetProtocol(mbTrans370)
    argvalue2 := omnisci.NewTPixel()
    err374 := argvalue2.Read(jsProt373)
    if err374 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg375 := flag.Arg(4)
    mbTrans376 := thrift.NewTMemoryBufferLen(len(arg375))
    defer mbTrans376.Close()
    _, err377 := mbTrans376.WriteString(arg375)
    if err377 != nil { 
      Usage()
      return
    }
    factory378 := thrift.NewTJSONProtocolFactory()
    jsProt379 := factory378.GetProtocol(mbTrans376)
    containerStruct3 := omnisci.NewOmniSciGetResultRowForPixelArgs()
    err380 := containerStruct3.ReadField4(jsProt379)
    if err380 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.TableColNames
    value3 := argvalue3
    argvalue4 := flag.Arg(5) == "true"
    value4 := argvalue4
    tmp5, err382 := (strconv.Atoi(flag.Arg(6)))
    if err382 != nil {
      Usage()
      return
    }
    argvalue5 := int32(tmp5)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.GetResultRowForPixel(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "get_dashboard":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetDashboard requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    tmp1, err385 := (strconv.Atoi(flag.Arg(2)))
    if err385 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetDashboard(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_dashboards":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDashboards requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    fmt.Print(client.GetDashboards(context.Background(), value0))
    fmt.Print("\n")
    break
  case "create_dashboard":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "CreateDashboard requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.CreateDashboard(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "replace_dashboard":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "ReplaceDashboard requires 7 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    tmp1, err393 := (strconv.Atoi(flag.Arg(2)))
    if err393 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.ReplaceDashboard(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "delete_dashboard":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteDashboard requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    tmp1, err400 := (strconv.Atoi(flag.Arg(2)))
    if err400 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.DeleteDashboard(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "share_dashboards":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "ShareDashboards requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    arg402 := flag.Arg(2)
    mbTrans403 := thrift.NewTMemoryBufferLen(len(arg402))
    defer mbTrans403.Close()
    _, err404 := mbTrans403.WriteString(arg402)
    if err404 != nil { 
      Usage()
      return
    }
    factory405 := thrift.NewTJSONProtocolFactory()
    jsProt406 := factory405.GetProtocol(mbTrans403)
    containerStruct1 := omnisci.NewOmniSciShareDashboardsArgs()
    err407 := containerStruct1.ReadField2(jsProt406)
    if err407 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.DashboardIds
    value1 := argvalue1
    arg408 := flag.Arg(3)
    mbTrans409 := thrift.NewTMemoryBufferLen(len(arg408))
    defer mbTrans409.Close()
    _, err410 := mbTrans409.WriteString(arg408)
    if err410 != nil { 
      Usage()
      return
    }
    factory411 := thrift.NewTJSONProtocolFactory()
    jsProt412 := factory411.GetProtocol(mbTrans409)
    containerStruct2 := omnisci.NewOmniSciShareDashboardsArgs()
    err413 := containerStruct2.ReadField3(jsProt412)
    if err413 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Groups
    value2 := argvalue2
    arg414 := flag.Arg(4)
    mbTrans415 := thrift.NewTMemoryBufferLen(len(arg414))
    defer mbTrans415.Close()
    _, err416 := mbTrans415.WriteString(arg414)
    if err416 != nil {
      Usage()
      return
    }
    factory417 := thrift.NewTJSONProtocolFactory()
    jsProt418 := factory417.GetProtocol(mbTrans415)
    argvalue3 := omnisci.NewTDashboardPermissions()
    err419 := argvalue3.Read(jsProt418)
    if err419 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.ShareDashboards(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "delete_dashboards":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteDashboards requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    arg421 := flag.Arg(2)
    mbTrans422 := thrift.NewTMemoryBufferLen(len(arg421))
    defer mbTrans422.Close()
    _, err423 := mbTrans422.WriteString(arg421)
    if err423 != nil { 
      Usage()
      return
    }
    factory424 := thrift.NewTJSONProtocolFactory()
    jsProt425 := factory424.GetProtocol(mbTrans422)
    containerStruct1 := omnisci.NewOmniSciDeleteDashboardsArgs()
    err426 := containerStruct1.ReadField2(jsProt425)
    if err426 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.DashboardIds
    value1 := argvalue1
    fmt.Print(client.DeleteDashboards(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "share_dashboard":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "ShareDashboard requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    tmp1, err428 := (strconv.Atoi(flag.Arg(2)))
    if err428 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    arg429 := flag.Arg(3)
    mbTrans430 := thrift.NewTMemoryBufferLen(len(arg429))
    defer mbTrans430.Close()
    _, err431 := mbTrans430.WriteString(arg429)
    if err431 != nil { 
      Usage()
      return
    }
    factory432 := thrift.NewTJSONProtocolFactory()
    jsProt433 := factory432.GetProtocol(mbTrans430)
    containerStruct2 := omnisci.NewOmniSciShareDashboardArgs()
    err434 := containerStruct2.ReadField3(jsProt433)
    if err434 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Groups
    value2 := argvalue2
    arg435 := flag.Arg(4)
    mbTrans436 := thrift.NewTMemoryBufferLen(len(arg435))
    defer mbTrans436.Close()
    _, err437 := mbTrans436.WriteString(arg435)
    if err437 != nil { 
      Usage()
      return
    }
    factory438 := thrift.NewTJSONProtocolFactory()
    jsProt439 := factory438.GetProtocol(mbTrans436)
    containerStruct3 := omnisci.NewOmniSciShareDashboardArgs()
    err440 := containerStruct3.ReadField4(jsProt439)
    if err440 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Objects
    value3 := argvalue3
    arg441 := flag.Arg(5)
    mbTrans442 := thrift.NewTMemoryBufferLen(len(arg441))
    defer mbTrans442.Close()
    _, err443 := mbTrans442.WriteString(arg441)
    if err443 != nil {
      Usage()
      return
    }
    factory444 := thrift.NewTJSONProtocolFactory()
    jsProt445 := factory444.GetProtocol(mbTrans442)
    argvalue4 := omnisci.NewTDashboardPermissions()
    err446 := argvalue4.Read(jsProt445)
    if err446 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5 := flag.Arg(6) == "true"
    value5 := argvalue5
    fmt.Print(client.ShareDashboard(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "unshare_dashboard":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "UnshareDashboard requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    tmp1, err449 := (strconv.Atoi(flag.Arg(2)))
    if err449 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    arg450 := flag.Arg(3)
    mbTrans451 := thrift.NewTMemoryBufferLen(len(arg450))
    defer mbTrans451.Close()
    _, err452 := mbTrans451.WriteString(arg450)
    if err452 != nil { 
      Usage()
      return
    }
    factory453 := thrift.NewTJSONProtocolFactory()
    jsProt454 := factory453.GetProtocol(mbTrans451)
    containerStruct2 := omnisci.NewOmniSciUnshareDashboardArgs()
    err455 := containerStruct2.ReadField3(jsProt454)
    if err455 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Groups
    value2 := argvalue2
    arg456 := flag.Arg(4)
    mbTrans457 := thrift.NewTMemoryBufferLen(len(arg456))
    defer mbTrans457.Close()
    _, err458 := mbTrans457.WriteString(arg456)
    if err458 != nil { 
      Usage()
      return
    }
    factory459 := thrift.NewTJSONProtocolFactory()
    jsProt460 := factory459.GetProtocol(mbTrans457)
    containerStruct3 := omnisci.NewOmniSciUnshareDashboardArgs()
    err461 := containerStruct3.ReadField4(jsProt460)
    if err461 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Objects
    value3 := argvalue3
    arg462 := flag.Arg(5)
    mbTrans463 := thrift.NewTMemoryBufferLen(len(arg462))
    defer mbTrans463.Close()
    _, err464 := mbTrans463.WriteString(arg462)
    if err464 != nil {
      Usage()
      return
    }
    factory465 := thrift.NewTJSONProtocolFactory()
    jsProt466 := factory465.GetProtocol(mbTrans463)
    argvalue4 := omnisci.NewTDashboardPermissions()
    err467 := argvalue4.Read(jsProt466)
    if err467 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.UnshareDashboard(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "unshare_dashboards":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "UnshareDashboards requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    arg469 := flag.Arg(2)
    mbTrans470 := thrift.NewTMemoryBufferLen(len(arg469))
    defer mbTrans470.Close()
    _, err471 := mbTrans470.WriteString(arg469)
    if err471 != nil { 
      Usage()
      return
    }
    factory472 := thrift.NewTJSONProtocolFactory()
    jsProt473 := factory472.GetProtocol(mbTrans470)
    containerStruct1 := omnisci.NewOmniSciUnshareDashboardsArgs()
    err474 := containerStruct1.ReadField2(jsProt473)
    if err474 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.DashboardIds
    value1 := argvalue1
    arg475 := flag.Arg(3)
    mbTrans476 := thrift.NewTMemoryBufferLen(len(arg475))
    defer mbTrans476.Close()
    _, err477 := mbTrans476.WriteString(arg475)
    if err477 != nil { 
      Usage()
      return
    }
    factory478 := thrift.NewTJSONProtocolFactory()
    jsProt479 := factory478.GetProtocol(mbTrans476)
    containerStruct2 := omnisci.NewOmniSciUnshareDashboardsArgs()
    err480 := containerStruct2.ReadField3(jsProt479)
    if err480 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Groups
    value2 := argvalue2
    arg481 := flag.Arg(4)
    mbTrans482 := thrift.NewTMemoryBufferLen(len(arg481))
    defer mbTrans482.Close()
    _, err483 := mbTrans482.WriteString(arg481)
    if err483 != nil {
      Usage()
      return
    }
    factory484 := thrift.NewTJSONProtocolFactory()
    jsProt485 := factory484.GetProtocol(mbTrans482)
    argvalue3 := omnisci.NewTDashboardPermissions()
    err486 := argvalue3.Read(jsProt485)
    if err486 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.UnshareDashboards(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_dashboard_grantees":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetDashboardGrantees requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    tmp1, err488 := (strconv.Atoi(flag.Arg(2)))
    if err488 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetDashboardGrantees(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_link_view":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetLinkView requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetLinkView(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "create_link":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CreateLink requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.CreateLink(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "load_table_binary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "LoadTableBinary requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg496 := flag.Arg(3)
    mbTrans497 := thrift.NewTMemoryBufferLen(len(arg496))
    defer mbTrans497.Close()
    _, err498 := mbTrans497.WriteString(arg496)
    if err498 != nil { 
      Usage()
      return
    }
    factory499 := thrift.NewTJSONProtocolFactory()
    jsProt500 := factory499.GetProtocol(mbTrans497)
    containerStruct2 := omnisci.NewOmniSciLoadTableBinaryArgs()
    err501 := containerStruct2.ReadField3(jsProt500)
    if err501 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Rows
    value2 := argvalue2
    arg502 := flag.Arg(4)
    mbTrans503 := thrift.NewTMemoryBufferLen(len(arg502))
    defer mbTrans503.Close()
    _, err504 := mbTrans503.WriteString(arg502)
    if err504 != nil { 
      Usage()
      return
    }
    factory505 := thrift.NewTJSONProtocolFactory()
    jsProt506 := factory505.GetProtocol(mbTrans503)
    containerStruct3 := omnisci.NewOmniSciLoadTableBinaryArgs()
    err507 := containerStruct3.ReadField4(jsProt506)
    if err507 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.ColumnNames
    value3 := argvalue3
    fmt.Print(client.LoadTableBinary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "load_table_binary_columnar":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "LoadTableBinaryColumnar requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg510 := flag.Arg(3)
    mbTrans511 := thrift.NewTMemoryBufferLen(len(arg510))
    defer mbTrans511.Close()
    _, err512 := mbTrans511.WriteString(arg510)
    if err512 != nil { 
      Usage()
      return
    }
    factory513 := thrift.NewTJSONProtocolFactory()
    jsProt514 := factory513.GetProtocol(mbTrans511)
    containerStruct2 := omnisci.NewOmniSciLoadTableBinaryColumnarArgs()
    err515 := containerStruct2.ReadField3(jsProt514)
    if err515 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Cols
    value2 := argvalue2
    arg516 := flag.Arg(4)
    mbTrans517 := thrift.NewTMemoryBufferLen(len(arg516))
    defer mbTrans517.Close()
    _, err518 := mbTrans517.WriteString(arg516)
    if err518 != nil { 
      Usage()
      return
    }
    factory519 := thrift.NewTJSONProtocolFactory()
    jsProt520 := factory519.GetProtocol(mbTrans517)
    containerStruct3 := omnisci.NewOmniSciLoadTableBinaryColumnarArgs()
    err521 := containerStruct3.ReadField4(jsProt520)
    if err521 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.ColumnNames
    value3 := argvalue3
    fmt.Print(client.LoadTableBinaryColumnar(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "load_table_binary_arrow":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "LoadTableBinaryArrow requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.LoadTableBinaryArrow(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "load_table":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "LoadTable requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg528 := flag.Arg(3)
    mbTrans529 := thrift.NewTMemoryBufferLen(len(arg528))
    defer mbTrans529.Close()
    _, err530 := mbTrans529.WriteString(arg528)
    if err530 != nil { 
      Usage()
      return
    }
    factory531 := thrift.NewTJSONProtocolFactory()
    jsProt532 := factory531.GetProtocol(mbTrans529)
    containerStruct2 := omnisci.NewOmniSciLoadTableArgs()
    err533 := containerStruct2.ReadField3(jsProt532)
    if err533 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Rows
    value2 := argvalue2
    arg534 := flag.Arg(4)
    mbTrans535 := thrift.NewTMemoryBufferLen(len(arg534))
    defer mbTrans535.Close()
    _, err536 := mbTrans535.WriteString(arg534)
    if err536 != nil { 
      Usage()
      return
    }
    factory537 := thrift.NewTJSONProtocolFactory()
    jsProt538 := factory537.GetProtocol(mbTrans535)
    containerStruct3 := omnisci.NewOmniSciLoadTableArgs()
    err539 := containerStruct3.ReadField4(jsProt538)
    if err539 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.ColumnNames
    value3 := argvalue3
    fmt.Print(client.LoadTable(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "detect_column_types":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DetectColumnTypes requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg542 := flag.Arg(3)
    mbTrans543 := thrift.NewTMemoryBufferLen(len(arg542))
    defer mbTrans543.Close()
    _, err544 := mbTrans543.WriteString(arg542)
    if err544 != nil {
      Usage()
      return
    }
    factory545 := thrift.NewTJSONProtocolFactory()
    jsProt546 := factory545.GetProtocol(mbTrans543)
    argvalue2 := omnisci.NewTCopyParams()
    err547 := argvalue2.Read(jsProt546)
    if err547 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DetectColumnTypes(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "create_table":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "CreateTable requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg550 := flag.Arg(3)
    mbTrans551 := thrift.NewTMemoryBufferLen(len(arg550))
    defer mbTrans551.Close()
    _, err552 := mbTrans551.WriteString(arg550)
    if err552 != nil { 
      Usage()
      return
    }
    factory553 := thrift.NewTJSONProtocolFactory()
    jsProt554 := factory553.GetProtocol(mbTrans551)
    containerStruct2 := omnisci.NewOmniSciCreateTableArgs()
    err555 := containerStruct2.ReadField3(jsProt554)
    if err555 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.RowDesc
    value2 := omnisci.TRowDescriptor(argvalue2)
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := omnisci.TFileType(tmp3)
    value3 := argvalue3
    arg556 := flag.Arg(5)
    mbTrans557 := thrift.NewTMemoryBufferLen(len(arg556))
    defer mbTrans557.Close()
    _, err558 := mbTrans557.WriteString(arg556)
    if err558 != nil {
      Usage()
      return
    }
    factory559 := thrift.NewTJSONProtocolFactory()
    jsProt560 := factory559.GetProtocol(mbTrans557)
    argvalue4 := omnisci.NewTCreateParams()
    err561 := argvalue4.Read(jsProt560)
    if err561 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.CreateTable(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "import_table":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "ImportTable requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg565 := flag.Arg(4)
    mbTrans566 := thrift.NewTMemoryBufferLen(len(arg565))
    defer mbTrans566.Close()
    _, err567 := mbTrans566.WriteString(arg565)
    if err567 != nil {
      Usage()
      return
    }
    factory568 := thrift.NewTJSONProtocolFactory()
    jsProt569 := factory568.GetProtocol(mbTrans566)
    argvalue3 := omnisci.NewTCopyParams()
    err570 := argvalue3.Read(jsProt569)
    if err570 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.ImportTable(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "import_geo_table":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "ImportGeoTable requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg574 := flag.Arg(4)
    mbTrans575 := thrift.NewTMemoryBufferLen(len(arg574))
    defer mbTrans575.Close()
    _, err576 := mbTrans575.WriteString(arg574)
    if err576 != nil {
      Usage()
      return
    }
    factory577 := thrift.NewTJSONProtocolFactory()
    jsProt578 := factory577.GetProtocol(mbTrans575)
    argvalue3 := omnisci.NewTCopyParams()
    err579 := argvalue3.Read(jsProt578)
    if err579 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg580 := flag.Arg(5)
    mbTrans581 := thrift.NewTMemoryBufferLen(len(arg580))
    defer mbTrans581.Close()
    _, err582 := mbTrans581.WriteString(arg580)
    if err582 != nil { 
      Usage()
      return
    }
    factory583 := thrift.NewTJSONProtocolFactory()
    jsProt584 := factory583.GetProtocol(mbTrans581)
    containerStruct4 := omnisci.NewOmniSciImportGeoTableArgs()
    err585 := containerStruct4.ReadField5(jsProt584)
    if err585 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.RowDesc
    value4 := omnisci.TRowDescriptor(argvalue4)
    arg586 := flag.Arg(6)
    mbTrans587 := thrift.NewTMemoryBufferLen(len(arg586))
    defer mbTrans587.Close()
    _, err588 := mbTrans587.WriteString(arg586)
    if err588 != nil {
      Usage()
      return
    }
    factory589 := thrift.NewTJSONProtocolFactory()
    jsProt590 := factory589.GetProtocol(mbTrans587)
    argvalue5 := omnisci.NewTCreateParams()
    err591 := argvalue5.Read(jsProt590)
    if err591 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    fmt.Print(client.ImportGeoTable(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "import_table_status":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ImportTableStatus requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ImportTableStatus(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_first_geo_file_in_archive":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetFirstGeoFileInArchive requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg596 := flag.Arg(3)
    mbTrans597 := thrift.NewTMemoryBufferLen(len(arg596))
    defer mbTrans597.Close()
    _, err598 := mbTrans597.WriteString(arg596)
    if err598 != nil {
      Usage()
      return
    }
    factory599 := thrift.NewTJSONProtocolFactory()
    jsProt600 := factory599.GetProtocol(mbTrans597)
    argvalue2 := omnisci.NewTCopyParams()
    err601 := argvalue2.Read(jsProt600)
    if err601 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GetFirstGeoFileInArchive(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_all_files_in_archive":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetAllFilesInArchive requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg604 := flag.Arg(3)
    mbTrans605 := thrift.NewTMemoryBufferLen(len(arg604))
    defer mbTrans605.Close()
    _, err606 := mbTrans605.WriteString(arg604)
    if err606 != nil {
      Usage()
      return
    }
    factory607 := thrift.NewTJSONProtocolFactory()
    jsProt608 := factory607.GetProtocol(mbTrans605)
    argvalue2 := omnisci.NewTCopyParams()
    err609 := argvalue2.Read(jsProt608)
    if err609 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GetAllFilesInArchive(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_layers_in_geo_file":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetLayersInGeoFile requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg612 := flag.Arg(3)
    mbTrans613 := thrift.NewTMemoryBufferLen(len(arg612))
    defer mbTrans613.Close()
    _, err614 := mbTrans613.WriteString(arg612)
    if err614 != nil {
      Usage()
      return
    }
    factory615 := thrift.NewTJSONProtocolFactory()
    jsProt616 := factory615.GetProtocol(mbTrans613)
    argvalue2 := omnisci.NewTCopyParams()
    err617 := argvalue2.Read(jsProt616)
    if err617 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GetLayersInGeoFile(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "query_get_outer_fragment_count":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "QueryGetOuterFragmentCount requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.QueryGetOuterFragmentCount(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "check_table_consistency":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CheckTableConsistency requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    tmp1, err621 := (strconv.Atoi(flag.Arg(2)))
    if err621 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.CheckTableConsistency(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "start_query":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "StartQuery requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := omnisci.TSessionId(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5) == "true"
    value4 := argvalue4
    arg627 := flag.Arg(6)
    mbTrans628 := thrift.NewTMemoryBufferLen(len(arg627))
    defer mbTrans628.Close()
    _, err629 := mbTrans628.WriteString(arg627)
    if err629 != nil { 
      Usage()
      return
    }
    factory630 := thrift.NewTJSONProtocolFactory()
    jsProt631 := factory630.GetProtocol(mbTrans628)
    containerStruct5 := omnisci.NewOmniSciStartQueryArgs()
    err632 := containerStruct5.ReadField6(jsProt631)
    if err632 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.OuterFragmentIndices
    value5 := argvalue5
    fmt.Print(client.StartQuery(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "execute_query_step":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ExecuteQueryStep requires 3 args")
      flag.Usage()
    }
    arg633 := flag.Arg(1)
    mbTrans634 := thrift.NewTMemoryBufferLen(len(arg633))
    defer mbTrans634.Close()
    _, err635 := mbTrans634.WriteString(arg633)
    if err635 != nil {
      Usage()
      return
    }
    factory636 := thrift.NewTJSONProtocolFactory()
    jsProt637 := factory636.GetProtocol(mbTrans634)
    argvalue0 := omnisci.NewTPendingQuery()
    err638 := argvalue0.Read(jsProt637)
    if err638 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err639 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err639 != nil {
      Usage()
      return
    }
    value1 := omnisci.TSubqueryId(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.ExecuteQueryStep(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "broadcast_serialized_rows":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "BroadcastSerializedRows requires 5 args")
      flag.Usage()
    }
    arg641 := flag.Arg(1)
    mbTrans642 := thrift.NewTMemoryBufferLen(len(arg641))
    defer mbTrans642.Close()
    _, err643 := mbTrans642.WriteString(arg641)
    if err643 != nil {
      Usage()
      return
    }
    factory644 := thrift.NewTJSONProtocolFactory()
    jsProt645 := factory644.GetProtocol(mbTrans642)
    argvalue0 := serialized_result_set.NewTSerializedRows()
    err646 := argvalue0.Read(jsProt645)
    if err646 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg647 := flag.Arg(2)
    mbTrans648 := thrift.NewTMemoryBufferLen(len(arg647))
    defer mbTrans648.Close()
    _, err649 := mbTrans648.WriteString(arg647)
    if err649 != nil { 
      Usage()
      return
    }
    factory650 := thrift.NewTJSONProtocolFactory()
    jsProt651 := factory650.GetProtocol(mbTrans648)
    containerStruct1 := omnisci.NewOmniSciBroadcastSerializedRowsArgs()
    err652 := containerStruct1.ReadField2(jsProt651)
    if err652 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.RowDesc
    value1 := omnisci.TRowDescriptor(argvalue1)
    argvalue2, err653 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err653 != nil {
      Usage()
      return
    }
    value2 := omnisci.TQueryId(argvalue2)
    argvalue3, err654 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err654 != nil {
      Usage()
      return
    }
    value3 := omnisci.TSubqueryId(argvalue3)
    argvalue4 := flag.Arg(5) == "true"
    value4 := argvalue4
    fmt.Print(client.BroadcastSerializedRows(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "start_render_query":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "StartRenderQuery requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1, err657 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err657 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err658 := (strconv.Atoi(flag.Arg(3)))
    if err658 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.StartRenderQuery(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "execute_next_render_step":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExecuteNextRenderStep requires 2 args")
      flag.Usage()
    }
    arg660 := flag.Arg(1)
    mbTrans661 := thrift.NewTMemoryBufferLen(len(arg660))
    defer mbTrans661.Close()
    _, err662 := mbTrans661.WriteString(arg660)
    if err662 != nil {
      Usage()
      return
    }
    factory663 := thrift.NewTJSONProtocolFactory()
    jsProt664 := factory663.GetProtocol(mbTrans661)
    argvalue0 := omnisci.NewTPendingRenderQuery()
    err665 := argvalue0.Read(jsProt664)
    if err665 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg666 := flag.Arg(2)
    mbTrans667 := thrift.NewTMemoryBufferLen(len(arg666))
    defer mbTrans667.Close()
    _, err668 := mbTrans667.WriteString(arg666)
    if err668 != nil { 
      Usage()
      return
    }
    factory669 := thrift.NewTJSONProtocolFactory()
    jsProt670 := factory669.GetProtocol(mbTrans667)
    containerStruct1 := omnisci.NewOmniSciExecuteNextRenderStepArgs()
    err671 := containerStruct1.ReadField2(jsProt670)
    if err671 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.MergedData
    value1 := omnisci.TRenderAggDataMap(argvalue1)
    fmt.Print(client.ExecuteNextRenderStep(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "insert_data":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "InsertData requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    arg673 := flag.Arg(2)
    mbTrans674 := thrift.NewTMemoryBufferLen(len(arg673))
    defer mbTrans674.Close()
    _, err675 := mbTrans674.WriteString(arg673)
    if err675 != nil {
      Usage()
      return
    }
    factory676 := thrift.NewTJSONProtocolFactory()
    jsProt677 := factory676.GetProtocol(mbTrans674)
    argvalue1 := omnisci.NewTInsertData()
    err678 := argvalue1.Read(jsProt677)
    if err678 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.InsertData(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "checkpoint":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Checkpoint requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    tmp1, err680 := (strconv.Atoi(flag.Arg(2)))
    if err680 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.Checkpoint(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_roles":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRoles requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    fmt.Print(client.GetRoles(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_db_objects_for_grantee":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetDbObjectsForGrantee requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetDbObjectsForGrantee(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_db_object_privs":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetDbObjectPrivs requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := omnisci.TDBObjectType(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetDbObjectPrivs(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_all_roles_for_user":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllRolesForUser requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetAllRolesForUser(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "has_role":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "HasRole requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.HasRole(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "has_object_privilege":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "HasObjectPrivilege requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := omnisci.TDBObjectType(tmp3)
    value3 := argvalue3
    arg694 := flag.Arg(5)
    mbTrans695 := thrift.NewTMemoryBufferLen(len(arg694))
    defer mbTrans695.Close()
    _, err696 := mbTrans695.WriteString(arg694)
    if err696 != nil {
      Usage()
      return
    }
    factory697 := thrift.NewTJSONProtocolFactory()
    jsProt698 := factory697.GetProtocol(mbTrans695)
    argvalue4 := omnisci.NewTDBObjectPermissions()
    err699 := argvalue4.Read(jsProt698)
    if err699 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.HasObjectPrivilege(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "set_license_key":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SetLicenseKey requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetLicenseKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_license_claims":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetLicenseClaims requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetLicenseClaims(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_device_parameters":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDeviceParameters requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    fmt.Print(client.GetDeviceParameters(context.Background(), value0))
    fmt.Print("\n")
    break
  case "register_runtime_extension_functions":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "RegisterRuntimeExtensionFunctions requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := omnisci.TSessionId(argvalue0)
    arg707 := flag.Arg(2)
    mbTrans708 := thrift.NewTMemoryBufferLen(len(arg707))
    defer mbTrans708.Close()
    _, err709 := mbTrans708.WriteString(arg707)
    if err709 != nil { 
      Usage()
      return
    }
    factory710 := thrift.NewTJSONProtocolFactory()
    jsProt711 := factory710.GetProtocol(mbTrans708)
    containerStruct1 := omnisci.NewOmniSciRegisterRuntimeExtensionFunctionsArgs()
    err712 := containerStruct1.ReadField2(jsProt711)
    if err712 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Udfs
    value1 := argvalue1
    arg713 := flag.Arg(3)
    mbTrans714 := thrift.NewTMemoryBufferLen(len(arg713))
    defer mbTrans714.Close()
    _, err715 := mbTrans714.WriteString(arg713)
    if err715 != nil { 
      Usage()
      return
    }
    factory716 := thrift.NewTJSONProtocolFactory()
    jsProt717 := factory716.GetProtocol(mbTrans714)
    containerStruct2 := omnisci.NewOmniSciRegisterRuntimeExtensionFunctionsArgs()
    err718 := containerStruct2.ReadField3(jsProt717)
    if err718 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Udtfs
    value2 := argvalue2
    arg719 := flag.Arg(4)
    mbTrans720 := thrift.NewTMemoryBufferLen(len(arg719))
    defer mbTrans720.Close()
    _, err721 := mbTrans720.WriteString(arg719)
    if err721 != nil { 
      Usage()
      return
    }
    factory722 := thrift.NewTJSONProtocolFactory()
    jsProt723 := factory722.GetProtocol(mbTrans720)
    containerStruct3 := omnisci.NewOmniSciRegisterRuntimeExtensionFunctionsArgs()
    err724 := containerStruct3.ReadField4(jsProt723)
    if err724 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.DeviceIrMap
    value3 := argvalue3
    fmt.Print(client.RegisterRuntimeExtensionFunctions(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
