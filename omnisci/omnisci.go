// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package omnisci

import(
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"common"
	"completion_hints"
	"serialized_result_set"
	"extension_functions"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = completion_hints.GoUnusedProtection__
var _ = serialized_result_set.GoUnusedProtection__
var _ = extension_functions.GoUnusedProtection__
type TExecuteMode int64
const (
  TExecuteMode_GPU TExecuteMode = 1
  TExecuteMode_CPU TExecuteMode = 2
)

func (p TExecuteMode) String() string {
  switch p {
  case TExecuteMode_GPU: return "GPU"
  case TExecuteMode_CPU: return "CPU"
  }
  return "<UNSET>"
}

func TExecuteModeFromString(s string) (TExecuteMode, error) {
  switch s {
  case "GPU": return TExecuteMode_GPU, nil 
  case "CPU": return TExecuteMode_CPU, nil 
  }
  return TExecuteMode(0), fmt.Errorf("not a valid TExecuteMode string")
}


func TExecuteModePtr(v TExecuteMode) *TExecuteMode { return &v }

func (p TExecuteMode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TExecuteMode) UnmarshalText(text []byte) error {
q, err := TExecuteModeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TExecuteMode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TExecuteMode(v)
return nil
}

func (p * TExecuteMode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TFileType int64
const (
  TFileType_DELIMITED TFileType = 0
  TFileType_POLYGON TFileType = 1
  TFileType_PARQUET TFileType = 2
)

func (p TFileType) String() string {
  switch p {
  case TFileType_DELIMITED: return "DELIMITED"
  case TFileType_POLYGON: return "POLYGON"
  case TFileType_PARQUET: return "PARQUET"
  }
  return "<UNSET>"
}

func TFileTypeFromString(s string) (TFileType, error) {
  switch s {
  case "DELIMITED": return TFileType_DELIMITED, nil 
  case "POLYGON": return TFileType_POLYGON, nil 
  case "PARQUET": return TFileType_PARQUET, nil 
  }
  return TFileType(0), fmt.Errorf("not a valid TFileType string")
}


func TFileTypePtr(v TFileType) *TFileType { return &v }

func (p TFileType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TFileType) UnmarshalText(text []byte) error {
q, err := TFileTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TFileType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TFileType(v)
return nil
}

func (p * TFileType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TPartitionDetail int64
const (
  TPartitionDetail_DEFAULT TPartitionDetail = 0
  TPartitionDetail_REPLICATED TPartitionDetail = 1
  TPartitionDetail_SHARDED TPartitionDetail = 2
  TPartitionDetail_OTHER TPartitionDetail = 3
)

func (p TPartitionDetail) String() string {
  switch p {
  case TPartitionDetail_DEFAULT: return "DEFAULT"
  case TPartitionDetail_REPLICATED: return "REPLICATED"
  case TPartitionDetail_SHARDED: return "SHARDED"
  case TPartitionDetail_OTHER: return "OTHER"
  }
  return "<UNSET>"
}

func TPartitionDetailFromString(s string) (TPartitionDetail, error) {
  switch s {
  case "DEFAULT": return TPartitionDetail_DEFAULT, nil 
  case "REPLICATED": return TPartitionDetail_REPLICATED, nil 
  case "SHARDED": return TPartitionDetail_SHARDED, nil 
  case "OTHER": return TPartitionDetail_OTHER, nil 
  }
  return TPartitionDetail(0), fmt.Errorf("not a valid TPartitionDetail string")
}


func TPartitionDetailPtr(v TPartitionDetail) *TPartitionDetail { return &v }

func (p TPartitionDetail) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TPartitionDetail) UnmarshalText(text []byte) error {
q, err := TPartitionDetailFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TPartitionDetail) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TPartitionDetail(v)
return nil
}

func (p * TPartitionDetail) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TGeoFileLayerContents int64
const (
  TGeoFileLayerContents_EMPTY TGeoFileLayerContents = 0
  TGeoFileLayerContents_GEO TGeoFileLayerContents = 1
  TGeoFileLayerContents_NON_GEO TGeoFileLayerContents = 2
  TGeoFileLayerContents_UNSUPPORTED_GEO TGeoFileLayerContents = 3
)

func (p TGeoFileLayerContents) String() string {
  switch p {
  case TGeoFileLayerContents_EMPTY: return "EMPTY"
  case TGeoFileLayerContents_GEO: return "GEO"
  case TGeoFileLayerContents_NON_GEO: return "NON_GEO"
  case TGeoFileLayerContents_UNSUPPORTED_GEO: return "UNSUPPORTED_GEO"
  }
  return "<UNSET>"
}

func TGeoFileLayerContentsFromString(s string) (TGeoFileLayerContents, error) {
  switch s {
  case "EMPTY": return TGeoFileLayerContents_EMPTY, nil 
  case "GEO": return TGeoFileLayerContents_GEO, nil 
  case "NON_GEO": return TGeoFileLayerContents_NON_GEO, nil 
  case "UNSUPPORTED_GEO": return TGeoFileLayerContents_UNSUPPORTED_GEO, nil 
  }
  return TGeoFileLayerContents(0), fmt.Errorf("not a valid TGeoFileLayerContents string")
}


func TGeoFileLayerContentsPtr(v TGeoFileLayerContents) *TGeoFileLayerContents { return &v }

func (p TGeoFileLayerContents) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TGeoFileLayerContents) UnmarshalText(text []byte) error {
q, err := TGeoFileLayerContentsFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TGeoFileLayerContents) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TGeoFileLayerContents(v)
return nil
}

func (p * TGeoFileLayerContents) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TImportHeaderRow int64
const (
  TImportHeaderRow_AUTODETECT TImportHeaderRow = 0
  TImportHeaderRow_NO_HEADER TImportHeaderRow = 1
  TImportHeaderRow_HAS_HEADER TImportHeaderRow = 2
)

func (p TImportHeaderRow) String() string {
  switch p {
  case TImportHeaderRow_AUTODETECT: return "AUTODETECT"
  case TImportHeaderRow_NO_HEADER: return "NO_HEADER"
  case TImportHeaderRow_HAS_HEADER: return "HAS_HEADER"
  }
  return "<UNSET>"
}

func TImportHeaderRowFromString(s string) (TImportHeaderRow, error) {
  switch s {
  case "AUTODETECT": return TImportHeaderRow_AUTODETECT, nil 
  case "NO_HEADER": return TImportHeaderRow_NO_HEADER, nil 
  case "HAS_HEADER": return TImportHeaderRow_HAS_HEADER, nil 
  }
  return TImportHeaderRow(0), fmt.Errorf("not a valid TImportHeaderRow string")
}


func TImportHeaderRowPtr(v TImportHeaderRow) *TImportHeaderRow { return &v }

func (p TImportHeaderRow) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TImportHeaderRow) UnmarshalText(text []byte) error {
q, err := TImportHeaderRowFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TImportHeaderRow) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TImportHeaderRow(v)
return nil
}

func (p * TImportHeaderRow) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TRole int64
const (
  TRole_SERVER TRole = 0
  TRole_AGGREGATOR TRole = 1
  TRole_LEAF TRole = 2
  TRole_STRING_DICTIONARY TRole = 3
)

func (p TRole) String() string {
  switch p {
  case TRole_SERVER: return "SERVER"
  case TRole_AGGREGATOR: return "AGGREGATOR"
  case TRole_LEAF: return "LEAF"
  case TRole_STRING_DICTIONARY: return "STRING_DICTIONARY"
  }
  return "<UNSET>"
}

func TRoleFromString(s string) (TRole, error) {
  switch s {
  case "SERVER": return TRole_SERVER, nil 
  case "AGGREGATOR": return TRole_AGGREGATOR, nil 
  case "LEAF": return TRole_LEAF, nil 
  case "STRING_DICTIONARY": return TRole_STRING_DICTIONARY, nil 
  }
  return TRole(0), fmt.Errorf("not a valid TRole string")
}


func TRolePtr(v TRole) *TRole { return &v }

func (p TRole) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TRole) UnmarshalText(text []byte) error {
q, err := TRoleFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TRole) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TRole(v)
return nil
}

func (p * TRole) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TMergeType int64
const (
  TMergeType_UNION TMergeType = 0
  TMergeType_REDUCE TMergeType = 1
)

func (p TMergeType) String() string {
  switch p {
  case TMergeType_UNION: return "UNION"
  case TMergeType_REDUCE: return "REDUCE"
  }
  return "<UNSET>"
}

func TMergeTypeFromString(s string) (TMergeType, error) {
  switch s {
  case "UNION": return TMergeType_UNION, nil 
  case "REDUCE": return TMergeType_REDUCE, nil 
  }
  return TMergeType(0), fmt.Errorf("not a valid TMergeType string")
}


func TMergeTypePtr(v TMergeType) *TMergeType { return &v }

func (p TMergeType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TMergeType) UnmarshalText(text []byte) error {
q, err := TMergeTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TMergeType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TMergeType(v)
return nil
}

func (p * TMergeType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TQueryType int64
const (
  TQueryType_UNKNOWN TQueryType = 0
  TQueryType_READ TQueryType = 1
  TQueryType_WRITE TQueryType = 2
  TQueryType_SCHEMA_READ TQueryType = 3
  TQueryType_SCHEMA_WRITE TQueryType = 4
)

func (p TQueryType) String() string {
  switch p {
  case TQueryType_UNKNOWN: return "UNKNOWN"
  case TQueryType_READ: return "READ"
  case TQueryType_WRITE: return "WRITE"
  case TQueryType_SCHEMA_READ: return "SCHEMA_READ"
  case TQueryType_SCHEMA_WRITE: return "SCHEMA_WRITE"
  }
  return "<UNSET>"
}

func TQueryTypeFromString(s string) (TQueryType, error) {
  switch s {
  case "UNKNOWN": return TQueryType_UNKNOWN, nil 
  case "READ": return TQueryType_READ, nil 
  case "WRITE": return TQueryType_WRITE, nil 
  case "SCHEMA_READ": return TQueryType_SCHEMA_READ, nil 
  case "SCHEMA_WRITE": return TQueryType_SCHEMA_WRITE, nil 
  }
  return TQueryType(0), fmt.Errorf("not a valid TQueryType string")
}


func TQueryTypePtr(v TQueryType) *TQueryType { return &v }

func (p TQueryType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TQueryType) UnmarshalText(text []byte) error {
q, err := TQueryTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TQueryType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TQueryType(v)
return nil
}

func (p * TQueryType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TArrowTransport int64
const (
  TArrowTransport_SHARED_MEMORY TArrowTransport = 0
  TArrowTransport_WIRE TArrowTransport = 1
)

func (p TArrowTransport) String() string {
  switch p {
  case TArrowTransport_SHARED_MEMORY: return "SHARED_MEMORY"
  case TArrowTransport_WIRE: return "WIRE"
  }
  return "<UNSET>"
}

func TArrowTransportFromString(s string) (TArrowTransport, error) {
  switch s {
  case "SHARED_MEMORY": return TArrowTransport_SHARED_MEMORY, nil 
  case "WIRE": return TArrowTransport_WIRE, nil 
  }
  return TArrowTransport(0), fmt.Errorf("not a valid TArrowTransport string")
}


func TArrowTransportPtr(v TArrowTransport) *TArrowTransport { return &v }

func (p TArrowTransport) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TArrowTransport) UnmarshalText(text []byte) error {
q, err := TArrowTransportFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TArrowTransport) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TArrowTransport(v)
return nil
}

func (p * TArrowTransport) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TExpressionRangeType int64
const (
  TExpressionRangeType_INVALID TExpressionRangeType = 0
  TExpressionRangeType_INTEGER TExpressionRangeType = 1
  TExpressionRangeType_FLOAT TExpressionRangeType = 2
  TExpressionRangeType_DOUBLE TExpressionRangeType = 3
)

func (p TExpressionRangeType) String() string {
  switch p {
  case TExpressionRangeType_INVALID: return "INVALID"
  case TExpressionRangeType_INTEGER: return "INTEGER"
  case TExpressionRangeType_FLOAT: return "FLOAT"
  case TExpressionRangeType_DOUBLE: return "DOUBLE"
  }
  return "<UNSET>"
}

func TExpressionRangeTypeFromString(s string) (TExpressionRangeType, error) {
  switch s {
  case "INVALID": return TExpressionRangeType_INVALID, nil 
  case "INTEGER": return TExpressionRangeType_INTEGER, nil 
  case "FLOAT": return TExpressionRangeType_FLOAT, nil 
  case "DOUBLE": return TExpressionRangeType_DOUBLE, nil 
  }
  return TExpressionRangeType(0), fmt.Errorf("not a valid TExpressionRangeType string")
}


func TExpressionRangeTypePtr(v TExpressionRangeType) *TExpressionRangeType { return &v }

func (p TExpressionRangeType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TExpressionRangeType) UnmarshalText(text []byte) error {
q, err := TExpressionRangeTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TExpressionRangeType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TExpressionRangeType(v)
return nil
}

func (p * TExpressionRangeType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TDBObjectType int64
const (
  TDBObjectType_AbstractDBObjectType TDBObjectType = 0
  TDBObjectType_DatabaseDBObjectType TDBObjectType = 1
  TDBObjectType_TableDBObjectType TDBObjectType = 2
  TDBObjectType_DashboardDBObjectType TDBObjectType = 3
  TDBObjectType_ViewDBObjectType TDBObjectType = 4
  TDBObjectType_ServerDBObjectType TDBObjectType = 5
)

func (p TDBObjectType) String() string {
  switch p {
  case TDBObjectType_AbstractDBObjectType: return "AbstractDBObjectType"
  case TDBObjectType_DatabaseDBObjectType: return "DatabaseDBObjectType"
  case TDBObjectType_TableDBObjectType: return "TableDBObjectType"
  case TDBObjectType_DashboardDBObjectType: return "DashboardDBObjectType"
  case TDBObjectType_ViewDBObjectType: return "ViewDBObjectType"
  case TDBObjectType_ServerDBObjectType: return "ServerDBObjectType"
  }
  return "<UNSET>"
}

func TDBObjectTypeFromString(s string) (TDBObjectType, error) {
  switch s {
  case "AbstractDBObjectType": return TDBObjectType_AbstractDBObjectType, nil 
  case "DatabaseDBObjectType": return TDBObjectType_DatabaseDBObjectType, nil 
  case "TableDBObjectType": return TDBObjectType_TableDBObjectType, nil 
  case "DashboardDBObjectType": return TDBObjectType_DashboardDBObjectType, nil 
  case "ViewDBObjectType": return TDBObjectType_ViewDBObjectType, nil 
  case "ServerDBObjectType": return TDBObjectType_ServerDBObjectType, nil 
  }
  return TDBObjectType(0), fmt.Errorf("not a valid TDBObjectType string")
}


func TDBObjectTypePtr(v TDBObjectType) *TDBObjectType { return &v }

func (p TDBObjectType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TDBObjectType) UnmarshalText(text []byte) error {
q, err := TDBObjectTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TDBObjectType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TDBObjectType(v)
return nil
}

func (p * TDBObjectType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TRowDescriptor []*TColumnType

func TRowDescriptorPtr(v TRowDescriptor) *TRowDescriptor { return &v }

type TSessionId string

func TSessionIdPtr(v TSessionId) *TSessionId { return &v }

type TKrb5Token string

func TKrb5TokenPtr(v TKrb5Token) *TKrb5Token { return &v }

type TQueryId int64

func TQueryIdPtr(v TQueryId) *TQueryId { return &v }

type TSubqueryId int64

func TSubqueryIdPtr(v TSubqueryId) *TSubqueryId { return &v }

type TRenderPassMap map[int32]*TRawRenderPassDataResult_

func TRenderPassMapPtr(v TRenderPassMap) *TRenderPassMap { return &v }

type TRenderAggDataMap map[string]map[string]map[string]map[string][]*TRenderDatum

func TRenderAggDataMapPtr(v TRenderAggDataMap) *TRenderAggDataMap { return &v }

// Attributes:
//  - IntVal
//  - RealVal
//  - StrVal
//  - ArrVal
type TDatumVal struct {
  IntVal int64 `thrift:"int_val,1" db:"int_val" json:"int_val"`
  RealVal float64 `thrift:"real_val,2" db:"real_val" json:"real_val"`
  StrVal string `thrift:"str_val,3" db:"str_val" json:"str_val"`
  ArrVal []*TDatum `thrift:"arr_val,4" db:"arr_val" json:"arr_val"`
}

func NewTDatumVal() *TDatumVal {
  return &TDatumVal{}
}


func (p *TDatumVal) GetIntVal() int64 {
  return p.IntVal
}

func (p *TDatumVal) GetRealVal() float64 {
  return p.RealVal
}

func (p *TDatumVal) GetStrVal() string {
  return p.StrVal
}

func (p *TDatumVal) GetArrVal() []*TDatum {
  return p.ArrVal
}
func (p *TDatumVal) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDatumVal)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IntVal = v
}
  return nil
}

func (p *TDatumVal)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RealVal = v
}
  return nil
}

func (p *TDatumVal)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StrVal = v
}
  return nil
}

func (p *TDatumVal)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDatum, 0, size)
  p.ArrVal =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &TDatum{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.ArrVal = append(p.ArrVal, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDatumVal) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDatumVal"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDatumVal) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("int_val", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:int_val: ", p), err) }
  if err := oprot.WriteI64(int64(p.IntVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.int_val (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:int_val: ", p), err) }
  return err
}

func (p *TDatumVal) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("real_val", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:real_val: ", p), err) }
  if err := oprot.WriteDouble(float64(p.RealVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.real_val (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:real_val: ", p), err) }
  return err
}

func (p *TDatumVal) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("str_val", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:str_val: ", p), err) }
  if err := oprot.WriteString(string(p.StrVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.str_val (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:str_val: ", p), err) }
  return err
}

func (p *TDatumVal) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("arr_val", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:arr_val: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ArrVal)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ArrVal {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:arr_val: ", p), err) }
  return err
}

func (p *TDatumVal) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDatumVal(%+v)", *p)
}

// Attributes:
//  - Val
//  - IsNull
type TDatum struct {
  Val *TDatumVal `thrift:"val,1" db:"val" json:"val"`
  IsNull bool `thrift:"is_null,2" db:"is_null" json:"is_null"`
}

func NewTDatum() *TDatum {
  return &TDatum{}
}

var TDatum_Val_DEFAULT *TDatumVal
func (p *TDatum) GetVal() *TDatumVal {
  if !p.IsSetVal() {
    return TDatum_Val_DEFAULT
  }
return p.Val
}

func (p *TDatum) GetIsNull() bool {
  return p.IsNull
}
func (p *TDatum) IsSetVal() bool {
  return p.Val != nil
}

func (p *TDatum) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDatum)  ReadField1(iprot thrift.TProtocol) error {
  p.Val = &TDatumVal{}
  if err := p.Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Val), err)
  }
  return nil
}

func (p *TDatum)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IsNull = v
}
  return nil
}

func (p *TDatum) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDatum"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDatum) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("val", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:val: ", p), err) }
  if err := p.Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:val: ", p), err) }
  return err
}

func (p *TDatum) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_null", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:is_null: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsNull)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_null (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:is_null: ", p), err) }
  return err
}

func (p *TDatum) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDatum(%+v)", *p)
}

// Attributes:
//  - StrVal
//  - IsNull
type TStringValue struct {
  StrVal string `thrift:"str_val,1" db:"str_val" json:"str_val"`
  IsNull bool `thrift:"is_null,2" db:"is_null" json:"is_null"`
}

func NewTStringValue() *TStringValue {
  return &TStringValue{}
}


func (p *TStringValue) GetStrVal() string {
  return p.StrVal
}

func (p *TStringValue) GetIsNull() bool {
  return p.IsNull
}
func (p *TStringValue) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringValue)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StrVal = v
}
  return nil
}

func (p *TStringValue)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IsNull = v
}
  return nil
}

func (p *TStringValue) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TStringValue"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringValue) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("str_val", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:str_val: ", p), err) }
  if err := oprot.WriteString(string(p.StrVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.str_val (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:str_val: ", p), err) }
  return err
}

func (p *TStringValue) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_null", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:is_null: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsNull)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_null (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:is_null: ", p), err) }
  return err
}

func (p *TStringValue) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringValue(%+v)", *p)
}

// Attributes:
//  - ColName
//  - ColType
//  - IsReservedKeyword
//  - SrcName
//  - IsSystem
//  - IsPhysical
//  - ColID
type TColumnType struct {
  ColName string `thrift:"col_name,1" db:"col_name" json:"col_name"`
  ColType *common.TTypeInfo `thrift:"col_type,2" db:"col_type" json:"col_type"`
  IsReservedKeyword bool `thrift:"is_reserved_keyword,3" db:"is_reserved_keyword" json:"is_reserved_keyword"`
  SrcName string `thrift:"src_name,4" db:"src_name" json:"src_name"`
  IsSystem bool `thrift:"is_system,5" db:"is_system" json:"is_system"`
  IsPhysical bool `thrift:"is_physical,6" db:"is_physical" json:"is_physical"`
  ColID int64 `thrift:"col_id,7" db:"col_id" json:"col_id"`
}

func NewTColumnType() *TColumnType {
  return &TColumnType{}
}


func (p *TColumnType) GetColName() string {
  return p.ColName
}
var TColumnType_ColType_DEFAULT *common.TTypeInfo
func (p *TColumnType) GetColType() *common.TTypeInfo {
  if !p.IsSetColType() {
    return TColumnType_ColType_DEFAULT
  }
return p.ColType
}

func (p *TColumnType) GetIsReservedKeyword() bool {
  return p.IsReservedKeyword
}

func (p *TColumnType) GetSrcName() string {
  return p.SrcName
}

func (p *TColumnType) GetIsSystem() bool {
  return p.IsSystem
}

func (p *TColumnType) GetIsPhysical() bool {
  return p.IsPhysical
}

func (p *TColumnType) GetColID() int64 {
  return p.ColID
}
func (p *TColumnType) IsSetColType() bool {
  return p.ColType != nil
}

func (p *TColumnType) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TColumnType)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ColName = v
}
  return nil
}

func (p *TColumnType)  ReadField2(iprot thrift.TProtocol) error {
  p.ColType = &common.TTypeInfo{
  Size: -1,
}
  if err := p.ColType.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ColType), err)
  }
  return nil
}

func (p *TColumnType)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IsReservedKeyword = v
}
  return nil
}

func (p *TColumnType)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SrcName = v
}
  return nil
}

func (p *TColumnType)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IsSystem = v
}
  return nil
}

func (p *TColumnType)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IsPhysical = v
}
  return nil
}

func (p *TColumnType)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ColID = v
}
  return nil
}

func (p *TColumnType) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TColumnType"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TColumnType) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("col_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:col_name: ", p), err) }
  if err := oprot.WriteString(string(p.ColName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.col_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:col_name: ", p), err) }
  return err
}

func (p *TColumnType) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("col_type", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:col_type: ", p), err) }
  if err := p.ColType.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ColType), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:col_type: ", p), err) }
  return err
}

func (p *TColumnType) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_reserved_keyword", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:is_reserved_keyword: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsReservedKeyword)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_reserved_keyword (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:is_reserved_keyword: ", p), err) }
  return err
}

func (p *TColumnType) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("src_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:src_name: ", p), err) }
  if err := oprot.WriteString(string(p.SrcName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.src_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:src_name: ", p), err) }
  return err
}

func (p *TColumnType) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_system", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:is_system: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsSystem)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_system (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:is_system: ", p), err) }
  return err
}

func (p *TColumnType) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_physical", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:is_physical: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsPhysical)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_physical (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:is_physical: ", p), err) }
  return err
}

func (p *TColumnType) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("col_id", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:col_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ColID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.col_id (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:col_id: ", p), err) }
  return err
}

func (p *TColumnType) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TColumnType(%+v)", *p)
}

// Attributes:
//  - Cols
type TRow struct {
  Cols []*TDatum `thrift:"cols,1" db:"cols" json:"cols"`
}

func NewTRow() *TRow {
  return &TRow{}
}


func (p *TRow) GetCols() []*TDatum {
  return p.Cols
}
func (p *TRow) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TRow)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDatum, 0, size)
  p.Cols =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &TDatum{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Cols = append(p.Cols, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TRow) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRow"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRow) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cols", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cols: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Cols)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Cols {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cols: ", p), err) }
  return err
}

func (p *TRow) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRow(%+v)", *p)
}

// Attributes:
//  - IntCol
//  - RealCol
//  - StrCol
//  - ArrCol
type TColumnData struct {
  IntCol []int64 `thrift:"int_col,1" db:"int_col" json:"int_col"`
  RealCol []float64 `thrift:"real_col,2" db:"real_col" json:"real_col"`
  StrCol []string `thrift:"str_col,3" db:"str_col" json:"str_col"`
  ArrCol []*TColumn `thrift:"arr_col,4" db:"arr_col" json:"arr_col"`
}

func NewTColumnData() *TColumnData {
  return &TColumnData{}
}


func (p *TColumnData) GetIntCol() []int64 {
  return p.IntCol
}

func (p *TColumnData) GetRealCol() []float64 {
  return p.RealCol
}

func (p *TColumnData) GetStrCol() []string {
  return p.StrCol
}

func (p *TColumnData) GetArrCol() []*TColumn {
  return p.ArrCol
}
func (p *TColumnData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TColumnData)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.IntCol =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.IntCol = append(p.IntCol, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TColumnData)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]float64, 0, size)
  p.RealCol =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 float64
    if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.RealCol = append(p.RealCol, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TColumnData)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.StrCol =  tSlice
  for i := 0; i < size; i ++ {
var _elem4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem4 = v
}
    p.StrCol = append(p.StrCol, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TColumnData)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TColumn, 0, size)
  p.ArrCol =  tSlice
  for i := 0; i < size; i ++ {
    _elem5 := &TColumn{}
    if err := _elem5.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.ArrCol = append(p.ArrCol, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TColumnData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TColumnData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TColumnData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("int_col", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:int_col: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.IntCol)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.IntCol {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:int_col: ", p), err) }
  return err
}

func (p *TColumnData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("real_col", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:real_col: ", p), err) }
  if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.RealCol)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RealCol {
    if err := oprot.WriteDouble(float64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:real_col: ", p), err) }
  return err
}

func (p *TColumnData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("str_col", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:str_col: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.StrCol)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.StrCol {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:str_col: ", p), err) }
  return err
}

func (p *TColumnData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("arr_col", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:arr_col: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ArrCol)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ArrCol {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:arr_col: ", p), err) }
  return err
}

func (p *TColumnData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TColumnData(%+v)", *p)
}

// Attributes:
//  - Data
//  - Nulls
type TColumn struct {
  Data *TColumnData `thrift:"data,1" db:"data" json:"data"`
  Nulls []bool `thrift:"nulls,2" db:"nulls" json:"nulls"`
}

func NewTColumn() *TColumn {
  return &TColumn{}
}

var TColumn_Data_DEFAULT *TColumnData
func (p *TColumn) GetData() *TColumnData {
  if !p.IsSetData() {
    return TColumn_Data_DEFAULT
  }
return p.Data
}

func (p *TColumn) GetNulls() []bool {
  return p.Nulls
}
func (p *TColumn) IsSetData() bool {
  return p.Data != nil
}

func (p *TColumn) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TColumn)  ReadField1(iprot thrift.TProtocol) error {
  p.Data = &TColumnData{}
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *TColumn)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]bool, 0, size)
  p.Nulls =  tSlice
  for i := 0; i < size; i ++ {
var _elem6 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem6 = v
}
    p.Nulls = append(p.Nulls, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TColumn) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TColumn"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TColumn) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data: ", p), err) }
  if err := p.Data.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data: ", p), err) }
  return err
}

func (p *TColumn) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nulls", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nulls: ", p), err) }
  if err := oprot.WriteListBegin(thrift.BOOL, len(p.Nulls)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Nulls {
    if err := oprot.WriteBool(bool(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nulls: ", p), err) }
  return err
}

func (p *TColumn) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TColumn(%+v)", *p)
}

// Attributes:
//  - Cols
type TStringRow struct {
  Cols []*TStringValue `thrift:"cols,1" db:"cols" json:"cols"`
}

func NewTStringRow() *TStringRow {
  return &TStringRow{}
}


func (p *TStringRow) GetCols() []*TStringValue {
  return p.Cols
}
func (p *TStringRow) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringRow)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TStringValue, 0, size)
  p.Cols =  tSlice
  for i := 0; i < size; i ++ {
    _elem7 := &TStringValue{}
    if err := _elem7.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
    }
    p.Cols = append(p.Cols, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TStringRow) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TStringRow"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringRow) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cols", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cols: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Cols)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Cols {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cols: ", p), err) }
  return err
}

func (p *TStringRow) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringRow(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - KrbToken
type TKrb5Session struct {
  SessionId TSessionId `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  KrbToken TKrb5Token `thrift:"krbToken,2" db:"krbToken" json:"krbToken"`
}

func NewTKrb5Session() *TKrb5Session {
  return &TKrb5Session{}
}


func (p *TKrb5Session) GetSessionId() TSessionId {
  return p.SessionId
}

func (p *TKrb5Session) GetKrbToken() TKrb5Token {
  return p.KrbToken
}
func (p *TKrb5Session) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TKrb5Session)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.SessionId = temp
}
  return nil
}

func (p *TKrb5Session)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TKrb5Token(v)
  p.KrbToken = temp
}
  return nil
}

func (p *TKrb5Session) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TKrb5Session"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TKrb5Session) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteString(string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *TKrb5Session) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("krbToken", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:krbToken: ", p), err) }
  if err := oprot.WriteString(string(p.KrbToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.krbToken (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:krbToken: ", p), err) }
  return err
}

func (p *TKrb5Session) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TKrb5Session(%+v)", *p)
}

// Attributes:
//  - SerializedRows
//  - ExecutionFinished
//  - MergeType
//  - Sharded
//  - RowDesc
//  - NodeID
type TStepResult_ struct {
  SerializedRows *serialized_result_set.TSerializedRows `thrift:"serialized_rows,1" db:"serialized_rows" json:"serialized_rows"`
  ExecutionFinished bool `thrift:"execution_finished,2" db:"execution_finished" json:"execution_finished"`
  MergeType TMergeType `thrift:"merge_type,3" db:"merge_type" json:"merge_type"`
  Sharded bool `thrift:"sharded,4" db:"sharded" json:"sharded"`
  RowDesc TRowDescriptor `thrift:"row_desc,5" db:"row_desc" json:"row_desc"`
  NodeID int32 `thrift:"node_id,6" db:"node_id" json:"node_id"`
}

func NewTStepResult_() *TStepResult_ {
  return &TStepResult_{}
}

var TStepResult__SerializedRows_DEFAULT *serialized_result_set.TSerializedRows
func (p *TStepResult_) GetSerializedRows() *serialized_result_set.TSerializedRows {
  if !p.IsSetSerializedRows() {
    return TStepResult__SerializedRows_DEFAULT
  }
return p.SerializedRows
}

func (p *TStepResult_) GetExecutionFinished() bool {
  return p.ExecutionFinished
}

func (p *TStepResult_) GetMergeType() TMergeType {
  return p.MergeType
}

func (p *TStepResult_) GetSharded() bool {
  return p.Sharded
}

func (p *TStepResult_) GetRowDesc() TRowDescriptor {
  return p.RowDesc
}

func (p *TStepResult_) GetNodeID() int32 {
  return p.NodeID
}
func (p *TStepResult_) IsSetSerializedRows() bool {
  return p.SerializedRows != nil
}

func (p *TStepResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStepResult_)  ReadField1(iprot thrift.TProtocol) error {
  p.SerializedRows = &serialized_result_set.TSerializedRows{}
  if err := p.SerializedRows.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SerializedRows), err)
  }
  return nil
}

func (p *TStepResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExecutionFinished = v
}
  return nil
}

func (p *TStepResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TMergeType(v)
  p.MergeType = temp
}
  return nil
}

func (p *TStepResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Sharded = v
}
  return nil
}

func (p *TStepResult_)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make(TRowDescriptor, 0, size)
  p.RowDesc =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &TColumnType{}
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.RowDesc = append(p.RowDesc, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TStepResult_)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NodeID = v
}
  return nil
}

func (p *TStepResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TStepResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStepResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serialized_rows", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serialized_rows: ", p), err) }
  if err := p.SerializedRows.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SerializedRows), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serialized_rows: ", p), err) }
  return err
}

func (p *TStepResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("execution_finished", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:execution_finished: ", p), err) }
  if err := oprot.WriteBool(bool(p.ExecutionFinished)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.execution_finished (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:execution_finished: ", p), err) }
  return err
}

func (p *TStepResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("merge_type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:merge_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.MergeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.merge_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:merge_type: ", p), err) }
  return err
}

func (p *TStepResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sharded", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sharded: ", p), err) }
  if err := oprot.WriteBool(bool(p.Sharded)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sharded (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sharded: ", p), err) }
  return err
}

func (p *TStepResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_desc", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:row_desc: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowDesc)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RowDesc {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:row_desc: ", p), err) }
  return err
}

func (p *TStepResult_) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("node_id", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:node_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.NodeID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.node_id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:node_id: ", p), err) }
  return err
}

func (p *TStepResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStepResult_(%+v)", *p)
}

// Attributes:
//  - RowDesc
//  - Rows
//  - Columns
//  - IsColumnar
type TRowSet struct {
  RowDesc TRowDescriptor `thrift:"row_desc,1" db:"row_desc" json:"row_desc"`
  Rows []*TRow `thrift:"rows,2" db:"rows" json:"rows"`
  Columns []*TColumn `thrift:"columns,3" db:"columns" json:"columns"`
  IsColumnar bool `thrift:"is_columnar,4" db:"is_columnar" json:"is_columnar"`
}

func NewTRowSet() *TRowSet {
  return &TRowSet{}
}


func (p *TRowSet) GetRowDesc() TRowDescriptor {
  return p.RowDesc
}

func (p *TRowSet) GetRows() []*TRow {
  return p.Rows
}

func (p *TRowSet) GetColumns() []*TColumn {
  return p.Columns
}

func (p *TRowSet) GetIsColumnar() bool {
  return p.IsColumnar
}
func (p *TRowSet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TRowSet)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make(TRowDescriptor, 0, size)
  p.RowDesc =  tSlice
  for i := 0; i < size; i ++ {
    _elem9 := &TColumnType{}
    if err := _elem9.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.RowDesc = append(p.RowDesc, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TRowSet)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TRow, 0, size)
  p.Rows =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := &TRow{}
    if err := _elem10.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.Rows = append(p.Rows, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TRowSet)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TColumn, 0, size)
  p.Columns =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := &TColumn{}
    if err := _elem11.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.Columns = append(p.Columns, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TRowSet)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsColumnar = v
}
  return nil
}

func (p *TRowSet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRowSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRowSet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_desc", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row_desc: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowDesc)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RowDesc {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row_desc: ", p), err) }
  return err
}

func (p *TRowSet) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rows", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rows: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Rows)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Rows {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rows: ", p), err) }
  return err
}

func (p *TRowSet) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("columns", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:columns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Columns {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:columns: ", p), err) }
  return err
}

func (p *TRowSet) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_columnar", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:is_columnar: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsColumnar)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_columnar (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:is_columnar: ", p), err) }
  return err
}

func (p *TRowSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRowSet(%+v)", *p)
}

// Attributes:
//  - RowSet
//  - ExecutionTimeMs
//  - TotalTimeMs
//  - Nonce
//  - Debug
//  - Success
//  - QueryType
type TQueryResult_ struct {
  RowSet *TRowSet `thrift:"row_set,1" db:"row_set" json:"row_set"`
  ExecutionTimeMs int64 `thrift:"execution_time_ms,2" db:"execution_time_ms" json:"execution_time_ms"`
  TotalTimeMs int64 `thrift:"total_time_ms,3" db:"total_time_ms" json:"total_time_ms"`
  Nonce string `thrift:"nonce,4" db:"nonce" json:"nonce"`
  Debug string `thrift:"debug,5" db:"debug" json:"debug"`
  Success bool `thrift:"success,6" db:"success" json:"success"`
  QueryType TQueryType `thrift:"query_type,7" db:"query_type" json:"query_type"`
}

func NewTQueryResult_() *TQueryResult_ {
  return &TQueryResult_{
Success: true,

QueryType: 0,
}
}

var TQueryResult__RowSet_DEFAULT *TRowSet
func (p *TQueryResult_) GetRowSet() *TRowSet {
  if !p.IsSetRowSet() {
    return TQueryResult__RowSet_DEFAULT
  }
return p.RowSet
}

func (p *TQueryResult_) GetExecutionTimeMs() int64 {
  return p.ExecutionTimeMs
}

func (p *TQueryResult_) GetTotalTimeMs() int64 {
  return p.TotalTimeMs
}

func (p *TQueryResult_) GetNonce() string {
  return p.Nonce
}

func (p *TQueryResult_) GetDebug() string {
  return p.Debug
}

func (p *TQueryResult_) GetSuccess() bool {
  return p.Success
}

func (p *TQueryResult_) GetQueryType() TQueryType {
  return p.QueryType
}
func (p *TQueryResult_) IsSetRowSet() bool {
  return p.RowSet != nil
}

func (p *TQueryResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TQueryResult_)  ReadField1(iprot thrift.TProtocol) error {
  p.RowSet = &TRowSet{}
  if err := p.RowSet.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RowSet), err)
  }
  return nil
}

func (p *TQueryResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExecutionTimeMs = v
}
  return nil
}

func (p *TQueryResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TotalTimeMs = v
}
  return nil
}

func (p *TQueryResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *TQueryResult_)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Debug = v
}
  return nil
}

func (p *TQueryResult_)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Success = v
}
  return nil
}

func (p *TQueryResult_)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := TQueryType(v)
  p.QueryType = temp
}
  return nil
}

func (p *TQueryResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TQueryResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TQueryResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_set", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row_set: ", p), err) }
  if err := p.RowSet.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RowSet), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row_set: ", p), err) }
  return err
}

func (p *TQueryResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("execution_time_ms", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:execution_time_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExecutionTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.execution_time_ms (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:execution_time_ms: ", p), err) }
  return err
}

func (p *TQueryResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("total_time_ms", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total_time_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.TotalTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total_time_ms (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total_time_ms: ", p), err) }
  return err
}

func (p *TQueryResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nonce: ", p), err) }
  if err := oprot.WriteString(string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nonce: ", p), err) }
  return err
}

func (p *TQueryResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("debug", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:debug: ", p), err) }
  if err := oprot.WriteString(string(p.Debug)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.debug (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:debug: ", p), err) }
  return err
}

func (p *TQueryResult_) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("success", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:success: ", p), err) }
  if err := oprot.WriteBool(bool(p.Success)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.success (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:success: ", p), err) }
  return err
}

func (p *TQueryResult_) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query_type", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:query_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.QueryType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query_type (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:query_type: ", p), err) }
  return err
}

func (p *TQueryResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TQueryResult_(%+v)", *p)
}

// Attributes:
//  - SmHandle
//  - SmSize
//  - DfHandle
//  - DfSize
//  - ExecutionTimeMs
//  - ArrowConversionTimeMs
//  - DfBuffer
type TDataFrame struct {
  SmHandle []byte `thrift:"sm_handle,1" db:"sm_handle" json:"sm_handle"`
  SmSize int64 `thrift:"sm_size,2" db:"sm_size" json:"sm_size"`
  DfHandle []byte `thrift:"df_handle,3" db:"df_handle" json:"df_handle"`
  DfSize int64 `thrift:"df_size,4" db:"df_size" json:"df_size"`
  ExecutionTimeMs int64 `thrift:"execution_time_ms,5" db:"execution_time_ms" json:"execution_time_ms"`
  ArrowConversionTimeMs int64 `thrift:"arrow_conversion_time_ms,6" db:"arrow_conversion_time_ms" json:"arrow_conversion_time_ms"`
  DfBuffer []byte `thrift:"df_buffer,7" db:"df_buffer" json:"df_buffer"`
}

func NewTDataFrame() *TDataFrame {
  return &TDataFrame{}
}


func (p *TDataFrame) GetSmHandle() []byte {
  return p.SmHandle
}

func (p *TDataFrame) GetSmSize() int64 {
  return p.SmSize
}

func (p *TDataFrame) GetDfHandle() []byte {
  return p.DfHandle
}

func (p *TDataFrame) GetDfSize() int64 {
  return p.DfSize
}

func (p *TDataFrame) GetExecutionTimeMs() int64 {
  return p.ExecutionTimeMs
}

func (p *TDataFrame) GetArrowConversionTimeMs() int64 {
  return p.ArrowConversionTimeMs
}

func (p *TDataFrame) GetDfBuffer() []byte {
  return p.DfBuffer
}
func (p *TDataFrame) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataFrame)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SmHandle = v
}
  return nil
}

func (p *TDataFrame)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SmSize = v
}
  return nil
}

func (p *TDataFrame)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DfHandle = v
}
  return nil
}

func (p *TDataFrame)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DfSize = v
}
  return nil
}

func (p *TDataFrame)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ExecutionTimeMs = v
}
  return nil
}

func (p *TDataFrame)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ArrowConversionTimeMs = v
}
  return nil
}

func (p *TDataFrame)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.DfBuffer = v
}
  return nil
}

func (p *TDataFrame) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDataFrame"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataFrame) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sm_handle", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sm_handle: ", p), err) }
  if err := oprot.WriteBinary(p.SmHandle); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sm_handle (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sm_handle: ", p), err) }
  return err
}

func (p *TDataFrame) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sm_size", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sm_size: ", p), err) }
  if err := oprot.WriteI64(int64(p.SmSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sm_size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sm_size: ", p), err) }
  return err
}

func (p *TDataFrame) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("df_handle", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:df_handle: ", p), err) }
  if err := oprot.WriteBinary(p.DfHandle); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.df_handle (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:df_handle: ", p), err) }
  return err
}

func (p *TDataFrame) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("df_size", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:df_size: ", p), err) }
  if err := oprot.WriteI64(int64(p.DfSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.df_size (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:df_size: ", p), err) }
  return err
}

func (p *TDataFrame) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("execution_time_ms", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:execution_time_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExecutionTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.execution_time_ms (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:execution_time_ms: ", p), err) }
  return err
}

func (p *TDataFrame) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("arrow_conversion_time_ms", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:arrow_conversion_time_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.ArrowConversionTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.arrow_conversion_time_ms (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:arrow_conversion_time_ms: ", p), err) }
  return err
}

func (p *TDataFrame) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("df_buffer", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:df_buffer: ", p), err) }
  if err := oprot.WriteBinary(p.DfBuffer); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.df_buffer (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:df_buffer: ", p), err) }
  return err
}

func (p *TDataFrame) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataFrame(%+v)", *p)
}

// Attributes:
//  - DbName
//  - DbOwner
type TDBInfo struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  DbOwner string `thrift:"db_owner,2" db:"db_owner" json:"db_owner"`
}

func NewTDBInfo() *TDBInfo {
  return &TDBInfo{}
}


func (p *TDBInfo) GetDbName() string {
  return p.DbName
}

func (p *TDBInfo) GetDbOwner() string {
  return p.DbOwner
}
func (p *TDBInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDBInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *TDBInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DbOwner = v
}
  return nil
}

func (p *TDBInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDBInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDBInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *TDBInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_owner", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:db_owner: ", p), err) }
  if err := oprot.WriteString(string(p.DbOwner)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_owner (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:db_owner: ", p), err) }
  return err
}

func (p *TDBInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDBInfo(%+v)", *p)
}

// Attributes:
//  - ErrorMsg
type TOmniSciException struct {
  ErrorMsg string `thrift:"error_msg,1" db:"error_msg" json:"error_msg"`
}

func NewTOmniSciException() *TOmniSciException {
  return &TOmniSciException{}
}


func (p *TOmniSciException) GetErrorMsg() string {
  return p.ErrorMsg
}
func (p *TOmniSciException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TOmniSciException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ErrorMsg = v
}
  return nil
}

func (p *TOmniSciException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TOmniSciException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TOmniSciException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_msg", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_msg: ", p), err) }
  if err := oprot.WriteString(string(p.ErrorMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_msg (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_msg: ", p), err) }
  return err
}

func (p *TOmniSciException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TOmniSciException(%+v)", *p)
}

func (p *TOmniSciException) Error() string {
  return p.String()
}

// Attributes:
//  - Delimiter
//  - NullStr
//  - HasHeader
//  - Quoted
//  - Quote
//  - Escape
//  - LineDelim
//  - ArrayDelim
//  - ArrayBegin
//  - ArrayEnd
//  - Threads
//  - FileType
//  - S3AccessKey
//  - S3SecretKey
//  - S3Region
//  - GeoCoordsEncoding
//  - GeoCoordsCompParam
//  - GeoCoordsType
//  - GeoCoordsSrid
//  - SanitizeColumnNames
//  - GeoLayerName
//  - S3Endpoint
//  - GeoAssignRenderGroups
//  - GeoExplodeCollections
//  - SourceSrid
type TCopyParams struct {
  Delimiter string `thrift:"delimiter,1" db:"delimiter" json:"delimiter"`
  NullStr string `thrift:"null_str,2" db:"null_str" json:"null_str"`
  HasHeader TImportHeaderRow `thrift:"has_header,3" db:"has_header" json:"has_header"`
  Quoted bool `thrift:"quoted,4" db:"quoted" json:"quoted"`
  Quote string `thrift:"quote,5" db:"quote" json:"quote"`
  Escape string `thrift:"escape,6" db:"escape" json:"escape"`
  LineDelim string `thrift:"line_delim,7" db:"line_delim" json:"line_delim"`
  ArrayDelim string `thrift:"array_delim,8" db:"array_delim" json:"array_delim"`
  ArrayBegin string `thrift:"array_begin,9" db:"array_begin" json:"array_begin"`
  ArrayEnd string `thrift:"array_end,10" db:"array_end" json:"array_end"`
  Threads int32 `thrift:"threads,11" db:"threads" json:"threads"`
  FileType TFileType `thrift:"file_type,12" db:"file_type" json:"file_type"`
  S3AccessKey string `thrift:"s3_access_key,13" db:"s3_access_key" json:"s3_access_key"`
  S3SecretKey string `thrift:"s3_secret_key,14" db:"s3_secret_key" json:"s3_secret_key"`
  S3Region string `thrift:"s3_region,15" db:"s3_region" json:"s3_region"`
  GeoCoordsEncoding common.TEncodingType `thrift:"geo_coords_encoding,16" db:"geo_coords_encoding" json:"geo_coords_encoding"`
  GeoCoordsCompParam int32 `thrift:"geo_coords_comp_param,17" db:"geo_coords_comp_param" json:"geo_coords_comp_param"`
  GeoCoordsType common.TDatumType `thrift:"geo_coords_type,18" db:"geo_coords_type" json:"geo_coords_type"`
  GeoCoordsSrid int32 `thrift:"geo_coords_srid,19" db:"geo_coords_srid" json:"geo_coords_srid"`
  SanitizeColumnNames bool `thrift:"sanitize_column_names,20" db:"sanitize_column_names" json:"sanitize_column_names"`
  GeoLayerName string `thrift:"geo_layer_name,21" db:"geo_layer_name" json:"geo_layer_name"`
  S3Endpoint string `thrift:"s3_endpoint,22" db:"s3_endpoint" json:"s3_endpoint"`
  GeoAssignRenderGroups bool `thrift:"geo_assign_render_groups,23" db:"geo_assign_render_groups" json:"geo_assign_render_groups"`
  GeoExplodeCollections bool `thrift:"geo_explode_collections,24" db:"geo_explode_collections" json:"geo_explode_collections"`
  SourceSrid int32 `thrift:"source_srid,25" db:"source_srid" json:"source_srid"`
}

func NewTCopyParams() *TCopyParams {
  return &TCopyParams{
HasHeader: 0,

FileType: 0,

GeoCoordsEncoding: 6,

GeoCoordsCompParam: 32,

GeoCoordsType: 18,

GeoCoordsSrid: 4326,

SanitizeColumnNames: true,

GeoAssignRenderGroups: true,
}
}


func (p *TCopyParams) GetDelimiter() string {
  return p.Delimiter
}

func (p *TCopyParams) GetNullStr() string {
  return p.NullStr
}

func (p *TCopyParams) GetHasHeader() TImportHeaderRow {
  return p.HasHeader
}

func (p *TCopyParams) GetQuoted() bool {
  return p.Quoted
}

func (p *TCopyParams) GetQuote() string {
  return p.Quote
}

func (p *TCopyParams) GetEscape() string {
  return p.Escape
}

func (p *TCopyParams) GetLineDelim() string {
  return p.LineDelim
}

func (p *TCopyParams) GetArrayDelim() string {
  return p.ArrayDelim
}

func (p *TCopyParams) GetArrayBegin() string {
  return p.ArrayBegin
}

func (p *TCopyParams) GetArrayEnd() string {
  return p.ArrayEnd
}

func (p *TCopyParams) GetThreads() int32 {
  return p.Threads
}

func (p *TCopyParams) GetFileType() TFileType {
  return p.FileType
}

func (p *TCopyParams) GetS3AccessKey() string {
  return p.S3AccessKey
}

func (p *TCopyParams) GetS3SecretKey() string {
  return p.S3SecretKey
}

func (p *TCopyParams) GetS3Region() string {
  return p.S3Region
}

func (p *TCopyParams) GetGeoCoordsEncoding() common.TEncodingType {
  return p.GeoCoordsEncoding
}

func (p *TCopyParams) GetGeoCoordsCompParam() int32 {
  return p.GeoCoordsCompParam
}

func (p *TCopyParams) GetGeoCoordsType() common.TDatumType {
  return p.GeoCoordsType
}

func (p *TCopyParams) GetGeoCoordsSrid() int32 {
  return p.GeoCoordsSrid
}

func (p *TCopyParams) GetSanitizeColumnNames() bool {
  return p.SanitizeColumnNames
}

func (p *TCopyParams) GetGeoLayerName() string {
  return p.GeoLayerName
}

func (p *TCopyParams) GetS3Endpoint() string {
  return p.S3Endpoint
}

func (p *TCopyParams) GetGeoAssignRenderGroups() bool {
  return p.GeoAssignRenderGroups
}

func (p *TCopyParams) GetGeoExplodeCollections() bool {
  return p.GeoExplodeCollections
}

func (p *TCopyParams) GetSourceSrid() int32 {
  return p.SourceSrid
}
func (p *TCopyParams) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField25(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCopyParams)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Delimiter = v
}
  return nil
}

func (p *TCopyParams)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NullStr = v
}
  return nil
}

func (p *TCopyParams)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TImportHeaderRow(v)
  p.HasHeader = temp
}
  return nil
}

func (p *TCopyParams)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Quoted = v
}
  return nil
}

func (p *TCopyParams)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Quote = v
}
  return nil
}

func (p *TCopyParams)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Escape = v
}
  return nil
}

func (p *TCopyParams)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.LineDelim = v
}
  return nil
}

func (p *TCopyParams)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ArrayDelim = v
}
  return nil
}

func (p *TCopyParams)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ArrayBegin = v
}
  return nil
}

func (p *TCopyParams)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ArrayEnd = v
}
  return nil
}

func (p *TCopyParams)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Threads = v
}
  return nil
}

func (p *TCopyParams)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  temp := TFileType(v)
  p.FileType = temp
}
  return nil
}

func (p *TCopyParams)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.S3AccessKey = v
}
  return nil
}

func (p *TCopyParams)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.S3SecretKey = v
}
  return nil
}

func (p *TCopyParams)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.S3Region = v
}
  return nil
}

func (p *TCopyParams)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  temp := common.TEncodingType(v)
  p.GeoCoordsEncoding = temp
}
  return nil
}

func (p *TCopyParams)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.GeoCoordsCompParam = v
}
  return nil
}

func (p *TCopyParams)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  temp := common.TDatumType(v)
  p.GeoCoordsType = temp
}
  return nil
}

func (p *TCopyParams)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.GeoCoordsSrid = v
}
  return nil
}

func (p *TCopyParams)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.SanitizeColumnNames = v
}
  return nil
}

func (p *TCopyParams)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.GeoLayerName = v
}
  return nil
}

func (p *TCopyParams)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.S3Endpoint = v
}
  return nil
}

func (p *TCopyParams)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.GeoAssignRenderGroups = v
}
  return nil
}

func (p *TCopyParams)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.GeoExplodeCollections = v
}
  return nil
}

func (p *TCopyParams)  ReadField25(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.SourceSrid = v
}
  return nil
}

func (p *TCopyParams) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TCopyParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCopyParams) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("delimiter", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:delimiter: ", p), err) }
  if err := oprot.WriteString(string(p.Delimiter)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.delimiter (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:delimiter: ", p), err) }
  return err
}

func (p *TCopyParams) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("null_str", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:null_str: ", p), err) }
  if err := oprot.WriteString(string(p.NullStr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.null_str (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:null_str: ", p), err) }
  return err
}

func (p *TCopyParams) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("has_header", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:has_header: ", p), err) }
  if err := oprot.WriteI32(int32(p.HasHeader)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.has_header (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:has_header: ", p), err) }
  return err
}

func (p *TCopyParams) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("quoted", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:quoted: ", p), err) }
  if err := oprot.WriteBool(bool(p.Quoted)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.quoted (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:quoted: ", p), err) }
  return err
}

func (p *TCopyParams) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("quote", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:quote: ", p), err) }
  if err := oprot.WriteString(string(p.Quote)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.quote (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:quote: ", p), err) }
  return err
}

func (p *TCopyParams) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("escape", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:escape: ", p), err) }
  if err := oprot.WriteString(string(p.Escape)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.escape (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:escape: ", p), err) }
  return err
}

func (p *TCopyParams) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("line_delim", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:line_delim: ", p), err) }
  if err := oprot.WriteString(string(p.LineDelim)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.line_delim (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:line_delim: ", p), err) }
  return err
}

func (p *TCopyParams) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("array_delim", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:array_delim: ", p), err) }
  if err := oprot.WriteString(string(p.ArrayDelim)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.array_delim (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:array_delim: ", p), err) }
  return err
}

func (p *TCopyParams) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("array_begin", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:array_begin: ", p), err) }
  if err := oprot.WriteString(string(p.ArrayBegin)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.array_begin (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:array_begin: ", p), err) }
  return err
}

func (p *TCopyParams) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("array_end", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:array_end: ", p), err) }
  if err := oprot.WriteString(string(p.ArrayEnd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.array_end (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:array_end: ", p), err) }
  return err
}

func (p *TCopyParams) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("threads", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:threads: ", p), err) }
  if err := oprot.WriteI32(int32(p.Threads)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.threads (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:threads: ", p), err) }
  return err
}

func (p *TCopyParams) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("file_type", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:file_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.FileType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.file_type (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:file_type: ", p), err) }
  return err
}

func (p *TCopyParams) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s3_access_key", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:s3_access_key: ", p), err) }
  if err := oprot.WriteString(string(p.S3AccessKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.s3_access_key (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:s3_access_key: ", p), err) }
  return err
}

func (p *TCopyParams) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s3_secret_key", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:s3_secret_key: ", p), err) }
  if err := oprot.WriteString(string(p.S3SecretKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.s3_secret_key (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:s3_secret_key: ", p), err) }
  return err
}

func (p *TCopyParams) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s3_region", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:s3_region: ", p), err) }
  if err := oprot.WriteString(string(p.S3Region)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.s3_region (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:s3_region: ", p), err) }
  return err
}

func (p *TCopyParams) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("geo_coords_encoding", thrift.I32, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:geo_coords_encoding: ", p), err) }
  if err := oprot.WriteI32(int32(p.GeoCoordsEncoding)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.geo_coords_encoding (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:geo_coords_encoding: ", p), err) }
  return err
}

func (p *TCopyParams) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("geo_coords_comp_param", thrift.I32, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:geo_coords_comp_param: ", p), err) }
  if err := oprot.WriteI32(int32(p.GeoCoordsCompParam)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.geo_coords_comp_param (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:geo_coords_comp_param: ", p), err) }
  return err
}

func (p *TCopyParams) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("geo_coords_type", thrift.I32, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:geo_coords_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.GeoCoordsType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.geo_coords_type (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:geo_coords_type: ", p), err) }
  return err
}

func (p *TCopyParams) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("geo_coords_srid", thrift.I32, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:geo_coords_srid: ", p), err) }
  if err := oprot.WriteI32(int32(p.GeoCoordsSrid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.geo_coords_srid (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:geo_coords_srid: ", p), err) }
  return err
}

func (p *TCopyParams) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sanitize_column_names", thrift.BOOL, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:sanitize_column_names: ", p), err) }
  if err := oprot.WriteBool(bool(p.SanitizeColumnNames)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sanitize_column_names (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:sanitize_column_names: ", p), err) }
  return err
}

func (p *TCopyParams) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("geo_layer_name", thrift.STRING, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:geo_layer_name: ", p), err) }
  if err := oprot.WriteString(string(p.GeoLayerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.geo_layer_name (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:geo_layer_name: ", p), err) }
  return err
}

func (p *TCopyParams) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s3_endpoint", thrift.STRING, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:s3_endpoint: ", p), err) }
  if err := oprot.WriteString(string(p.S3Endpoint)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.s3_endpoint (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:s3_endpoint: ", p), err) }
  return err
}

func (p *TCopyParams) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("geo_assign_render_groups", thrift.BOOL, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:geo_assign_render_groups: ", p), err) }
  if err := oprot.WriteBool(bool(p.GeoAssignRenderGroups)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.geo_assign_render_groups (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:geo_assign_render_groups: ", p), err) }
  return err
}

func (p *TCopyParams) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("geo_explode_collections", thrift.BOOL, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:geo_explode_collections: ", p), err) }
  if err := oprot.WriteBool(bool(p.GeoExplodeCollections)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.geo_explode_collections (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:geo_explode_collections: ", p), err) }
  return err
}

func (p *TCopyParams) writeField25(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("source_srid", thrift.I32, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:source_srid: ", p), err) }
  if err := oprot.WriteI32(int32(p.SourceSrid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.source_srid (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:source_srid: ", p), err) }
  return err
}

func (p *TCopyParams) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCopyParams(%+v)", *p)
}

// Attributes:
//  - IsReplicated
type TCreateParams struct {
  IsReplicated bool `thrift:"is_replicated,1" db:"is_replicated" json:"is_replicated"`
}

func NewTCreateParams() *TCreateParams {
  return &TCreateParams{}
}


func (p *TCreateParams) GetIsReplicated() bool {
  return p.IsReplicated
}
func (p *TCreateParams) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCreateParams)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IsReplicated = v
}
  return nil
}

func (p *TCreateParams) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TCreateParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCreateParams) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_replicated", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:is_replicated: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsReplicated)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_replicated (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:is_replicated: ", p), err) }
  return err
}

func (p *TCreateParams) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCreateParams(%+v)", *p)
}

// Attributes:
//  - RowSet
//  - CopyParams
type TDetectResult_ struct {
  RowSet *TRowSet `thrift:"row_set,1" db:"row_set" json:"row_set"`
  CopyParams *TCopyParams `thrift:"copy_params,2" db:"copy_params" json:"copy_params"`
}

func NewTDetectResult_() *TDetectResult_ {
  return &TDetectResult_{}
}

var TDetectResult__RowSet_DEFAULT *TRowSet
func (p *TDetectResult_) GetRowSet() *TRowSet {
  if !p.IsSetRowSet() {
    return TDetectResult__RowSet_DEFAULT
  }
return p.RowSet
}
var TDetectResult__CopyParams_DEFAULT *TCopyParams
func (p *TDetectResult_) GetCopyParams() *TCopyParams {
  if !p.IsSetCopyParams() {
    return TDetectResult__CopyParams_DEFAULT
  }
return p.CopyParams
}
func (p *TDetectResult_) IsSetRowSet() bool {
  return p.RowSet != nil
}

func (p *TDetectResult_) IsSetCopyParams() bool {
  return p.CopyParams != nil
}

func (p *TDetectResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDetectResult_)  ReadField1(iprot thrift.TProtocol) error {
  p.RowSet = &TRowSet{}
  if err := p.RowSet.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RowSet), err)
  }
  return nil
}

func (p *TDetectResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.CopyParams = &TCopyParams{
  HasHeader:   0,

  FileType:   0,

  GeoCoordsEncoding:   6,

  GeoCoordsCompParam: 32,

  GeoCoordsType:   18,

  GeoCoordsSrid: 4326,

  SanitizeColumnNames: true,

  GeoAssignRenderGroups: true,
}
  if err := p.CopyParams.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CopyParams), err)
  }
  return nil
}

func (p *TDetectResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDetectResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDetectResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_set", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row_set: ", p), err) }
  if err := p.RowSet.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RowSet), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row_set: ", p), err) }
  return err
}

func (p *TDetectResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("copy_params", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:copy_params: ", p), err) }
  if err := p.CopyParams.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CopyParams), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:copy_params: ", p), err) }
  return err
}

func (p *TDetectResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDetectResult_(%+v)", *p)
}

// Attributes:
//  - Elapsed
//  - RowsCompleted
//  - RowsEstimated
//  - RowsRejected
type TImportStatus struct {
  Elapsed int64 `thrift:"elapsed,1" db:"elapsed" json:"elapsed"`
  RowsCompleted int64 `thrift:"rows_completed,2" db:"rows_completed" json:"rows_completed"`
  RowsEstimated int64 `thrift:"rows_estimated,3" db:"rows_estimated" json:"rows_estimated"`
  RowsRejected int64 `thrift:"rows_rejected,4" db:"rows_rejected" json:"rows_rejected"`
}

func NewTImportStatus() *TImportStatus {
  return &TImportStatus{}
}


func (p *TImportStatus) GetElapsed() int64 {
  return p.Elapsed
}

func (p *TImportStatus) GetRowsCompleted() int64 {
  return p.RowsCompleted
}

func (p *TImportStatus) GetRowsEstimated() int64 {
  return p.RowsEstimated
}

func (p *TImportStatus) GetRowsRejected() int64 {
  return p.RowsRejected
}
func (p *TImportStatus) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TImportStatus)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Elapsed = v
}
  return nil
}

func (p *TImportStatus)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RowsCompleted = v
}
  return nil
}

func (p *TImportStatus)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RowsEstimated = v
}
  return nil
}

func (p *TImportStatus)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RowsRejected = v
}
  return nil
}

func (p *TImportStatus) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TImportStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TImportStatus) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("elapsed", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:elapsed: ", p), err) }
  if err := oprot.WriteI64(int64(p.Elapsed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.elapsed (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:elapsed: ", p), err) }
  return err
}

func (p *TImportStatus) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rows_completed", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rows_completed: ", p), err) }
  if err := oprot.WriteI64(int64(p.RowsCompleted)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rows_completed (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rows_completed: ", p), err) }
  return err
}

func (p *TImportStatus) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rows_estimated", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rows_estimated: ", p), err) }
  if err := oprot.WriteI64(int64(p.RowsEstimated)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rows_estimated (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rows_estimated: ", p), err) }
  return err
}

func (p *TImportStatus) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rows_rejected", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:rows_rejected: ", p), err) }
  if err := oprot.WriteI64(int64(p.RowsRejected)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rows_rejected (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:rows_rejected: ", p), err) }
  return err
}

func (p *TImportStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TImportStatus(%+v)", *p)
}

// Attributes:
//  - ViewName
//  - ViewState
//  - ImageHash
//  - UpdateTime
//  - ViewMetadata
type TFrontendView struct {
  ViewName string `thrift:"view_name,1" db:"view_name" json:"view_name"`
  ViewState string `thrift:"view_state,2" db:"view_state" json:"view_state"`
  ImageHash string `thrift:"image_hash,3" db:"image_hash" json:"image_hash"`
  UpdateTime string `thrift:"update_time,4" db:"update_time" json:"update_time"`
  ViewMetadata string `thrift:"view_metadata,5" db:"view_metadata" json:"view_metadata"`
}

func NewTFrontendView() *TFrontendView {
  return &TFrontendView{}
}


func (p *TFrontendView) GetViewName() string {
  return p.ViewName
}

func (p *TFrontendView) GetViewState() string {
  return p.ViewState
}

func (p *TFrontendView) GetImageHash() string {
  return p.ImageHash
}

func (p *TFrontendView) GetUpdateTime() string {
  return p.UpdateTime
}

func (p *TFrontendView) GetViewMetadata() string {
  return p.ViewMetadata
}
func (p *TFrontendView) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TFrontendView)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ViewName = v
}
  return nil
}

func (p *TFrontendView)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ViewState = v
}
  return nil
}

func (p *TFrontendView)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ImageHash = v
}
  return nil
}

func (p *TFrontendView)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UpdateTime = v
}
  return nil
}

func (p *TFrontendView)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ViewMetadata = v
}
  return nil
}

func (p *TFrontendView) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TFrontendView"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TFrontendView) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("view_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:view_name: ", p), err) }
  if err := oprot.WriteString(string(p.ViewName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.view_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:view_name: ", p), err) }
  return err
}

func (p *TFrontendView) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("view_state", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:view_state: ", p), err) }
  if err := oprot.WriteString(string(p.ViewState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.view_state (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:view_state: ", p), err) }
  return err
}

func (p *TFrontendView) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_hash", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:image_hash: ", p), err) }
  if err := oprot.WriteString(string(p.ImageHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.image_hash (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:image_hash: ", p), err) }
  return err
}

func (p *TFrontendView) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("update_time", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:update_time: ", p), err) }
  if err := oprot.WriteString(string(p.UpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.update_time (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:update_time: ", p), err) }
  return err
}

func (p *TFrontendView) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("view_metadata", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:view_metadata: ", p), err) }
  if err := oprot.WriteString(string(p.ViewMetadata)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.view_metadata (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:view_metadata: ", p), err) }
  return err
}

func (p *TFrontendView) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TFrontendView(%+v)", *p)
}

// Attributes:
//  - ReadOnly
//  - Version
//  - RenderingEnabled
//  - StartTime
//  - Edition
//  - HostName
//  - PolyRenderingEnabled
//  - Role
type TServerStatus struct {
  ReadOnly bool `thrift:"read_only,1" db:"read_only" json:"read_only"`
  Version string `thrift:"version,2" db:"version" json:"version"`
  RenderingEnabled bool `thrift:"rendering_enabled,3" db:"rendering_enabled" json:"rendering_enabled"`
  StartTime int64 `thrift:"start_time,4" db:"start_time" json:"start_time"`
  Edition string `thrift:"edition,5" db:"edition" json:"edition"`
  HostName string `thrift:"host_name,6" db:"host_name" json:"host_name"`
  PolyRenderingEnabled bool `thrift:"poly_rendering_enabled,7" db:"poly_rendering_enabled" json:"poly_rendering_enabled"`
  Role TRole `thrift:"role,8" db:"role" json:"role"`
}

func NewTServerStatus() *TServerStatus {
  return &TServerStatus{}
}


func (p *TServerStatus) GetReadOnly() bool {
  return p.ReadOnly
}

func (p *TServerStatus) GetVersion() string {
  return p.Version
}

func (p *TServerStatus) GetRenderingEnabled() bool {
  return p.RenderingEnabled
}

func (p *TServerStatus) GetStartTime() int64 {
  return p.StartTime
}

func (p *TServerStatus) GetEdition() string {
  return p.Edition
}

func (p *TServerStatus) GetHostName() string {
  return p.HostName
}

func (p *TServerStatus) GetPolyRenderingEnabled() bool {
  return p.PolyRenderingEnabled
}

func (p *TServerStatus) GetRole() TRole {
  return p.Role
}
func (p *TServerStatus) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TServerStatus)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReadOnly = v
}
  return nil
}

func (p *TServerStatus)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *TServerStatus)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RenderingEnabled = v
}
  return nil
}

func (p *TServerStatus)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TServerStatus)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Edition = v
}
  return nil
}

func (p *TServerStatus)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.HostName = v
}
  return nil
}

func (p *TServerStatus)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.PolyRenderingEnabled = v
}
  return nil
}

func (p *TServerStatus)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := TRole(v)
  p.Role = temp
}
  return nil
}

func (p *TServerStatus) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TServerStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TServerStatus) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("read_only", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:read_only: ", p), err) }
  if err := oprot.WriteBool(bool(p.ReadOnly)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.read_only (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:read_only: ", p), err) }
  return err
}

func (p *TServerStatus) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:version: ", p), err) }
  if err := oprot.WriteString(string(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:version: ", p), err) }
  return err
}

func (p *TServerStatus) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rendering_enabled", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rendering_enabled: ", p), err) }
  if err := oprot.WriteBool(bool(p.RenderingEnabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rendering_enabled (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rendering_enabled: ", p), err) }
  return err
}

func (p *TServerStatus) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("start_time", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:start_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:start_time: ", p), err) }
  return err
}

func (p *TServerStatus) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("edition", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:edition: ", p), err) }
  if err := oprot.WriteString(string(p.Edition)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edition (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:edition: ", p), err) }
  return err
}

func (p *TServerStatus) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("host_name", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:host_name: ", p), err) }
  if err := oprot.WriteString(string(p.HostName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.host_name (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:host_name: ", p), err) }
  return err
}

func (p *TServerStatus) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("poly_rendering_enabled", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:poly_rendering_enabled: ", p), err) }
  if err := oprot.WriteBool(bool(p.PolyRenderingEnabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.poly_rendering_enabled (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:poly_rendering_enabled: ", p), err) }
  return err
}

func (p *TServerStatus) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("role", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:role: ", p), err) }
  if err := oprot.WriteI32(int32(p.Role)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:role: ", p), err) }
  return err
}

func (p *TServerStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TServerStatus(%+v)", *p)
}

// Attributes:
//  - X
//  - Y
type TPixel struct {
  X int64 `thrift:"x,1" db:"x" json:"x"`
  Y int64 `thrift:"y,2" db:"y" json:"y"`
}

func NewTPixel() *TPixel {
  return &TPixel{}
}


func (p *TPixel) GetX() int64 {
  return p.X
}

func (p *TPixel) GetY() int64 {
  return p.Y
}
func (p *TPixel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPixel)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.X = v
}
  return nil
}

func (p *TPixel)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Y = v
}
  return nil
}

func (p *TPixel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPixel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPixel) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("x", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:x: ", p), err) }
  if err := oprot.WriteI64(int64(p.X)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.x (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:x: ", p), err) }
  return err
}

func (p *TPixel) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("y", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:y: ", p), err) }
  if err := oprot.WriteI64(int64(p.Y)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.y (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:y: ", p), err) }
  return err
}

func (p *TPixel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPixel(%+v)", *p)
}

// Attributes:
//  - Pixel
//  - VegaTableName
//  - TableID
//  - RowID
//  - RowSet
//  - Nonce
type TPixelTableRowResult_ struct {
  Pixel *TPixel `thrift:"pixel,1" db:"pixel" json:"pixel"`
  VegaTableName string `thrift:"vega_table_name,2" db:"vega_table_name" json:"vega_table_name"`
  TableID []int64 `thrift:"table_id,3" db:"table_id" json:"table_id"`
  RowID []int64 `thrift:"row_id,4" db:"row_id" json:"row_id"`
  RowSet *TRowSet `thrift:"row_set,5" db:"row_set" json:"row_set"`
  Nonce string `thrift:"nonce,6" db:"nonce" json:"nonce"`
}

func NewTPixelTableRowResult_() *TPixelTableRowResult_ {
  return &TPixelTableRowResult_{}
}

var TPixelTableRowResult__Pixel_DEFAULT *TPixel
func (p *TPixelTableRowResult_) GetPixel() *TPixel {
  if !p.IsSetPixel() {
    return TPixelTableRowResult__Pixel_DEFAULT
  }
return p.Pixel
}

func (p *TPixelTableRowResult_) GetVegaTableName() string {
  return p.VegaTableName
}

func (p *TPixelTableRowResult_) GetTableID() []int64 {
  return p.TableID
}

func (p *TPixelTableRowResult_) GetRowID() []int64 {
  return p.RowID
}
var TPixelTableRowResult__RowSet_DEFAULT *TRowSet
func (p *TPixelTableRowResult_) GetRowSet() *TRowSet {
  if !p.IsSetRowSet() {
    return TPixelTableRowResult__RowSet_DEFAULT
  }
return p.RowSet
}

func (p *TPixelTableRowResult_) GetNonce() string {
  return p.Nonce
}
func (p *TPixelTableRowResult_) IsSetPixel() bool {
  return p.Pixel != nil
}

func (p *TPixelTableRowResult_) IsSetRowSet() bool {
  return p.RowSet != nil
}

func (p *TPixelTableRowResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPixelTableRowResult_)  ReadField1(iprot thrift.TProtocol) error {
  p.Pixel = &TPixel{}
  if err := p.Pixel.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pixel), err)
  }
  return nil
}

func (p *TPixelTableRowResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.VegaTableName = v
}
  return nil
}

func (p *TPixelTableRowResult_)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.TableID =  tSlice
  for i := 0; i < size; i ++ {
var _elem12 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem12 = v
}
    p.TableID = append(p.TableID, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TPixelTableRowResult_)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.RowID =  tSlice
  for i := 0; i < size; i ++ {
var _elem13 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem13 = v
}
    p.RowID = append(p.RowID, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TPixelTableRowResult_)  ReadField5(iprot thrift.TProtocol) error {
  p.RowSet = &TRowSet{}
  if err := p.RowSet.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RowSet), err)
  }
  return nil
}

func (p *TPixelTableRowResult_)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *TPixelTableRowResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPixelTableRowResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPixelTableRowResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pixel", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pixel: ", p), err) }
  if err := p.Pixel.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pixel), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pixel: ", p), err) }
  return err
}

func (p *TPixelTableRowResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vega_table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vega_table_name: ", p), err) }
  if err := oprot.WriteString(string(p.VegaTableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vega_table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vega_table_name: ", p), err) }
  return err
}

func (p *TPixelTableRowResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_id", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:table_id: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.TableID)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TableID {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:table_id: ", p), err) }
  return err
}

func (p *TPixelTableRowResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_id", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:row_id: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.RowID)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RowID {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:row_id: ", p), err) }
  return err
}

func (p *TPixelTableRowResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_set", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:row_set: ", p), err) }
  if err := p.RowSet.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RowSet), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:row_set: ", p), err) }
  return err
}

func (p *TPixelTableRowResult_) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nonce: ", p), err) }
  if err := oprot.WriteString(string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nonce: ", p), err) }
  return err
}

func (p *TPixelTableRowResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPixelTableRowResult_(%+v)", *p)
}

// Attributes:
//  - Image
//  - Nonce
//  - ExecutionTimeMs
//  - RenderTimeMs
//  - TotalTimeMs
//  - VegaMetadata
type TRenderResult_ struct {
  Image []byte `thrift:"image,1" db:"image" json:"image"`
  Nonce string `thrift:"nonce,2" db:"nonce" json:"nonce"`
  ExecutionTimeMs int64 `thrift:"execution_time_ms,3" db:"execution_time_ms" json:"execution_time_ms"`
  RenderTimeMs int64 `thrift:"render_time_ms,4" db:"render_time_ms" json:"render_time_ms"`
  TotalTimeMs int64 `thrift:"total_time_ms,5" db:"total_time_ms" json:"total_time_ms"`
  VegaMetadata string `thrift:"vega_metadata,6" db:"vega_metadata" json:"vega_metadata"`
}

func NewTRenderResult_() *TRenderResult_ {
  return &TRenderResult_{}
}


func (p *TRenderResult_) GetImage() []byte {
  return p.Image
}

func (p *TRenderResult_) GetNonce() string {
  return p.Nonce
}

func (p *TRenderResult_) GetExecutionTimeMs() int64 {
  return p.ExecutionTimeMs
}

func (p *TRenderResult_) GetRenderTimeMs() int64 {
  return p.RenderTimeMs
}

func (p *TRenderResult_) GetTotalTimeMs() int64 {
  return p.TotalTimeMs
}

func (p *TRenderResult_) GetVegaMetadata() string {
  return p.VegaMetadata
}
func (p *TRenderResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TRenderResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Image = v
}
  return nil
}

func (p *TRenderResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *TRenderResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ExecutionTimeMs = v
}
  return nil
}

func (p *TRenderResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RenderTimeMs = v
}
  return nil
}

func (p *TRenderResult_)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TotalTimeMs = v
}
  return nil
}

func (p *TRenderResult_)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.VegaMetadata = v
}
  return nil
}

func (p *TRenderResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRenderResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRenderResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:image: ", p), err) }
  if err := oprot.WriteBinary(p.Image); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.image (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:image: ", p), err) }
  return err
}

func (p *TRenderResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nonce: ", p), err) }
  if err := oprot.WriteString(string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nonce: ", p), err) }
  return err
}

func (p *TRenderResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("execution_time_ms", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:execution_time_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExecutionTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.execution_time_ms (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:execution_time_ms: ", p), err) }
  return err
}

func (p *TRenderResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("render_time_ms", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:render_time_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.RenderTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.render_time_ms (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:render_time_ms: ", p), err) }
  return err
}

func (p *TRenderResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("total_time_ms", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:total_time_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.TotalTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total_time_ms (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:total_time_ms: ", p), err) }
  return err
}

func (p *TRenderResult_) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vega_metadata", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:vega_metadata: ", p), err) }
  if err := oprot.WriteString(string(p.VegaMetadata)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vega_metadata (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:vega_metadata: ", p), err) }
  return err
}

func (p *TRenderResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRenderResult_(%+v)", *p)
}

// Attributes:
//  - NumSm
//  - ClockFrequencyKHz
//  - Memory
//  - ComputeCapabilityMajor
//  - ComputeCapabilityMinor
type TGpuSpecification struct {
  NumSm int32 `thrift:"num_sm,1" db:"num_sm" json:"num_sm"`
  ClockFrequencyKHz int64 `thrift:"clock_frequency_kHz,2" db:"clock_frequency_kHz" json:"clock_frequency_kHz"`
  Memory int64 `thrift:"memory,3" db:"memory" json:"memory"`
  ComputeCapabilityMajor int16 `thrift:"compute_capability_major,4" db:"compute_capability_major" json:"compute_capability_major"`
  ComputeCapabilityMinor int16 `thrift:"compute_capability_minor,5" db:"compute_capability_minor" json:"compute_capability_minor"`
}

func NewTGpuSpecification() *TGpuSpecification {
  return &TGpuSpecification{}
}


func (p *TGpuSpecification) GetNumSm() int32 {
  return p.NumSm
}

func (p *TGpuSpecification) GetClockFrequencyKHz() int64 {
  return p.ClockFrequencyKHz
}

func (p *TGpuSpecification) GetMemory() int64 {
  return p.Memory
}

func (p *TGpuSpecification) GetComputeCapabilityMajor() int16 {
  return p.ComputeCapabilityMajor
}

func (p *TGpuSpecification) GetComputeCapabilityMinor() int16 {
  return p.ComputeCapabilityMinor
}
func (p *TGpuSpecification) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGpuSpecification)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NumSm = v
}
  return nil
}

func (p *TGpuSpecification)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ClockFrequencyKHz = v
}
  return nil
}

func (p *TGpuSpecification)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Memory = v
}
  return nil
}

func (p *TGpuSpecification)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ComputeCapabilityMajor = v
}
  return nil
}

func (p *TGpuSpecification)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ComputeCapabilityMinor = v
}
  return nil
}

func (p *TGpuSpecification) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TGpuSpecification"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGpuSpecification) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num_sm", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num_sm: ", p), err) }
  if err := oprot.WriteI32(int32(p.NumSm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_sm (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num_sm: ", p), err) }
  return err
}

func (p *TGpuSpecification) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("clock_frequency_kHz", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clock_frequency_kHz: ", p), err) }
  if err := oprot.WriteI64(int64(p.ClockFrequencyKHz)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clock_frequency_kHz (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clock_frequency_kHz: ", p), err) }
  return err
}

func (p *TGpuSpecification) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memory", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:memory: ", p), err) }
  if err := oprot.WriteI64(int64(p.Memory)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memory (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:memory: ", p), err) }
  return err
}

func (p *TGpuSpecification) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("compute_capability_major", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:compute_capability_major: ", p), err) }
  if err := oprot.WriteI16(int16(p.ComputeCapabilityMajor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.compute_capability_major (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:compute_capability_major: ", p), err) }
  return err
}

func (p *TGpuSpecification) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("compute_capability_minor", thrift.I16, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:compute_capability_minor: ", p), err) }
  if err := oprot.WriteI16(int16(p.ComputeCapabilityMinor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.compute_capability_minor (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:compute_capability_minor: ", p), err) }
  return err
}

func (p *TGpuSpecification) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGpuSpecification(%+v)", *p)
}

// Attributes:
//  - NumGpuHw
//  - NumCPUHw
//  - NumGpuAllocated
//  - StartGpu
//  - HostName
//  - GpuInfo
type THardwareInfo struct {
  NumGpuHw int16 `thrift:"num_gpu_hw,1" db:"num_gpu_hw" json:"num_gpu_hw"`
  NumCPUHw int16 `thrift:"num_cpu_hw,2" db:"num_cpu_hw" json:"num_cpu_hw"`
  NumGpuAllocated int16 `thrift:"num_gpu_allocated,3" db:"num_gpu_allocated" json:"num_gpu_allocated"`
  StartGpu int16 `thrift:"start_gpu,4" db:"start_gpu" json:"start_gpu"`
  HostName string `thrift:"host_name,5" db:"host_name" json:"host_name"`
  GpuInfo []*TGpuSpecification `thrift:"gpu_info,6" db:"gpu_info" json:"gpu_info"`
}

func NewTHardwareInfo() *THardwareInfo {
  return &THardwareInfo{}
}


func (p *THardwareInfo) GetNumGpuHw() int16 {
  return p.NumGpuHw
}

func (p *THardwareInfo) GetNumCPUHw() int16 {
  return p.NumCPUHw
}

func (p *THardwareInfo) GetNumGpuAllocated() int16 {
  return p.NumGpuAllocated
}

func (p *THardwareInfo) GetStartGpu() int16 {
  return p.StartGpu
}

func (p *THardwareInfo) GetHostName() string {
  return p.HostName
}

func (p *THardwareInfo) GetGpuInfo() []*TGpuSpecification {
  return p.GpuInfo
}
func (p *THardwareInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THardwareInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NumGpuHw = v
}
  return nil
}

func (p *THardwareInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumCPUHw = v
}
  return nil
}

func (p *THardwareInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumGpuAllocated = v
}
  return nil
}

func (p *THardwareInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.StartGpu = v
}
  return nil
}

func (p *THardwareInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.HostName = v
}
  return nil
}

func (p *THardwareInfo)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TGpuSpecification, 0, size)
  p.GpuInfo =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &TGpuSpecification{}
    if err := _elem14.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.GpuInfo = append(p.GpuInfo, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THardwareInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("THardwareInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THardwareInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num_gpu_hw", thrift.I16, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num_gpu_hw: ", p), err) }
  if err := oprot.WriteI16(int16(p.NumGpuHw)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_gpu_hw (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num_gpu_hw: ", p), err) }
  return err
}

func (p *THardwareInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num_cpu_hw", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num_cpu_hw: ", p), err) }
  if err := oprot.WriteI16(int16(p.NumCPUHw)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_cpu_hw (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num_cpu_hw: ", p), err) }
  return err
}

func (p *THardwareInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num_gpu_allocated", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:num_gpu_allocated: ", p), err) }
  if err := oprot.WriteI16(int16(p.NumGpuAllocated)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_gpu_allocated (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:num_gpu_allocated: ", p), err) }
  return err
}

func (p *THardwareInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("start_gpu", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:start_gpu: ", p), err) }
  if err := oprot.WriteI16(int16(p.StartGpu)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_gpu (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:start_gpu: ", p), err) }
  return err
}

func (p *THardwareInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("host_name", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:host_name: ", p), err) }
  if err := oprot.WriteString(string(p.HostName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.host_name (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:host_name: ", p), err) }
  return err
}

func (p *THardwareInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gpu_info", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:gpu_info: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.GpuInfo)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.GpuInfo {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:gpu_info: ", p), err) }
  return err
}

func (p *THardwareInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THardwareInfo(%+v)", *p)
}

// Attributes:
//  - HardwareInfo
type TClusterHardwareInfo struct {
  HardwareInfo []*THardwareInfo `thrift:"hardware_info,1" db:"hardware_info" json:"hardware_info"`
}

func NewTClusterHardwareInfo() *TClusterHardwareInfo {
  return &TClusterHardwareInfo{}
}


func (p *TClusterHardwareInfo) GetHardwareInfo() []*THardwareInfo {
  return p.HardwareInfo
}
func (p *TClusterHardwareInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TClusterHardwareInfo)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*THardwareInfo, 0, size)
  p.HardwareInfo =  tSlice
  for i := 0; i < size; i ++ {
    _elem15 := &THardwareInfo{}
    if err := _elem15.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem15), err)
    }
    p.HardwareInfo = append(p.HardwareInfo, _elem15)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TClusterHardwareInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TClusterHardwareInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TClusterHardwareInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hardware_info", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hardware_info: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HardwareInfo)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.HardwareInfo {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hardware_info: ", p), err) }
  return err
}

func (p *TClusterHardwareInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TClusterHardwareInfo(%+v)", *p)
}

// Attributes:
//  - Slab
//  - StartPage
//  - NumPages
//  - Touch
//  - ChunkKey
//  - BufferEpoch
//  - IsFree
type TMemoryData struct {
  Slab int64 `thrift:"slab,1" db:"slab" json:"slab"`
  StartPage int32 `thrift:"start_page,2" db:"start_page" json:"start_page"`
  NumPages int64 `thrift:"num_pages,3" db:"num_pages" json:"num_pages"`
  Touch int32 `thrift:"touch,4" db:"touch" json:"touch"`
  ChunkKey []int64 `thrift:"chunk_key,5" db:"chunk_key" json:"chunk_key"`
  BufferEpoch int32 `thrift:"buffer_epoch,6" db:"buffer_epoch" json:"buffer_epoch"`
  IsFree bool `thrift:"is_free,7" db:"is_free" json:"is_free"`
}

func NewTMemoryData() *TMemoryData {
  return &TMemoryData{}
}


func (p *TMemoryData) GetSlab() int64 {
  return p.Slab
}

func (p *TMemoryData) GetStartPage() int32 {
  return p.StartPage
}

func (p *TMemoryData) GetNumPages() int64 {
  return p.NumPages
}

func (p *TMemoryData) GetTouch() int32 {
  return p.Touch
}

func (p *TMemoryData) GetChunkKey() []int64 {
  return p.ChunkKey
}

func (p *TMemoryData) GetBufferEpoch() int32 {
  return p.BufferEpoch
}

func (p *TMemoryData) GetIsFree() bool {
  return p.IsFree
}
func (p *TMemoryData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMemoryData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Slab = v
}
  return nil
}

func (p *TMemoryData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StartPage = v
}
  return nil
}

func (p *TMemoryData)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumPages = v
}
  return nil
}

func (p *TMemoryData)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Touch = v
}
  return nil
}

func (p *TMemoryData)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.ChunkKey =  tSlice
  for i := 0; i < size; i ++ {
var _elem16 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem16 = v
}
    p.ChunkKey = append(p.ChunkKey, _elem16)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TMemoryData)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.BufferEpoch = v
}
  return nil
}

func (p *TMemoryData)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.IsFree = v
}
  return nil
}

func (p *TMemoryData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TMemoryData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMemoryData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("slab", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:slab: ", p), err) }
  if err := oprot.WriteI64(int64(p.Slab)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.slab (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:slab: ", p), err) }
  return err
}

func (p *TMemoryData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("start_page", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:start_page: ", p), err) }
  if err := oprot.WriteI32(int32(p.StartPage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_page (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:start_page: ", p), err) }
  return err
}

func (p *TMemoryData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num_pages", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:num_pages: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumPages)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_pages (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:num_pages: ", p), err) }
  return err
}

func (p *TMemoryData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("touch", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:touch: ", p), err) }
  if err := oprot.WriteI32(int32(p.Touch)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.touch (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:touch: ", p), err) }
  return err
}

func (p *TMemoryData) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chunk_key", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:chunk_key: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.ChunkKey)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ChunkKey {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:chunk_key: ", p), err) }
  return err
}

func (p *TMemoryData) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("buffer_epoch", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:buffer_epoch: ", p), err) }
  if err := oprot.WriteI32(int32(p.BufferEpoch)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.buffer_epoch (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:buffer_epoch: ", p), err) }
  return err
}

func (p *TMemoryData) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_free", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:is_free: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsFree)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_free (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:is_free: ", p), err) }
  return err
}

func (p *TMemoryData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMemoryData(%+v)", *p)
}

// Attributes:
//  - HostName
//  - PageSize
//  - MaxNumPages
//  - NumPagesAllocated
//  - IsAllocationCapped
//  - NodeMemoryData
type TNodeMemoryInfo struct {
  HostName string `thrift:"host_name,1" db:"host_name" json:"host_name"`
  PageSize int64 `thrift:"page_size,2" db:"page_size" json:"page_size"`
  MaxNumPages int64 `thrift:"max_num_pages,3" db:"max_num_pages" json:"max_num_pages"`
  NumPagesAllocated int64 `thrift:"num_pages_allocated,4" db:"num_pages_allocated" json:"num_pages_allocated"`
  IsAllocationCapped bool `thrift:"is_allocation_capped,5" db:"is_allocation_capped" json:"is_allocation_capped"`
  NodeMemoryData []*TMemoryData `thrift:"node_memory_data,6" db:"node_memory_data" json:"node_memory_data"`
}

func NewTNodeMemoryInfo() *TNodeMemoryInfo {
  return &TNodeMemoryInfo{}
}


func (p *TNodeMemoryInfo) GetHostName() string {
  return p.HostName
}

func (p *TNodeMemoryInfo) GetPageSize() int64 {
  return p.PageSize
}

func (p *TNodeMemoryInfo) GetMaxNumPages() int64 {
  return p.MaxNumPages
}

func (p *TNodeMemoryInfo) GetNumPagesAllocated() int64 {
  return p.NumPagesAllocated
}

func (p *TNodeMemoryInfo) GetIsAllocationCapped() bool {
  return p.IsAllocationCapped
}

func (p *TNodeMemoryInfo) GetNodeMemoryData() []*TMemoryData {
  return p.NodeMemoryData
}
func (p *TNodeMemoryInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TNodeMemoryInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.HostName = v
}
  return nil
}

func (p *TNodeMemoryInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PageSize = v
}
  return nil
}

func (p *TNodeMemoryInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxNumPages = v
}
  return nil
}

func (p *TNodeMemoryInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NumPagesAllocated = v
}
  return nil
}

func (p *TNodeMemoryInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IsAllocationCapped = v
}
  return nil
}

func (p *TNodeMemoryInfo)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TMemoryData, 0, size)
  p.NodeMemoryData =  tSlice
  for i := 0; i < size; i ++ {
    _elem17 := &TMemoryData{}
    if err := _elem17.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
    }
    p.NodeMemoryData = append(p.NodeMemoryData, _elem17)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TNodeMemoryInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TNodeMemoryInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TNodeMemoryInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("host_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host_name: ", p), err) }
  if err := oprot.WriteString(string(p.HostName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.host_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host_name: ", p), err) }
  return err
}

func (p *TNodeMemoryInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page_size", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:page_size: ", p), err) }
  if err := oprot.WriteI64(int64(p.PageSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page_size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:page_size: ", p), err) }
  return err
}

func (p *TNodeMemoryInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("max_num_pages", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_num_pages: ", p), err) }
  if err := oprot.WriteI64(int64(p.MaxNumPages)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_num_pages (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_num_pages: ", p), err) }
  return err
}

func (p *TNodeMemoryInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num_pages_allocated", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:num_pages_allocated: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumPagesAllocated)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_pages_allocated (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:num_pages_allocated: ", p), err) }
  return err
}

func (p *TNodeMemoryInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_allocation_capped", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:is_allocation_capped: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsAllocationCapped)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_allocation_capped (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:is_allocation_capped: ", p), err) }
  return err
}

func (p *TNodeMemoryInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("node_memory_data", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:node_memory_data: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.NodeMemoryData)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.NodeMemoryData {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:node_memory_data: ", p), err) }
  return err
}

func (p *TNodeMemoryInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TNodeMemoryInfo(%+v)", *p)
}

// Attributes:
//  - TableName
//  - NumCols
//  - IsView
//  - IsReplicated
//  - ShardCount
//  - MaxRows
//  - TableID
//  - MaxTableID
//  - ColTypes
//  - ColNames
type TTableMeta struct {
  TableName string `thrift:"table_name,1" db:"table_name" json:"table_name"`
  NumCols int64 `thrift:"num_cols,2" db:"num_cols" json:"num_cols"`
  // unused field # 3
  IsView bool `thrift:"is_view,4" db:"is_view" json:"is_view"`
  IsReplicated bool `thrift:"is_replicated,5" db:"is_replicated" json:"is_replicated"`
  ShardCount int64 `thrift:"shard_count,6" db:"shard_count" json:"shard_count"`
  MaxRows int64 `thrift:"max_rows,7" db:"max_rows" json:"max_rows"`
  TableID int64 `thrift:"table_id,8" db:"table_id" json:"table_id"`
  MaxTableID int64 `thrift:"max_table_id,9" db:"max_table_id" json:"max_table_id"`
  ColTypes []*common.TTypeInfo `thrift:"col_types,10" db:"col_types" json:"col_types"`
  ColNames []string `thrift:"col_names,11" db:"col_names" json:"col_names"`
}

func NewTTableMeta() *TTableMeta {
  return &TTableMeta{}
}


func (p *TTableMeta) GetTableName() string {
  return p.TableName
}

func (p *TTableMeta) GetNumCols() int64 {
  return p.NumCols
}

func (p *TTableMeta) GetIsView() bool {
  return p.IsView
}

func (p *TTableMeta) GetIsReplicated() bool {
  return p.IsReplicated
}

func (p *TTableMeta) GetShardCount() int64 {
  return p.ShardCount
}

func (p *TTableMeta) GetMaxRows() int64 {
  return p.MaxRows
}

func (p *TTableMeta) GetTableID() int64 {
  return p.TableID
}

func (p *TTableMeta) GetMaxTableID() int64 {
  return p.MaxTableID
}

func (p *TTableMeta) GetColTypes() []*common.TTypeInfo {
  return p.ColTypes
}

func (p *TTableMeta) GetColNames() []string {
  return p.ColNames
}
func (p *TTableMeta) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTableMeta)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *TTableMeta)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumCols = v
}
  return nil
}

func (p *TTableMeta)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsView = v
}
  return nil
}

func (p *TTableMeta)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IsReplicated = v
}
  return nil
}

func (p *TTableMeta)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ShardCount = v
}
  return nil
}

func (p *TTableMeta)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.MaxRows = v
}
  return nil
}

func (p *TTableMeta)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.TableID = v
}
  return nil
}

func (p *TTableMeta)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.MaxTableID = v
}
  return nil
}

func (p *TTableMeta)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*common.TTypeInfo, 0, size)
  p.ColTypes =  tSlice
  for i := 0; i < size; i ++ {
    _elem18 := &common.TTypeInfo{
    Size: -1,
}
    if err := _elem18.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
    }
    p.ColTypes = append(p.ColTypes, _elem18)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TTableMeta)  ReadField11(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ColNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem19 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem19 = v
}
    p.ColNames = append(p.ColNames, _elem19)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TTableMeta) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTableMeta"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTableMeta) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table_name: ", p), err) }
  return err
}

func (p *TTableMeta) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num_cols", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num_cols: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumCols)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_cols (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num_cols: ", p), err) }
  return err
}

func (p *TTableMeta) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_view", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:is_view: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsView)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_view (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:is_view: ", p), err) }
  return err
}

func (p *TTableMeta) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_replicated", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:is_replicated: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsReplicated)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_replicated (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:is_replicated: ", p), err) }
  return err
}

func (p *TTableMeta) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("shard_count", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:shard_count: ", p), err) }
  if err := oprot.WriteI64(int64(p.ShardCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.shard_count (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:shard_count: ", p), err) }
  return err
}

func (p *TTableMeta) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("max_rows", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:max_rows: ", p), err) }
  if err := oprot.WriteI64(int64(p.MaxRows)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_rows (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:max_rows: ", p), err) }
  return err
}

func (p *TTableMeta) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_id", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:table_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.TableID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_id (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:table_id: ", p), err) }
  return err
}

func (p *TTableMeta) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("max_table_id", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:max_table_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.MaxTableID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_table_id (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:max_table_id: ", p), err) }
  return err
}

func (p *TTableMeta) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("col_types", thrift.LIST, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:col_types: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColTypes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColTypes {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:col_types: ", p), err) }
  return err
}

func (p *TTableMeta) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("col_names", thrift.LIST, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:col_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ColNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColNames {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:col_names: ", p), err) }
  return err
}

func (p *TTableMeta) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTableMeta(%+v)", *p)
}

// Attributes:
//  - RowDesc
//  - FragmentSize
//  - PageSize
//  - MaxRows
//  - ViewSql
//  - ShardCount
//  - KeyMetainfo
//  - IsTemporary
//  - PartitionDetail
type TTableDetails struct {
  RowDesc TRowDescriptor `thrift:"row_desc,1" db:"row_desc" json:"row_desc"`
  FragmentSize int64 `thrift:"fragment_size,2" db:"fragment_size" json:"fragment_size"`
  PageSize int64 `thrift:"page_size,3" db:"page_size" json:"page_size"`
  MaxRows int64 `thrift:"max_rows,4" db:"max_rows" json:"max_rows"`
  ViewSql string `thrift:"view_sql,5" db:"view_sql" json:"view_sql"`
  ShardCount int64 `thrift:"shard_count,6" db:"shard_count" json:"shard_count"`
  KeyMetainfo string `thrift:"key_metainfo,7" db:"key_metainfo" json:"key_metainfo"`
  IsTemporary bool `thrift:"is_temporary,8" db:"is_temporary" json:"is_temporary"`
  PartitionDetail TPartitionDetail `thrift:"partition_detail,9" db:"partition_detail" json:"partition_detail"`
}

func NewTTableDetails() *TTableDetails {
  return &TTableDetails{}
}


func (p *TTableDetails) GetRowDesc() TRowDescriptor {
  return p.RowDesc
}

func (p *TTableDetails) GetFragmentSize() int64 {
  return p.FragmentSize
}

func (p *TTableDetails) GetPageSize() int64 {
  return p.PageSize
}

func (p *TTableDetails) GetMaxRows() int64 {
  return p.MaxRows
}

func (p *TTableDetails) GetViewSql() string {
  return p.ViewSql
}

func (p *TTableDetails) GetShardCount() int64 {
  return p.ShardCount
}

func (p *TTableDetails) GetKeyMetainfo() string {
  return p.KeyMetainfo
}

func (p *TTableDetails) GetIsTemporary() bool {
  return p.IsTemporary
}

func (p *TTableDetails) GetPartitionDetail() TPartitionDetail {
  return p.PartitionDetail
}
func (p *TTableDetails) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTableDetails)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make(TRowDescriptor, 0, size)
  p.RowDesc =  tSlice
  for i := 0; i < size; i ++ {
    _elem20 := &TColumnType{}
    if err := _elem20.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem20), err)
    }
    p.RowDesc = append(p.RowDesc, _elem20)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TTableDetails)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FragmentSize = v
}
  return nil
}

func (p *TTableDetails)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PageSize = v
}
  return nil
}

func (p *TTableDetails)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxRows = v
}
  return nil
}

func (p *TTableDetails)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ViewSql = v
}
  return nil
}

func (p *TTableDetails)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ShardCount = v
}
  return nil
}

func (p *TTableDetails)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.KeyMetainfo = v
}
  return nil
}

func (p *TTableDetails)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.IsTemporary = v
}
  return nil
}

func (p *TTableDetails)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := TPartitionDetail(v)
  p.PartitionDetail = temp
}
  return nil
}

func (p *TTableDetails) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTableDetails"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTableDetails) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_desc", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row_desc: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowDesc)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RowDesc {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row_desc: ", p), err) }
  return err
}

func (p *TTableDetails) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fragment_size", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fragment_size: ", p), err) }
  if err := oprot.WriteI64(int64(p.FragmentSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fragment_size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fragment_size: ", p), err) }
  return err
}

func (p *TTableDetails) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page_size", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:page_size: ", p), err) }
  if err := oprot.WriteI64(int64(p.PageSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page_size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:page_size: ", p), err) }
  return err
}

func (p *TTableDetails) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("max_rows", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_rows: ", p), err) }
  if err := oprot.WriteI64(int64(p.MaxRows)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_rows (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_rows: ", p), err) }
  return err
}

func (p *TTableDetails) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("view_sql", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:view_sql: ", p), err) }
  if err := oprot.WriteString(string(p.ViewSql)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.view_sql (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:view_sql: ", p), err) }
  return err
}

func (p *TTableDetails) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("shard_count", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:shard_count: ", p), err) }
  if err := oprot.WriteI64(int64(p.ShardCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.shard_count (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:shard_count: ", p), err) }
  return err
}

func (p *TTableDetails) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key_metainfo", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:key_metainfo: ", p), err) }
  if err := oprot.WriteString(string(p.KeyMetainfo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key_metainfo (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:key_metainfo: ", p), err) }
  return err
}

func (p *TTableDetails) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_temporary", thrift.BOOL, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:is_temporary: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsTemporary)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_temporary (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:is_temporary: ", p), err) }
  return err
}

func (p *TTableDetails) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("partition_detail", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:partition_detail: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartitionDetail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partition_detail (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:partition_detail: ", p), err) }
  return err
}

func (p *TTableDetails) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTableDetails(%+v)", *p)
}

// Attributes:
//  - Type
//  - ColID
//  - TableID
//  - HasNulls
//  - IntMin
//  - IntMax
//  - Bucket
//  - FpMin
//  - FpMax
type TColumnRange struct {
  Type TExpressionRangeType `thrift:"type,1" db:"type" json:"type"`
  ColID int32 `thrift:"col_id,2" db:"col_id" json:"col_id"`
  TableID int32 `thrift:"table_id,3" db:"table_id" json:"table_id"`
  HasNulls bool `thrift:"has_nulls,4" db:"has_nulls" json:"has_nulls"`
  IntMin int64 `thrift:"int_min,5" db:"int_min" json:"int_min"`
  IntMax int64 `thrift:"int_max,6" db:"int_max" json:"int_max"`
  Bucket int64 `thrift:"bucket,7" db:"bucket" json:"bucket"`
  FpMin float64 `thrift:"fp_min,8" db:"fp_min" json:"fp_min"`
  FpMax float64 `thrift:"fp_max,9" db:"fp_max" json:"fp_max"`
}

func NewTColumnRange() *TColumnRange {
  return &TColumnRange{}
}


func (p *TColumnRange) GetType() TExpressionRangeType {
  return p.Type
}

func (p *TColumnRange) GetColID() int32 {
  return p.ColID
}

func (p *TColumnRange) GetTableID() int32 {
  return p.TableID
}

func (p *TColumnRange) GetHasNulls() bool {
  return p.HasNulls
}

func (p *TColumnRange) GetIntMin() int64 {
  return p.IntMin
}

func (p *TColumnRange) GetIntMax() int64 {
  return p.IntMax
}

func (p *TColumnRange) GetBucket() int64 {
  return p.Bucket
}

func (p *TColumnRange) GetFpMin() float64 {
  return p.FpMin
}

func (p *TColumnRange) GetFpMax() float64 {
  return p.FpMax
}
func (p *TColumnRange) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TColumnRange)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TExpressionRangeType(v)
  p.Type = temp
}
  return nil
}

func (p *TColumnRange)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ColID = v
}
  return nil
}

func (p *TColumnRange)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TableID = v
}
  return nil
}

func (p *TColumnRange)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.HasNulls = v
}
  return nil
}

func (p *TColumnRange)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IntMin = v
}
  return nil
}

func (p *TColumnRange)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IntMax = v
}
  return nil
}

func (p *TColumnRange)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Bucket = v
}
  return nil
}

func (p *TColumnRange)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.FpMin = v
}
  return nil
}

func (p *TColumnRange)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.FpMax = v
}
  return nil
}

func (p *TColumnRange) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TColumnRange"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TColumnRange) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *TColumnRange) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("col_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:col_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ColID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.col_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:col_id: ", p), err) }
  return err
}

func (p *TColumnRange) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:table_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TableID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:table_id: ", p), err) }
  return err
}

func (p *TColumnRange) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("has_nulls", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:has_nulls: ", p), err) }
  if err := oprot.WriteBool(bool(p.HasNulls)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.has_nulls (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:has_nulls: ", p), err) }
  return err
}

func (p *TColumnRange) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("int_min", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:int_min: ", p), err) }
  if err := oprot.WriteI64(int64(p.IntMin)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.int_min (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:int_min: ", p), err) }
  return err
}

func (p *TColumnRange) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("int_max", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:int_max: ", p), err) }
  if err := oprot.WriteI64(int64(p.IntMax)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.int_max (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:int_max: ", p), err) }
  return err
}

func (p *TColumnRange) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bucket", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:bucket: ", p), err) }
  if err := oprot.WriteI64(int64(p.Bucket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bucket (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:bucket: ", p), err) }
  return err
}

func (p *TColumnRange) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fp_min", thrift.DOUBLE, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:fp_min: ", p), err) }
  if err := oprot.WriteDouble(float64(p.FpMin)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fp_min (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:fp_min: ", p), err) }
  return err
}

func (p *TColumnRange) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fp_max", thrift.DOUBLE, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:fp_max: ", p), err) }
  if err := oprot.WriteDouble(float64(p.FpMax)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fp_max (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:fp_max: ", p), err) }
  return err
}

func (p *TColumnRange) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TColumnRange(%+v)", *p)
}

// Attributes:
//  - DictID
//  - EntryCount
type TDictionaryGeneration struct {
  DictID int32 `thrift:"dict_id,1" db:"dict_id" json:"dict_id"`
  EntryCount int64 `thrift:"entry_count,2" db:"entry_count" json:"entry_count"`
}

func NewTDictionaryGeneration() *TDictionaryGeneration {
  return &TDictionaryGeneration{}
}


func (p *TDictionaryGeneration) GetDictID() int32 {
  return p.DictID
}

func (p *TDictionaryGeneration) GetEntryCount() int64 {
  return p.EntryCount
}
func (p *TDictionaryGeneration) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDictionaryGeneration)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DictID = v
}
  return nil
}

func (p *TDictionaryGeneration)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EntryCount = v
}
  return nil
}

func (p *TDictionaryGeneration) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDictionaryGeneration"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDictionaryGeneration) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dict_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dict_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.DictID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dict_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dict_id: ", p), err) }
  return err
}

func (p *TDictionaryGeneration) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("entry_count", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entry_count: ", p), err) }
  if err := oprot.WriteI64(int64(p.EntryCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.entry_count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entry_count: ", p), err) }
  return err
}

func (p *TDictionaryGeneration) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDictionaryGeneration(%+v)", *p)
}

// Attributes:
//  - TableID
//  - TupleCount
//  - StartRowid
type TTableGeneration struct {
  TableID int32 `thrift:"table_id,1" db:"table_id" json:"table_id"`
  TupleCount int64 `thrift:"tuple_count,2" db:"tuple_count" json:"tuple_count"`
  StartRowid int64 `thrift:"start_rowid,3" db:"start_rowid" json:"start_rowid"`
}

func NewTTableGeneration() *TTableGeneration {
  return &TTableGeneration{}
}


func (p *TTableGeneration) GetTableID() int32 {
  return p.TableID
}

func (p *TTableGeneration) GetTupleCount() int64 {
  return p.TupleCount
}

func (p *TTableGeneration) GetStartRowid() int64 {
  return p.StartRowid
}
func (p *TTableGeneration) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTableGeneration)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TableID = v
}
  return nil
}

func (p *TTableGeneration)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TupleCount = v
}
  return nil
}

func (p *TTableGeneration)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartRowid = v
}
  return nil
}

func (p *TTableGeneration) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTableGeneration"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTableGeneration) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TableID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table_id: ", p), err) }
  return err
}

func (p *TTableGeneration) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tuple_count", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tuple_count: ", p), err) }
  if err := oprot.WriteI64(int64(p.TupleCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tuple_count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tuple_count: ", p), err) }
  return err
}

func (p *TTableGeneration) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("start_rowid", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:start_rowid: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartRowid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_rowid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:start_rowid: ", p), err) }
  return err
}

func (p *TTableGeneration) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTableGeneration(%+v)", *p)
}

// Attributes:
//  - ID
//  - ColumnRanges
//  - DictionaryGenerations
//  - TableGenerations
//  - ParentSessionID
type TPendingQuery struct {
  ID TQueryId `thrift:"id,1" db:"id" json:"id"`
  ColumnRanges []*TColumnRange `thrift:"column_ranges,2" db:"column_ranges" json:"column_ranges"`
  DictionaryGenerations []*TDictionaryGeneration `thrift:"dictionary_generations,3" db:"dictionary_generations" json:"dictionary_generations"`
  TableGenerations []*TTableGeneration `thrift:"table_generations,4" db:"table_generations" json:"table_generations"`
  ParentSessionID TSessionId `thrift:"parent_session_id,5" db:"parent_session_id" json:"parent_session_id"`
}

func NewTPendingQuery() *TPendingQuery {
  return &TPendingQuery{}
}


func (p *TPendingQuery) GetID() TQueryId {
  return p.ID
}

func (p *TPendingQuery) GetColumnRanges() []*TColumnRange {
  return p.ColumnRanges
}

func (p *TPendingQuery) GetDictionaryGenerations() []*TDictionaryGeneration {
  return p.DictionaryGenerations
}

func (p *TPendingQuery) GetTableGenerations() []*TTableGeneration {
  return p.TableGenerations
}

func (p *TPendingQuery) GetParentSessionID() TSessionId {
  return p.ParentSessionID
}
func (p *TPendingQuery) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPendingQuery)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TQueryId(v)
  p.ID = temp
}
  return nil
}

func (p *TPendingQuery)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TColumnRange, 0, size)
  p.ColumnRanges =  tSlice
  for i := 0; i < size; i ++ {
    _elem21 := &TColumnRange{}
    if err := _elem21.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem21), err)
    }
    p.ColumnRanges = append(p.ColumnRanges, _elem21)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TPendingQuery)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDictionaryGeneration, 0, size)
  p.DictionaryGenerations =  tSlice
  for i := 0; i < size; i ++ {
    _elem22 := &TDictionaryGeneration{}
    if err := _elem22.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
    }
    p.DictionaryGenerations = append(p.DictionaryGenerations, _elem22)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TPendingQuery)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TTableGeneration, 0, size)
  p.TableGenerations =  tSlice
  for i := 0; i < size; i ++ {
    _elem23 := &TTableGeneration{}
    if err := _elem23.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem23), err)
    }
    p.TableGenerations = append(p.TableGenerations, _elem23)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TPendingQuery)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := TSessionId(v)
  p.ParentSessionID = temp
}
  return nil
}

func (p *TPendingQuery) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPendingQuery"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPendingQuery) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TPendingQuery) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("column_ranges", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:column_ranges: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnRanges)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColumnRanges {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:column_ranges: ", p), err) }
  return err
}

func (p *TPendingQuery) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dictionary_generations", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dictionary_generations: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DictionaryGenerations)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.DictionaryGenerations {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dictionary_generations: ", p), err) }
  return err
}

func (p *TPendingQuery) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_generations", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:table_generations: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TableGenerations)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TableGenerations {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:table_generations: ", p), err) }
  return err
}

func (p *TPendingQuery) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parent_session_id", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:parent_session_id: ", p), err) }
  if err := oprot.WriteString(string(p.ParentSessionID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parent_session_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:parent_session_id: ", p), err) }
  return err
}

func (p *TPendingQuery) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPendingQuery(%+v)", *p)
}

// Attributes:
//  - Payload
//  - IsNull
type TVarLen struct {
  Payload []byte `thrift:"payload,1" db:"payload" json:"payload"`
  IsNull bool `thrift:"is_null,2" db:"is_null" json:"is_null"`
}

func NewTVarLen() *TVarLen {
  return &TVarLen{}
}


func (p *TVarLen) GetPayload() []byte {
  return p.Payload
}

func (p *TVarLen) GetIsNull() bool {
  return p.IsNull
}
func (p *TVarLen) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TVarLen)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Payload = v
}
  return nil
}

func (p *TVarLen)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IsNull = v
}
  return nil
}

func (p *TVarLen) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TVarLen"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TVarLen) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("payload", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:payload: ", p), err) }
  if err := oprot.WriteBinary(p.Payload); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.payload (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:payload: ", p), err) }
  return err
}

func (p *TVarLen) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_null", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:is_null: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsNull)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_null (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:is_null: ", p), err) }
  return err
}

func (p *TVarLen) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TVarLen(%+v)", *p)
}

// Attributes:
//  - FixedLenData
//  - VarLenData
type TDataBlockPtr struct {
  FixedLenData []byte `thrift:"fixed_len_data,1" db:"fixed_len_data" json:"fixed_len_data,omitempty"`
  VarLenData []*TVarLen `thrift:"var_len_data,2" db:"var_len_data" json:"var_len_data,omitempty"`
}

func NewTDataBlockPtr() *TDataBlockPtr {
  return &TDataBlockPtr{}
}

var TDataBlockPtr_FixedLenData_DEFAULT []byte

func (p *TDataBlockPtr) GetFixedLenData() []byte {
  return p.FixedLenData
}
var TDataBlockPtr_VarLenData_DEFAULT []*TVarLen

func (p *TDataBlockPtr) GetVarLenData() []*TVarLen {
  return p.VarLenData
}
func (p *TDataBlockPtr) CountSetFieldsTDataBlockPtr() int {
  count := 0
  if (p.IsSetFixedLenData()) {
    count++
  }
  if (p.IsSetVarLenData()) {
    count++
  }
  return count

}

func (p *TDataBlockPtr) IsSetFixedLenData() bool {
  return p.FixedLenData != nil
}

func (p *TDataBlockPtr) IsSetVarLenData() bool {
  return p.VarLenData != nil
}

func (p *TDataBlockPtr) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataBlockPtr)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FixedLenData = v
}
  return nil
}

func (p *TDataBlockPtr)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TVarLen, 0, size)
  p.VarLenData =  tSlice
  for i := 0; i < size; i ++ {
    _elem24 := &TVarLen{}
    if err := _elem24.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem24), err)
    }
    p.VarLenData = append(p.VarLenData, _elem24)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDataBlockPtr) Write(oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsTDataBlockPtr(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("TDataBlockPtr"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataBlockPtr) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetFixedLenData() {
    if err := oprot.WriteFieldBegin("fixed_len_data", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fixed_len_data: ", p), err) }
    if err := oprot.WriteBinary(p.FixedLenData); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.fixed_len_data (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fixed_len_data: ", p), err) }
  }
  return err
}

func (p *TDataBlockPtr) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetVarLenData() {
    if err := oprot.WriteFieldBegin("var_len_data", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:var_len_data: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VarLenData)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.VarLenData {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:var_len_data: ", p), err) }
  }
  return err
}

func (p *TDataBlockPtr) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataBlockPtr(%+v)", *p)
}

// Attributes:
//  - DbID
//  - TableID
//  - ColumnIds
//  - Data
//  - NumRows
type TInsertData struct {
  DbID int32 `thrift:"db_id,1" db:"db_id" json:"db_id"`
  TableID int32 `thrift:"table_id,2" db:"table_id" json:"table_id"`
  ColumnIds []int32 `thrift:"column_ids,3" db:"column_ids" json:"column_ids"`
  Data []*TDataBlockPtr `thrift:"data,4" db:"data" json:"data"`
  NumRows int64 `thrift:"num_rows,5" db:"num_rows" json:"num_rows"`
}

func NewTInsertData() *TInsertData {
  return &TInsertData{}
}


func (p *TInsertData) GetDbID() int32 {
  return p.DbID
}

func (p *TInsertData) GetTableID() int32 {
  return p.TableID
}

func (p *TInsertData) GetColumnIds() []int32 {
  return p.ColumnIds
}

func (p *TInsertData) GetData() []*TDataBlockPtr {
  return p.Data
}

func (p *TInsertData) GetNumRows() int64 {
  return p.NumRows
}
func (p *TInsertData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TInsertData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbID = v
}
  return nil
}

func (p *TInsertData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableID = v
}
  return nil
}

func (p *TInsertData)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.ColumnIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem25 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem25 = v
}
    p.ColumnIds = append(p.ColumnIds, _elem25)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TInsertData)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDataBlockPtr, 0, size)
  p.Data =  tSlice
  for i := 0; i < size; i ++ {
    _elem26 := &TDataBlockPtr{}
    if err := _elem26.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem26), err)
    }
    p.Data = append(p.Data, _elem26)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TInsertData)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NumRows = v
}
  return nil
}

func (p *TInsertData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TInsertData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TInsertData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.DbID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_id: ", p), err) }
  return err
}

func (p *TInsertData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TableID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_id: ", p), err) }
  return err
}

func (p *TInsertData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("column_ids", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:column_ids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.ColumnIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColumnIds {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:column_ids: ", p), err) }
  return err
}

func (p *TInsertData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:data: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Data {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:data: ", p), err) }
  return err
}

func (p *TInsertData) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num_rows", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:num_rows: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumRows)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_rows (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:num_rows: ", p), err) }
  return err
}

func (p *TInsertData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TInsertData(%+v)", *p)
}

// Attributes:
//  - ID
type TPendingRenderQuery struct {
  ID TQueryId `thrift:"id,1" db:"id" json:"id"`
}

func NewTPendingRenderQuery() *TPendingRenderQuery {
  return &TPendingRenderQuery{}
}


func (p *TPendingRenderQuery) GetID() TQueryId {
  return p.ID
}
func (p *TPendingRenderQuery) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPendingRenderQuery)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TQueryId(v)
  p.ID = temp
}
  return nil
}

func (p *TPendingRenderQuery) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPendingRenderQuery"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPendingRenderQuery) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TPendingRenderQuery) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPendingRenderQuery(%+v)", *p)
}

// Attributes:
//  - MergeType
//  - NodeID
//  - ExecutionTimeMs
//  - RenderTimeMs
//  - TotalTimeMs
type TRenderParseResult_ struct {
  MergeType TMergeType `thrift:"merge_type,1" db:"merge_type" json:"merge_type"`
  NodeID int32 `thrift:"node_id,2" db:"node_id" json:"node_id"`
  ExecutionTimeMs int64 `thrift:"execution_time_ms,3" db:"execution_time_ms" json:"execution_time_ms"`
  RenderTimeMs int64 `thrift:"render_time_ms,4" db:"render_time_ms" json:"render_time_ms"`
  TotalTimeMs int64 `thrift:"total_time_ms,5" db:"total_time_ms" json:"total_time_ms"`
}

func NewTRenderParseResult_() *TRenderParseResult_ {
  return &TRenderParseResult_{}
}


func (p *TRenderParseResult_) GetMergeType() TMergeType {
  return p.MergeType
}

func (p *TRenderParseResult_) GetNodeID() int32 {
  return p.NodeID
}

func (p *TRenderParseResult_) GetExecutionTimeMs() int64 {
  return p.ExecutionTimeMs
}

func (p *TRenderParseResult_) GetRenderTimeMs() int64 {
  return p.RenderTimeMs
}

func (p *TRenderParseResult_) GetTotalTimeMs() int64 {
  return p.TotalTimeMs
}
func (p *TRenderParseResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TRenderParseResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TMergeType(v)
  p.MergeType = temp
}
  return nil
}

func (p *TRenderParseResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NodeID = v
}
  return nil
}

func (p *TRenderParseResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ExecutionTimeMs = v
}
  return nil
}

func (p *TRenderParseResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RenderTimeMs = v
}
  return nil
}

func (p *TRenderParseResult_)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TotalTimeMs = v
}
  return nil
}

func (p *TRenderParseResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRenderParseResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRenderParseResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("merge_type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:merge_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.MergeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.merge_type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:merge_type: ", p), err) }
  return err
}

func (p *TRenderParseResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("node_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:node_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.NodeID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.node_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:node_id: ", p), err) }
  return err
}

func (p *TRenderParseResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("execution_time_ms", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:execution_time_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExecutionTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.execution_time_ms (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:execution_time_ms: ", p), err) }
  return err
}

func (p *TRenderParseResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("render_time_ms", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:render_time_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.RenderTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.render_time_ms (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:render_time_ms: ", p), err) }
  return err
}

func (p *TRenderParseResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("total_time_ms", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:total_time_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.TotalTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total_time_ms (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:total_time_ms: ", p), err) }
  return err
}

func (p *TRenderParseResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRenderParseResult_(%+v)", *p)
}

// Attributes:
//  - NumPixelChannels
//  - NumPixelSamples
//  - Pixels
//  - RowIds_A
//  - RowIds_B
//  - TableIds
//  - AccumData
//  - AccumDepth
type TRawRenderPassDataResult_ struct {
  NumPixelChannels int32 `thrift:"num_pixel_channels,1" db:"num_pixel_channels" json:"num_pixel_channels"`
  NumPixelSamples int32 `thrift:"num_pixel_samples,2" db:"num_pixel_samples" json:"num_pixel_samples"`
  Pixels []byte `thrift:"pixels,3" db:"pixels" json:"pixels"`
  RowIds_A []byte `thrift:"row_ids_A,4" db:"row_ids_A" json:"row_ids_A"`
  RowIds_B []byte `thrift:"row_ids_B,5" db:"row_ids_B" json:"row_ids_B"`
  TableIds []byte `thrift:"table_ids,6" db:"table_ids" json:"table_ids"`
  AccumData []byte `thrift:"accum_data,7" db:"accum_data" json:"accum_data"`
  AccumDepth int32 `thrift:"accum_depth,8" db:"accum_depth" json:"accum_depth"`
}

func NewTRawRenderPassDataResult_() *TRawRenderPassDataResult_ {
  return &TRawRenderPassDataResult_{}
}


func (p *TRawRenderPassDataResult_) GetNumPixelChannels() int32 {
  return p.NumPixelChannels
}

func (p *TRawRenderPassDataResult_) GetNumPixelSamples() int32 {
  return p.NumPixelSamples
}

func (p *TRawRenderPassDataResult_) GetPixels() []byte {
  return p.Pixels
}

func (p *TRawRenderPassDataResult_) GetRowIds_A() []byte {
  return p.RowIds_A
}

func (p *TRawRenderPassDataResult_) GetRowIds_B() []byte {
  return p.RowIds_B
}

func (p *TRawRenderPassDataResult_) GetTableIds() []byte {
  return p.TableIds
}

func (p *TRawRenderPassDataResult_) GetAccumData() []byte {
  return p.AccumData
}

func (p *TRawRenderPassDataResult_) GetAccumDepth() int32 {
  return p.AccumDepth
}
func (p *TRawRenderPassDataResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TRawRenderPassDataResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NumPixelChannels = v
}
  return nil
}

func (p *TRawRenderPassDataResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumPixelSamples = v
}
  return nil
}

func (p *TRawRenderPassDataResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Pixels = v
}
  return nil
}

func (p *TRawRenderPassDataResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RowIds_A = v
}
  return nil
}

func (p *TRawRenderPassDataResult_)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.RowIds_B = v
}
  return nil
}

func (p *TRawRenderPassDataResult_)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.TableIds = v
}
  return nil
}

func (p *TRawRenderPassDataResult_)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.AccumData = v
}
  return nil
}

func (p *TRawRenderPassDataResult_)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.AccumDepth = v
}
  return nil
}

func (p *TRawRenderPassDataResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRawRenderPassDataResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRawRenderPassDataResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num_pixel_channels", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num_pixel_channels: ", p), err) }
  if err := oprot.WriteI32(int32(p.NumPixelChannels)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_pixel_channels (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num_pixel_channels: ", p), err) }
  return err
}

func (p *TRawRenderPassDataResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num_pixel_samples", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num_pixel_samples: ", p), err) }
  if err := oprot.WriteI32(int32(p.NumPixelSamples)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_pixel_samples (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num_pixel_samples: ", p), err) }
  return err
}

func (p *TRawRenderPassDataResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pixels", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pixels: ", p), err) }
  if err := oprot.WriteBinary(p.Pixels); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pixels (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pixels: ", p), err) }
  return err
}

func (p *TRawRenderPassDataResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_ids_A", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:row_ids_A: ", p), err) }
  if err := oprot.WriteBinary(p.RowIds_A); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.row_ids_A (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:row_ids_A: ", p), err) }
  return err
}

func (p *TRawRenderPassDataResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_ids_B", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:row_ids_B: ", p), err) }
  if err := oprot.WriteBinary(p.RowIds_B); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.row_ids_B (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:row_ids_B: ", p), err) }
  return err
}

func (p *TRawRenderPassDataResult_) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_ids", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:table_ids: ", p), err) }
  if err := oprot.WriteBinary(p.TableIds); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_ids (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:table_ids: ", p), err) }
  return err
}

func (p *TRawRenderPassDataResult_) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accum_data", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:accum_data: ", p), err) }
  if err := oprot.WriteBinary(p.AccumData); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accum_data (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:accum_data: ", p), err) }
  return err
}

func (p *TRawRenderPassDataResult_) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accum_depth", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:accum_depth: ", p), err) }
  if err := oprot.WriteI32(int32(p.AccumDepth)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accum_depth (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:accum_depth: ", p), err) }
  return err
}

func (p *TRawRenderPassDataResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRawRenderPassDataResult_(%+v)", *p)
}

// Attributes:
//  - Width
//  - Height
//  - RenderPassMap
type TRawPixelData struct {
  Width int32 `thrift:"width,1" db:"width" json:"width"`
  Height int32 `thrift:"height,2" db:"height" json:"height"`
  RenderPassMap TRenderPassMap `thrift:"render_pass_map,3" db:"render_pass_map" json:"render_pass_map"`
}

func NewTRawPixelData() *TRawPixelData {
  return &TRawPixelData{}
}


func (p *TRawPixelData) GetWidth() int32 {
  return p.Width
}

func (p *TRawPixelData) GetHeight() int32 {
  return p.Height
}

func (p *TRawPixelData) GetRenderPassMap() TRenderPassMap {
  return p.RenderPassMap
}
func (p *TRawPixelData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TRawPixelData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Width = v
}
  return nil
}

func (p *TRawPixelData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Height = v
}
  return nil
}

func (p *TRawPixelData)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(TRenderPassMap, size)
  p.RenderPassMap =  tMap
  for i := 0; i < size; i ++ {
var _key27 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key27 = v
}
    _val28 := &TRawRenderPassDataResult_{}
    if err := _val28.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val28), err)
    }
    p.RenderPassMap[_key27] = _val28
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TRawPixelData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRawPixelData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRawPixelData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("width", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:width: ", p), err) }
  if err := oprot.WriteI32(int32(p.Width)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.width (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:width: ", p), err) }
  return err
}

func (p *TRawPixelData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("height", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:height: ", p), err) }
  if err := oprot.WriteI32(int32(p.Height)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.height (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:height: ", p), err) }
  return err
}

func (p *TRawPixelData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("render_pass_map", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:render_pass_map: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.RenderPassMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.RenderPassMap {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:render_pass_map: ", p), err) }
  return err
}

func (p *TRawPixelData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRawPixelData(%+v)", *p)
}

// Attributes:
//  - Type
//  - Cnt
//  - Value
type TRenderDatum struct {
  Type common.TDatumType `thrift:"type,1" db:"type" json:"type"`
  Cnt int32 `thrift:"cnt,2" db:"cnt" json:"cnt"`
  Value []byte `thrift:"value,3" db:"value" json:"value"`
}

func NewTRenderDatum() *TRenderDatum {
  return &TRenderDatum{}
}


func (p *TRenderDatum) GetType() common.TDatumType {
  return p.Type
}

func (p *TRenderDatum) GetCnt() int32 {
  return p.Cnt
}

func (p *TRenderDatum) GetValue() []byte {
  return p.Value
}
func (p *TRenderDatum) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TRenderDatum)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := common.TDatumType(v)
  p.Type = temp
}
  return nil
}

func (p *TRenderDatum)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Cnt = v
}
  return nil
}

func (p *TRenderDatum)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *TRenderDatum) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRenderDatum"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRenderDatum) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *TRenderDatum) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cnt", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cnt: ", p), err) }
  if err := oprot.WriteI32(int32(p.Cnt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cnt (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cnt: ", p), err) }
  return err
}

func (p *TRenderDatum) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *TRenderDatum) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRenderDatum(%+v)", *p)
}

// Attributes:
//  - MergeData
//  - RawPixelData
//  - ExecutionTimeMs
//  - RenderTimeMs
//  - TotalTimeMs
type TRenderStepResult_ struct {
  MergeData TRenderAggDataMap `thrift:"merge_data,1" db:"merge_data" json:"merge_data"`
  RawPixelData *TRawPixelData `thrift:"raw_pixel_data,2" db:"raw_pixel_data" json:"raw_pixel_data"`
  ExecutionTimeMs int64 `thrift:"execution_time_ms,3" db:"execution_time_ms" json:"execution_time_ms"`
  RenderTimeMs int64 `thrift:"render_time_ms,4" db:"render_time_ms" json:"render_time_ms"`
  TotalTimeMs int64 `thrift:"total_time_ms,5" db:"total_time_ms" json:"total_time_ms"`
}

func NewTRenderStepResult_() *TRenderStepResult_ {
  return &TRenderStepResult_{}
}


func (p *TRenderStepResult_) GetMergeData() TRenderAggDataMap {
  return p.MergeData
}
var TRenderStepResult__RawPixelData_DEFAULT *TRawPixelData
func (p *TRenderStepResult_) GetRawPixelData() *TRawPixelData {
  if !p.IsSetRawPixelData() {
    return TRenderStepResult__RawPixelData_DEFAULT
  }
return p.RawPixelData
}

func (p *TRenderStepResult_) GetExecutionTimeMs() int64 {
  return p.ExecutionTimeMs
}

func (p *TRenderStepResult_) GetRenderTimeMs() int64 {
  return p.RenderTimeMs
}

func (p *TRenderStepResult_) GetTotalTimeMs() int64 {
  return p.TotalTimeMs
}
func (p *TRenderStepResult_) IsSetRawPixelData() bool {
  return p.RawPixelData != nil
}

func (p *TRenderStepResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TRenderStepResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(TRenderAggDataMap, size)
  p.MergeData =  tMap
  for i := 0; i < size; i ++ {
var _key29 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key29 = v
}
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]map[string]map[string][]*TRenderDatum, size)
    _val30 :=  tMap
    for i := 0; i < size; i ++ {
var _key31 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _key31 = v
}
      _, _, size, err := iprot.ReadMapBegin()
      if err != nil {
        return thrift.PrependError("error reading map begin: ", err)
      }
      tMap := make(map[string]map[string][]*TRenderDatum, size)
      _val32 :=  tMap
      for i := 0; i < size; i ++ {
var _key33 string
        if v, err := iprot.ReadString(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
} else {
        _key33 = v
}
        _, _, size, err := iprot.ReadMapBegin()
        if err != nil {
          return thrift.PrependError("error reading map begin: ", err)
        }
        tMap := make(map[string][]*TRenderDatum, size)
        _val34 :=  tMap
        for i := 0; i < size; i ++ {
var _key35 string
          if v, err := iprot.ReadString(); err != nil {
          return thrift.PrependError("error reading field 0: ", err)
} else {
          _key35 = v
}
          _, size, err := iprot.ReadListBegin()
          if err != nil {
            return thrift.PrependError("error reading list begin: ", err)
          }
          tSlice := make([]*TRenderDatum, 0, size)
          _val36 :=  tSlice
          for i := 0; i < size; i ++ {
            _elem37 := &TRenderDatum{}
            if err := _elem37.Read(iprot); err != nil {
              return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem37), err)
            }
            _val36 = append(_val36, _elem37)
          }
          if err := iprot.ReadListEnd(); err != nil {
            return thrift.PrependError("error reading list end: ", err)
          }
          _val34[_key35] = _val36
        }
        if err := iprot.ReadMapEnd(); err != nil {
          return thrift.PrependError("error reading map end: ", err)
        }
        _val32[_key33] = _val34
      }
      if err := iprot.ReadMapEnd(); err != nil {
        return thrift.PrependError("error reading map end: ", err)
      }
      _val30[_key31] = _val32
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.MergeData[_key29] = _val30
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TRenderStepResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.RawPixelData = &TRawPixelData{}
  if err := p.RawPixelData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RawPixelData), err)
  }
  return nil
}

func (p *TRenderStepResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ExecutionTimeMs = v
}
  return nil
}

func (p *TRenderStepResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RenderTimeMs = v
}
  return nil
}

func (p *TRenderStepResult_)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TotalTimeMs = v
}
  return nil
}

func (p *TRenderStepResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRenderStepResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRenderStepResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("merge_data", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:merge_data: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.MergeData)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MergeData {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(v)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range v {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(v)); err != nil {
        return thrift.PrependError("error writing map begin: ", err)
      }
      for k, v := range v {
        if err := oprot.WriteString(string(k)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
        if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(v)); err != nil {
          return thrift.PrependError("error writing map begin: ", err)
        }
        for k, v := range v {
          if err := oprot.WriteString(string(k)); err != nil {
          return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
          if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
            return thrift.PrependError("error writing list begin: ", err)
          }
          for _, v := range v {
            if err := v.Write(oprot); err != nil {
              return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
            }
          }
          if err := oprot.WriteListEnd(); err != nil {
            return thrift.PrependError("error writing list end: ", err)
          }
        }
        if err := oprot.WriteMapEnd(); err != nil {
          return thrift.PrependError("error writing map end: ", err)
        }
      }
      if err := oprot.WriteMapEnd(); err != nil {
        return thrift.PrependError("error writing map end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:merge_data: ", p), err) }
  return err
}

func (p *TRenderStepResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("raw_pixel_data", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:raw_pixel_data: ", p), err) }
  if err := p.RawPixelData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RawPixelData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:raw_pixel_data: ", p), err) }
  return err
}

func (p *TRenderStepResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("execution_time_ms", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:execution_time_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExecutionTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.execution_time_ms (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:execution_time_ms: ", p), err) }
  return err
}

func (p *TRenderStepResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("render_time_ms", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:render_time_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.RenderTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.render_time_ms (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:render_time_ms: ", p), err) }
  return err
}

func (p *TRenderStepResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("total_time_ms", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:total_time_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.TotalTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total_time_ms (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:total_time_ms: ", p), err) }
  return err
}

func (p *TRenderStepResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRenderStepResult_(%+v)", *p)
}

// Attributes:
//  - Create_
//  - Delete_
//  - ViewSqlEditor_
//  - Access_
type TDatabasePermissions struct {
  Create_ bool `thrift:"create_,1" db:"create_" json:"create_"`
  Delete_ bool `thrift:"delete_,2" db:"delete_" json:"delete_"`
  ViewSqlEditor_ bool `thrift:"view_sql_editor_,3" db:"view_sql_editor_" json:"view_sql_editor_"`
  Access_ bool `thrift:"access_,4" db:"access_" json:"access_"`
}

func NewTDatabasePermissions() *TDatabasePermissions {
  return &TDatabasePermissions{}
}


func (p *TDatabasePermissions) GetCreate_() bool {
  return p.Create_
}

func (p *TDatabasePermissions) GetDelete_() bool {
  return p.Delete_
}

func (p *TDatabasePermissions) GetViewSqlEditor_() bool {
  return p.ViewSqlEditor_
}

func (p *TDatabasePermissions) GetAccess_() bool {
  return p.Access_
}
func (p *TDatabasePermissions) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDatabasePermissions)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Create_ = v
}
  return nil
}

func (p *TDatabasePermissions)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Delete_ = v
}
  return nil
}

func (p *TDatabasePermissions)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ViewSqlEditor_ = v
}
  return nil
}

func (p *TDatabasePermissions)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Access_ = v
}
  return nil
}

func (p *TDatabasePermissions) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDatabasePermissions"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDatabasePermissions) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("create_", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:create_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Create_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.create_ (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:create_: ", p), err) }
  return err
}

func (p *TDatabasePermissions) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("delete_", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:delete_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Delete_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.delete_ (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:delete_: ", p), err) }
  return err
}

func (p *TDatabasePermissions) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("view_sql_editor_", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:view_sql_editor_: ", p), err) }
  if err := oprot.WriteBool(bool(p.ViewSqlEditor_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.view_sql_editor_ (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:view_sql_editor_: ", p), err) }
  return err
}

func (p *TDatabasePermissions) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("access_", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:access_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Access_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.access_ (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:access_: ", p), err) }
  return err
}

func (p *TDatabasePermissions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDatabasePermissions(%+v)", *p)
}

// Attributes:
//  - Create_
//  - Drop_
//  - Select_
//  - Insert_
//  - Update_
//  - Delete_
//  - Truncate_
//  - Alter_
type TTablePermissions struct {
  Create_ bool `thrift:"create_,1" db:"create_" json:"create_"`
  Drop_ bool `thrift:"drop_,2" db:"drop_" json:"drop_"`
  Select_ bool `thrift:"select_,3" db:"select_" json:"select_"`
  Insert_ bool `thrift:"insert_,4" db:"insert_" json:"insert_"`
  Update_ bool `thrift:"update_,5" db:"update_" json:"update_"`
  Delete_ bool `thrift:"delete_,6" db:"delete_" json:"delete_"`
  Truncate_ bool `thrift:"truncate_,7" db:"truncate_" json:"truncate_"`
  Alter_ bool `thrift:"alter_,8" db:"alter_" json:"alter_"`
}

func NewTTablePermissions() *TTablePermissions {
  return &TTablePermissions{}
}


func (p *TTablePermissions) GetCreate_() bool {
  return p.Create_
}

func (p *TTablePermissions) GetDrop_() bool {
  return p.Drop_
}

func (p *TTablePermissions) GetSelect_() bool {
  return p.Select_
}

func (p *TTablePermissions) GetInsert_() bool {
  return p.Insert_
}

func (p *TTablePermissions) GetUpdate_() bool {
  return p.Update_
}

func (p *TTablePermissions) GetDelete_() bool {
  return p.Delete_
}

func (p *TTablePermissions) GetTruncate_() bool {
  return p.Truncate_
}

func (p *TTablePermissions) GetAlter_() bool {
  return p.Alter_
}
func (p *TTablePermissions) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTablePermissions)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Create_ = v
}
  return nil
}

func (p *TTablePermissions)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Drop_ = v
}
  return nil
}

func (p *TTablePermissions)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Select_ = v
}
  return nil
}

func (p *TTablePermissions)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Insert_ = v
}
  return nil
}

func (p *TTablePermissions)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Update_ = v
}
  return nil
}

func (p *TTablePermissions)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Delete_ = v
}
  return nil
}

func (p *TTablePermissions)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Truncate_ = v
}
  return nil
}

func (p *TTablePermissions)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Alter_ = v
}
  return nil
}

func (p *TTablePermissions) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTablePermissions"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTablePermissions) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("create_", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:create_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Create_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.create_ (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:create_: ", p), err) }
  return err
}

func (p *TTablePermissions) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("drop_", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:drop_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Drop_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.drop_ (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:drop_: ", p), err) }
  return err
}

func (p *TTablePermissions) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("select_", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:select_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Select_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.select_ (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:select_: ", p), err) }
  return err
}

func (p *TTablePermissions) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("insert_", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:insert_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Insert_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.insert_ (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:insert_: ", p), err) }
  return err
}

func (p *TTablePermissions) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("update_", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:update_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Update_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.update_ (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:update_: ", p), err) }
  return err
}

func (p *TTablePermissions) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("delete_", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:delete_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Delete_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.delete_ (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:delete_: ", p), err) }
  return err
}

func (p *TTablePermissions) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("truncate_", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:truncate_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Truncate_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.truncate_ (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:truncate_: ", p), err) }
  return err
}

func (p *TTablePermissions) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("alter_", thrift.BOOL, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:alter_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Alter_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.alter_ (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:alter_: ", p), err) }
  return err
}

func (p *TTablePermissions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTablePermissions(%+v)", *p)
}

// Attributes:
//  - Create_
//  - Delete_
//  - View_
//  - Edit_
type TDashboardPermissions struct {
  Create_ bool `thrift:"create_,1" db:"create_" json:"create_"`
  Delete_ bool `thrift:"delete_,2" db:"delete_" json:"delete_"`
  View_ bool `thrift:"view_,3" db:"view_" json:"view_"`
  Edit_ bool `thrift:"edit_,4" db:"edit_" json:"edit_"`
}

func NewTDashboardPermissions() *TDashboardPermissions {
  return &TDashboardPermissions{}
}


func (p *TDashboardPermissions) GetCreate_() bool {
  return p.Create_
}

func (p *TDashboardPermissions) GetDelete_() bool {
  return p.Delete_
}

func (p *TDashboardPermissions) GetView_() bool {
  return p.View_
}

func (p *TDashboardPermissions) GetEdit_() bool {
  return p.Edit_
}
func (p *TDashboardPermissions) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDashboardPermissions)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Create_ = v
}
  return nil
}

func (p *TDashboardPermissions)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Delete_ = v
}
  return nil
}

func (p *TDashboardPermissions)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.View_ = v
}
  return nil
}

func (p *TDashboardPermissions)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Edit_ = v
}
  return nil
}

func (p *TDashboardPermissions) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDashboardPermissions"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDashboardPermissions) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("create_", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:create_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Create_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.create_ (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:create_: ", p), err) }
  return err
}

func (p *TDashboardPermissions) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("delete_", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:delete_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Delete_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.delete_ (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:delete_: ", p), err) }
  return err
}

func (p *TDashboardPermissions) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("view_", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:view_: ", p), err) }
  if err := oprot.WriteBool(bool(p.View_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.view_ (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:view_: ", p), err) }
  return err
}

func (p *TDashboardPermissions) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("edit_", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:edit_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Edit_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edit_ (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:edit_: ", p), err) }
  return err
}

func (p *TDashboardPermissions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDashboardPermissions(%+v)", *p)
}

// Attributes:
//  - Create_
//  - Drop_
//  - Select_
//  - Insert_
//  - Update_
//  - Delete_
type TViewPermissions struct {
  Create_ bool `thrift:"create_,1" db:"create_" json:"create_"`
  Drop_ bool `thrift:"drop_,2" db:"drop_" json:"drop_"`
  Select_ bool `thrift:"select_,3" db:"select_" json:"select_"`
  Insert_ bool `thrift:"insert_,4" db:"insert_" json:"insert_"`
  Update_ bool `thrift:"update_,5" db:"update_" json:"update_"`
  Delete_ bool `thrift:"delete_,6" db:"delete_" json:"delete_"`
}

func NewTViewPermissions() *TViewPermissions {
  return &TViewPermissions{}
}


func (p *TViewPermissions) GetCreate_() bool {
  return p.Create_
}

func (p *TViewPermissions) GetDrop_() bool {
  return p.Drop_
}

func (p *TViewPermissions) GetSelect_() bool {
  return p.Select_
}

func (p *TViewPermissions) GetInsert_() bool {
  return p.Insert_
}

func (p *TViewPermissions) GetUpdate_() bool {
  return p.Update_
}

func (p *TViewPermissions) GetDelete_() bool {
  return p.Delete_
}
func (p *TViewPermissions) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TViewPermissions)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Create_ = v
}
  return nil
}

func (p *TViewPermissions)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Drop_ = v
}
  return nil
}

func (p *TViewPermissions)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Select_ = v
}
  return nil
}

func (p *TViewPermissions)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Insert_ = v
}
  return nil
}

func (p *TViewPermissions)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Update_ = v
}
  return nil
}

func (p *TViewPermissions)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Delete_ = v
}
  return nil
}

func (p *TViewPermissions) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TViewPermissions"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TViewPermissions) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("create_", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:create_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Create_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.create_ (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:create_: ", p), err) }
  return err
}

func (p *TViewPermissions) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("drop_", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:drop_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Drop_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.drop_ (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:drop_: ", p), err) }
  return err
}

func (p *TViewPermissions) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("select_", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:select_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Select_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.select_ (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:select_: ", p), err) }
  return err
}

func (p *TViewPermissions) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("insert_", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:insert_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Insert_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.insert_ (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:insert_: ", p), err) }
  return err
}

func (p *TViewPermissions) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("update_", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:update_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Update_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.update_ (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:update_: ", p), err) }
  return err
}

func (p *TViewPermissions) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("delete_", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:delete_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Delete_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.delete_ (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:delete_: ", p), err) }
  return err
}

func (p *TViewPermissions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TViewPermissions(%+v)", *p)
}

// Attributes:
//  - Create_
//  - Drop_
//  - Alter_
//  - Usage_
type TServerPermissions struct {
  Create_ bool `thrift:"create_,1" db:"create_" json:"create_"`
  Drop_ bool `thrift:"drop_,2" db:"drop_" json:"drop_"`
  Alter_ bool `thrift:"alter_,3" db:"alter_" json:"alter_"`
  Usage_ bool `thrift:"usage_,4" db:"usage_" json:"usage_"`
}

func NewTServerPermissions() *TServerPermissions {
  return &TServerPermissions{}
}


func (p *TServerPermissions) GetCreate_() bool {
  return p.Create_
}

func (p *TServerPermissions) GetDrop_() bool {
  return p.Drop_
}

func (p *TServerPermissions) GetAlter_() bool {
  return p.Alter_
}

func (p *TServerPermissions) GetUsage_() bool {
  return p.Usage_
}
func (p *TServerPermissions) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TServerPermissions)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Create_ = v
}
  return nil
}

func (p *TServerPermissions)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Drop_ = v
}
  return nil
}

func (p *TServerPermissions)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Alter_ = v
}
  return nil
}

func (p *TServerPermissions)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Usage_ = v
}
  return nil
}

func (p *TServerPermissions) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TServerPermissions"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TServerPermissions) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("create_", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:create_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Create_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.create_ (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:create_: ", p), err) }
  return err
}

func (p *TServerPermissions) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("drop_", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:drop_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Drop_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.drop_ (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:drop_: ", p), err) }
  return err
}

func (p *TServerPermissions) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("alter_", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:alter_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Alter_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.alter_ (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:alter_: ", p), err) }
  return err
}

func (p *TServerPermissions) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("usage_", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:usage_: ", p), err) }
  if err := oprot.WriteBool(bool(p.Usage_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.usage_ (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:usage_: ", p), err) }
  return err
}

func (p *TServerPermissions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TServerPermissions(%+v)", *p)
}

// Attributes:
//  - DatabasePermissions_
//  - TablePermissions_
//  - DashboardPermissions_
//  - ViewPermissions_
//  - ServerPermissions_
type TDBObjectPermissions struct {
  DatabasePermissions_ *TDatabasePermissions `thrift:"database_permissions_,1" db:"database_permissions_" json:"database_permissions_,omitempty"`
  TablePermissions_ *TTablePermissions `thrift:"table_permissions_,2" db:"table_permissions_" json:"table_permissions_,omitempty"`
  DashboardPermissions_ *TDashboardPermissions `thrift:"dashboard_permissions_,3" db:"dashboard_permissions_" json:"dashboard_permissions_,omitempty"`
  ViewPermissions_ *TViewPermissions `thrift:"view_permissions_,4" db:"view_permissions_" json:"view_permissions_,omitempty"`
  ServerPermissions_ *TServerPermissions `thrift:"server_permissions_,5" db:"server_permissions_" json:"server_permissions_,omitempty"`
}

func NewTDBObjectPermissions() *TDBObjectPermissions {
  return &TDBObjectPermissions{}
}

var TDBObjectPermissions_DatabasePermissions__DEFAULT *TDatabasePermissions
func (p *TDBObjectPermissions) GetDatabasePermissions_() *TDatabasePermissions {
  if !p.IsSetDatabasePermissions_() {
    return TDBObjectPermissions_DatabasePermissions__DEFAULT
  }
return p.DatabasePermissions_
}
var TDBObjectPermissions_TablePermissions__DEFAULT *TTablePermissions
func (p *TDBObjectPermissions) GetTablePermissions_() *TTablePermissions {
  if !p.IsSetTablePermissions_() {
    return TDBObjectPermissions_TablePermissions__DEFAULT
  }
return p.TablePermissions_
}
var TDBObjectPermissions_DashboardPermissions__DEFAULT *TDashboardPermissions
func (p *TDBObjectPermissions) GetDashboardPermissions_() *TDashboardPermissions {
  if !p.IsSetDashboardPermissions_() {
    return TDBObjectPermissions_DashboardPermissions__DEFAULT
  }
return p.DashboardPermissions_
}
var TDBObjectPermissions_ViewPermissions__DEFAULT *TViewPermissions
func (p *TDBObjectPermissions) GetViewPermissions_() *TViewPermissions {
  if !p.IsSetViewPermissions_() {
    return TDBObjectPermissions_ViewPermissions__DEFAULT
  }
return p.ViewPermissions_
}
var TDBObjectPermissions_ServerPermissions__DEFAULT *TServerPermissions
func (p *TDBObjectPermissions) GetServerPermissions_() *TServerPermissions {
  if !p.IsSetServerPermissions_() {
    return TDBObjectPermissions_ServerPermissions__DEFAULT
  }
return p.ServerPermissions_
}
func (p *TDBObjectPermissions) CountSetFieldsTDBObjectPermissions() int {
  count := 0
  if (p.IsSetDatabasePermissions_()) {
    count++
  }
  if (p.IsSetTablePermissions_()) {
    count++
  }
  if (p.IsSetDashboardPermissions_()) {
    count++
  }
  if (p.IsSetViewPermissions_()) {
    count++
  }
  if (p.IsSetServerPermissions_()) {
    count++
  }
  return count

}

func (p *TDBObjectPermissions) IsSetDatabasePermissions_() bool {
  return p.DatabasePermissions_ != nil
}

func (p *TDBObjectPermissions) IsSetTablePermissions_() bool {
  return p.TablePermissions_ != nil
}

func (p *TDBObjectPermissions) IsSetDashboardPermissions_() bool {
  return p.DashboardPermissions_ != nil
}

func (p *TDBObjectPermissions) IsSetViewPermissions_() bool {
  return p.ViewPermissions_ != nil
}

func (p *TDBObjectPermissions) IsSetServerPermissions_() bool {
  return p.ServerPermissions_ != nil
}

func (p *TDBObjectPermissions) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDBObjectPermissions)  ReadField1(iprot thrift.TProtocol) error {
  p.DatabasePermissions_ = &TDatabasePermissions{}
  if err := p.DatabasePermissions_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DatabasePermissions_), err)
  }
  return nil
}

func (p *TDBObjectPermissions)  ReadField2(iprot thrift.TProtocol) error {
  p.TablePermissions_ = &TTablePermissions{}
  if err := p.TablePermissions_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TablePermissions_), err)
  }
  return nil
}

func (p *TDBObjectPermissions)  ReadField3(iprot thrift.TProtocol) error {
  p.DashboardPermissions_ = &TDashboardPermissions{}
  if err := p.DashboardPermissions_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DashboardPermissions_), err)
  }
  return nil
}

func (p *TDBObjectPermissions)  ReadField4(iprot thrift.TProtocol) error {
  p.ViewPermissions_ = &TViewPermissions{}
  if err := p.ViewPermissions_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ViewPermissions_), err)
  }
  return nil
}

func (p *TDBObjectPermissions)  ReadField5(iprot thrift.TProtocol) error {
  p.ServerPermissions_ = &TServerPermissions{}
  if err := p.ServerPermissions_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerPermissions_), err)
  }
  return nil
}

func (p *TDBObjectPermissions) Write(oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsTDBObjectPermissions(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("TDBObjectPermissions"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDBObjectPermissions) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDatabasePermissions_() {
    if err := oprot.WriteFieldBegin("database_permissions_", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:database_permissions_: ", p), err) }
    if err := p.DatabasePermissions_.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DatabasePermissions_), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:database_permissions_: ", p), err) }
  }
  return err
}

func (p *TDBObjectPermissions) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTablePermissions_() {
    if err := oprot.WriteFieldBegin("table_permissions_", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_permissions_: ", p), err) }
    if err := p.TablePermissions_.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TablePermissions_), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_permissions_: ", p), err) }
  }
  return err
}

func (p *TDBObjectPermissions) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDashboardPermissions_() {
    if err := oprot.WriteFieldBegin("dashboard_permissions_", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dashboard_permissions_: ", p), err) }
    if err := p.DashboardPermissions_.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DashboardPermissions_), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dashboard_permissions_: ", p), err) }
  }
  return err
}

func (p *TDBObjectPermissions) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetViewPermissions_() {
    if err := oprot.WriteFieldBegin("view_permissions_", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:view_permissions_: ", p), err) }
    if err := p.ViewPermissions_.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ViewPermissions_), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:view_permissions_: ", p), err) }
  }
  return err
}

func (p *TDBObjectPermissions) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetServerPermissions_() {
    if err := oprot.WriteFieldBegin("server_permissions_", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:server_permissions_: ", p), err) }
    if err := p.ServerPermissions_.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerPermissions_), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:server_permissions_: ", p), err) }
  }
  return err
}

func (p *TDBObjectPermissions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDBObjectPermissions(%+v)", *p)
}

// Attributes:
//  - ObjectName
//  - ObjectType
//  - Privs
//  - Grantee
//  - PrivilegeObjectType
type TDBObject struct {
  ObjectName string `thrift:"objectName,1" db:"objectName" json:"objectName"`
  ObjectType TDBObjectType `thrift:"objectType,2" db:"objectType" json:"objectType"`
  Privs []bool `thrift:"privs,3" db:"privs" json:"privs"`
  Grantee string `thrift:"grantee,4" db:"grantee" json:"grantee"`
  PrivilegeObjectType TDBObjectType `thrift:"privilegeObjectType,5" db:"privilegeObjectType" json:"privilegeObjectType"`
}

func NewTDBObject() *TDBObject {
  return &TDBObject{}
}


func (p *TDBObject) GetObjectName() string {
  return p.ObjectName
}

func (p *TDBObject) GetObjectType() TDBObjectType {
  return p.ObjectType
}

func (p *TDBObject) GetPrivs() []bool {
  return p.Privs
}

func (p *TDBObject) GetGrantee() string {
  return p.Grantee
}

func (p *TDBObject) GetPrivilegeObjectType() TDBObjectType {
  return p.PrivilegeObjectType
}
func (p *TDBObject) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDBObject)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ObjectName = v
}
  return nil
}

func (p *TDBObject)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TDBObjectType(v)
  p.ObjectType = temp
}
  return nil
}

func (p *TDBObject)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]bool, 0, size)
  p.Privs =  tSlice
  for i := 0; i < size; i ++ {
var _elem38 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem38 = v
}
    p.Privs = append(p.Privs, _elem38)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDBObject)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Grantee = v
}
  return nil
}

func (p *TDBObject)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := TDBObjectType(v)
  p.PrivilegeObjectType = temp
}
  return nil
}

func (p *TDBObject) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDBObject"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDBObject) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("objectName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:objectName: ", p), err) }
  if err := oprot.WriteString(string(p.ObjectName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.objectName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:objectName: ", p), err) }
  return err
}

func (p *TDBObject) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("objectType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:objectType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ObjectType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.objectType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:objectType: ", p), err) }
  return err
}

func (p *TDBObject) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privs", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:privs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.BOOL, len(p.Privs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Privs {
    if err := oprot.WriteBool(bool(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:privs: ", p), err) }
  return err
}

func (p *TDBObject) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("grantee", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:grantee: ", p), err) }
  if err := oprot.WriteString(string(p.Grantee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.grantee (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:grantee: ", p), err) }
  return err
}

func (p *TDBObject) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privilegeObjectType", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:privilegeObjectType: ", p), err) }
  if err := oprot.WriteI32(int32(p.PrivilegeObjectType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privilegeObjectType (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:privilegeObjectType: ", p), err) }
  return err
}

func (p *TDBObject) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDBObject(%+v)", *p)
}

// Attributes:
//  - Name
//  - IsUser
//  - Permissions
type TDashboardGrantees struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  IsUser bool `thrift:"is_user,2" db:"is_user" json:"is_user"`
  Permissions *TDashboardPermissions `thrift:"permissions,3" db:"permissions" json:"permissions"`
}

func NewTDashboardGrantees() *TDashboardGrantees {
  return &TDashboardGrantees{}
}


func (p *TDashboardGrantees) GetName() string {
  return p.Name
}

func (p *TDashboardGrantees) GetIsUser() bool {
  return p.IsUser
}
var TDashboardGrantees_Permissions_DEFAULT *TDashboardPermissions
func (p *TDashboardGrantees) GetPermissions() *TDashboardPermissions {
  if !p.IsSetPermissions() {
    return TDashboardGrantees_Permissions_DEFAULT
  }
return p.Permissions
}
func (p *TDashboardGrantees) IsSetPermissions() bool {
  return p.Permissions != nil
}

func (p *TDashboardGrantees) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDashboardGrantees)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *TDashboardGrantees)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IsUser = v
}
  return nil
}

func (p *TDashboardGrantees)  ReadField3(iprot thrift.TProtocol) error {
  p.Permissions = &TDashboardPermissions{}
  if err := p.Permissions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Permissions), err)
  }
  return nil
}

func (p *TDashboardGrantees) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDashboardGrantees"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDashboardGrantees) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *TDashboardGrantees) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_user", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:is_user: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsUser)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_user (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:is_user: ", p), err) }
  return err
}

func (p *TDashboardGrantees) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("permissions", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:permissions: ", p), err) }
  if err := p.Permissions.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Permissions), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:permissions: ", p), err) }
  return err
}

func (p *TDashboardGrantees) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDashboardGrantees(%+v)", *p)
}

// Attributes:
//  - DashboardName
//  - DashboardState
//  - ImageHash
//  - UpdateTime
//  - DashboardMetadata
//  - DashboardID
//  - DashboardOwner
//  - IsDashShared
//  - DashboardPermissions
type TDashboard struct {
  DashboardName string `thrift:"dashboard_name,1" db:"dashboard_name" json:"dashboard_name"`
  DashboardState string `thrift:"dashboard_state,2" db:"dashboard_state" json:"dashboard_state"`
  ImageHash string `thrift:"image_hash,3" db:"image_hash" json:"image_hash"`
  UpdateTime string `thrift:"update_time,4" db:"update_time" json:"update_time"`
  DashboardMetadata string `thrift:"dashboard_metadata,5" db:"dashboard_metadata" json:"dashboard_metadata"`
  DashboardID int32 `thrift:"dashboard_id,6" db:"dashboard_id" json:"dashboard_id"`
  DashboardOwner string `thrift:"dashboard_owner,7" db:"dashboard_owner" json:"dashboard_owner"`
  IsDashShared bool `thrift:"is_dash_shared,8" db:"is_dash_shared" json:"is_dash_shared"`
  DashboardPermissions *TDashboardPermissions `thrift:"dashboard_permissions,9" db:"dashboard_permissions" json:"dashboard_permissions"`
}

func NewTDashboard() *TDashboard {
  return &TDashboard{}
}


func (p *TDashboard) GetDashboardName() string {
  return p.DashboardName
}

func (p *TDashboard) GetDashboardState() string {
  return p.DashboardState
}

func (p *TDashboard) GetImageHash() string {
  return p.ImageHash
}

func (p *TDashboard) GetUpdateTime() string {
  return p.UpdateTime
}

func (p *TDashboard) GetDashboardMetadata() string {
  return p.DashboardMetadata
}

func (p *TDashboard) GetDashboardID() int32 {
  return p.DashboardID
}

func (p *TDashboard) GetDashboardOwner() string {
  return p.DashboardOwner
}

func (p *TDashboard) GetIsDashShared() bool {
  return p.IsDashShared
}
var TDashboard_DashboardPermissions_DEFAULT *TDashboardPermissions
func (p *TDashboard) GetDashboardPermissions() *TDashboardPermissions {
  if !p.IsSetDashboardPermissions() {
    return TDashboard_DashboardPermissions_DEFAULT
  }
return p.DashboardPermissions
}
func (p *TDashboard) IsSetDashboardPermissions() bool {
  return p.DashboardPermissions != nil
}

func (p *TDashboard) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDashboard)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DashboardName = v
}
  return nil
}

func (p *TDashboard)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DashboardState = v
}
  return nil
}

func (p *TDashboard)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ImageHash = v
}
  return nil
}

func (p *TDashboard)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UpdateTime = v
}
  return nil
}

func (p *TDashboard)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.DashboardMetadata = v
}
  return nil
}

func (p *TDashboard)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.DashboardID = v
}
  return nil
}

func (p *TDashboard)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.DashboardOwner = v
}
  return nil
}

func (p *TDashboard)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.IsDashShared = v
}
  return nil
}

func (p *TDashboard)  ReadField9(iprot thrift.TProtocol) error {
  p.DashboardPermissions = &TDashboardPermissions{}
  if err := p.DashboardPermissions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DashboardPermissions), err)
  }
  return nil
}

func (p *TDashboard) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDashboard"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDashboard) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dashboard_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dashboard_name: ", p), err) }
  if err := oprot.WriteString(string(p.DashboardName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dashboard_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dashboard_name: ", p), err) }
  return err
}

func (p *TDashboard) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dashboard_state", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dashboard_state: ", p), err) }
  if err := oprot.WriteString(string(p.DashboardState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dashboard_state (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dashboard_state: ", p), err) }
  return err
}

func (p *TDashboard) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_hash", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:image_hash: ", p), err) }
  if err := oprot.WriteString(string(p.ImageHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.image_hash (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:image_hash: ", p), err) }
  return err
}

func (p *TDashboard) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("update_time", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:update_time: ", p), err) }
  if err := oprot.WriteString(string(p.UpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.update_time (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:update_time: ", p), err) }
  return err
}

func (p *TDashboard) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dashboard_metadata", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:dashboard_metadata: ", p), err) }
  if err := oprot.WriteString(string(p.DashboardMetadata)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dashboard_metadata (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:dashboard_metadata: ", p), err) }
  return err
}

func (p *TDashboard) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dashboard_id", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:dashboard_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.DashboardID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dashboard_id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:dashboard_id: ", p), err) }
  return err
}

func (p *TDashboard) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dashboard_owner", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dashboard_owner: ", p), err) }
  if err := oprot.WriteString(string(p.DashboardOwner)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dashboard_owner (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dashboard_owner: ", p), err) }
  return err
}

func (p *TDashboard) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_dash_shared", thrift.BOOL, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:is_dash_shared: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsDashShared)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_dash_shared (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:is_dash_shared: ", p), err) }
  return err
}

func (p *TDashboard) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dashboard_permissions", thrift.STRUCT, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:dashboard_permissions: ", p), err) }
  if err := p.DashboardPermissions.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DashboardPermissions), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:dashboard_permissions: ", p), err) }
  return err
}

func (p *TDashboard) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDashboard(%+v)", *p)
}

// Attributes:
//  - Claims
type TLicenseInfo struct {
  Claims []string `thrift:"claims,1" db:"claims" json:"claims"`
}

func NewTLicenseInfo() *TLicenseInfo {
  return &TLicenseInfo{}
}


func (p *TLicenseInfo) GetClaims() []string {
  return p.Claims
}
func (p *TLicenseInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TLicenseInfo)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Claims =  tSlice
  for i := 0; i < size; i ++ {
var _elem39 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem39 = v
}
    p.Claims = append(p.Claims, _elem39)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TLicenseInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TLicenseInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TLicenseInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("claims", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:claims: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Claims)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Claims {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:claims: ", p), err) }
  return err
}

func (p *TLicenseInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TLicenseInfo(%+v)", *p)
}

// Attributes:
//  - User
//  - Database
//  - StartTime
//  - IsSuper
type TSessionInfo struct {
  User string `thrift:"user,1" db:"user" json:"user"`
  Database string `thrift:"database,2" db:"database" json:"database"`
  StartTime int64 `thrift:"start_time,3" db:"start_time" json:"start_time"`
  IsSuper bool `thrift:"is_super,4" db:"is_super" json:"is_super"`
}

func NewTSessionInfo() *TSessionInfo {
  return &TSessionInfo{}
}


func (p *TSessionInfo) GetUser() string {
  return p.User
}

func (p *TSessionInfo) GetDatabase() string {
  return p.Database
}

func (p *TSessionInfo) GetStartTime() int64 {
  return p.StartTime
}

func (p *TSessionInfo) GetIsSuper() bool {
  return p.IsSuper
}
func (p *TSessionInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSessionInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.User = v
}
  return nil
}

func (p *TSessionInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Database = v
}
  return nil
}

func (p *TSessionInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TSessionInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsSuper = v
}
  return nil
}

func (p *TSessionInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSessionInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSessionInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := oprot.WriteString(string(p.User)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *TSessionInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("database", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:database: ", p), err) }
  if err := oprot.WriteString(string(p.Database)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.database (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:database: ", p), err) }
  return err
}

func (p *TSessionInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("start_time", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:start_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:start_time: ", p), err) }
  return err
}

func (p *TSessionInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_super", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:is_super: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsSuper)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_super (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:is_super: ", p), err) }
  return err
}

func (p *TSessionInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSessionInfo(%+v)", *p)
}

// Attributes:
//  - Name
//  - Contents
type TGeoFileLayerInfo struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Contents TGeoFileLayerContents `thrift:"contents,2" db:"contents" json:"contents"`
}

func NewTGeoFileLayerInfo() *TGeoFileLayerInfo {
  return &TGeoFileLayerInfo{}
}


func (p *TGeoFileLayerInfo) GetName() string {
  return p.Name
}

func (p *TGeoFileLayerInfo) GetContents() TGeoFileLayerContents {
  return p.Contents
}
func (p *TGeoFileLayerInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGeoFileLayerInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *TGeoFileLayerInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TGeoFileLayerContents(v)
  p.Contents = temp
}
  return nil
}

func (p *TGeoFileLayerInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TGeoFileLayerInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGeoFileLayerInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *TGeoFileLayerInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contents", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:contents: ", p), err) }
  if err := oprot.WriteI32(int32(p.Contents)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contents (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:contents: ", p), err) }
  return err
}

func (p *TGeoFileLayerInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGeoFileLayerInfo(%+v)", *p)
}

// Attributes:
//  - TableID
//  - TableEpoch
//  - LeafIndex
type TTableEpochInfo struct {
  TableID int32 `thrift:"table_id,1" db:"table_id" json:"table_id"`
  TableEpoch int32 `thrift:"table_epoch,2" db:"table_epoch" json:"table_epoch"`
  LeafIndex int32 `thrift:"leaf_index,3" db:"leaf_index" json:"leaf_index"`
}

func NewTTableEpochInfo() *TTableEpochInfo {
  return &TTableEpochInfo{}
}


func (p *TTableEpochInfo) GetTableID() int32 {
  return p.TableID
}

func (p *TTableEpochInfo) GetTableEpoch() int32 {
  return p.TableEpoch
}

func (p *TTableEpochInfo) GetLeafIndex() int32 {
  return p.LeafIndex
}
func (p *TTableEpochInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTableEpochInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TableID = v
}
  return nil
}

func (p *TTableEpochInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableEpoch = v
}
  return nil
}

func (p *TTableEpochInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LeafIndex = v
}
  return nil
}

func (p *TTableEpochInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTableEpochInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTableEpochInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TableID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table_id: ", p), err) }
  return err
}

func (p *TTableEpochInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_epoch", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_epoch: ", p), err) }
  if err := oprot.WriteI32(int32(p.TableEpoch)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_epoch (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_epoch: ", p), err) }
  return err
}

func (p *TTableEpochInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("leaf_index", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:leaf_index: ", p), err) }
  if err := oprot.WriteI32(int32(p.LeafIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leaf_index (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:leaf_index: ", p), err) }
  return err
}

func (p *TTableEpochInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTableEpochInfo(%+v)", *p)
}

type OmniSci interface {
  // Parameters:
  //  - User
  //  - Passwd
  //  - Dbname
  Connect(ctx context.Context, user string, passwd string, dbname string) (r TSessionId, err error)
  // Parameters:
  //  - InputToken
  //  - Dbname
  Krb5Connect(ctx context.Context, inputToken string, dbname string) (r *TKrb5Session, err error)
  // Parameters:
  //  - Session
  Disconnect(ctx context.Context, session TSessionId) (err error)
  // Parameters:
  //  - Session
  //  - Dbname
  SwitchDatabase(ctx context.Context, session TSessionId, dbname string) (err error)
  // Parameters:
  //  - Session
  CloneSession(ctx context.Context, session TSessionId) (r TSessionId, err error)
  // Parameters:
  //  - Session
  GetServerStatus(ctx context.Context, session TSessionId) (r *TServerStatus, err error)
  // Parameters:
  //  - Session
  GetStatus(ctx context.Context, session TSessionId) (r []*TServerStatus, err error)
  // Parameters:
  //  - Session
  GetHardwareInfo(ctx context.Context, session TSessionId) (r *TClusterHardwareInfo, err error)
  // Parameters:
  //  - Session
  GetTables(ctx context.Context, session TSessionId) (r []string, err error)
  // Parameters:
  //  - Session
  GetPhysicalTables(ctx context.Context, session TSessionId) (r []string, err error)
  // Parameters:
  //  - Session
  GetViews(ctx context.Context, session TSessionId) (r []string, err error)
  // Parameters:
  //  - Session
  GetTablesMeta(ctx context.Context, session TSessionId) (r []*TTableMeta, err error)
  // Parameters:
  //  - Session
  //  - TableName
  GetTableDetails(ctx context.Context, session TSessionId, table_name string) (r *TTableDetails, err error)
  // Parameters:
  //  - Session
  //  - TableName
  GetInternalTableDetails(ctx context.Context, session TSessionId, table_name string) (r *TTableDetails, err error)
  // Parameters:
  //  - Session
  GetUsers(ctx context.Context, session TSessionId) (r []string, err error)
  // Parameters:
  //  - Session
  GetDatabases(ctx context.Context, session TSessionId) (r []*TDBInfo, err error)
  GetVersion(ctx context.Context) (r string, err error)
  // Parameters:
  //  - Session
  StartHeapProfile(ctx context.Context, session TSessionId) (err error)
  // Parameters:
  //  - Session
  StopHeapProfile(ctx context.Context, session TSessionId) (err error)
  // Parameters:
  //  - Session
  GetHeapProfile(ctx context.Context, session TSessionId) (r string, err error)
  // Parameters:
  //  - Session
  //  - MemoryLevel
  GetMemory(ctx context.Context, session TSessionId, memory_level string) (r []*TNodeMemoryInfo, err error)
  // Parameters:
  //  - Session
  ClearCPUMemory(ctx context.Context, session TSessionId) (err error)
  // Parameters:
  //  - Session
  ClearGpuMemory(ctx context.Context, session TSessionId) (err error)
  // Parameters:
  //  - ParentSession
  //  - LeafSession
  //  - StartTimeStr
  //  - Label
  SetCurSession(ctx context.Context, parent_session TSessionId, leaf_session TSessionId, start_time_str string, label string) (err error)
  // Parameters:
  //  - ParentSession
  //  - LeafSession
  //  - StartTimeStr
  //  - Label
  InvalidateCurSession(ctx context.Context, parent_session TSessionId, leaf_session TSessionId, start_time_str string, label string) (err error)
  // Parameters:
  //  - Session
  //  - DbID
  //  - TableID
  //  - NewEpoch_
  SetTableEpoch(ctx context.Context, session TSessionId, db_id int32, table_id int32, new_epoch int32) (err error)
  // Parameters:
  //  - Session
  //  - TableName
  //  - NewEpoch_
  SetTableEpochByName(ctx context.Context, session TSessionId, table_name string, new_epoch int32) (err error)
  // Parameters:
  //  - Session
  //  - DbID
  //  - TableID
  GetTableEpoch(ctx context.Context, session TSessionId, db_id int32, table_id int32) (r int32, err error)
  // Parameters:
  //  - Session
  //  - TableName
  GetTableEpochByName(ctx context.Context, session TSessionId, table_name string) (r int32, err error)
  // Parameters:
  //  - Session
  //  - DbID
  //  - TableID
  GetTableEpochs(ctx context.Context, session TSessionId, db_id int32, table_id int32) (r []*TTableEpochInfo, err error)
  // Parameters:
  //  - Session
  //  - DbID
  //  - TableEpochs
  SetTableEpochs(ctx context.Context, session TSessionId, db_id int32, table_epochs []*TTableEpochInfo) (err error)
  // Parameters:
  //  - Session
  GetSessionInfo(ctx context.Context, session TSessionId) (r *TSessionInfo, err error)
  // Parameters:
  //  - Session
  //  - Query
  //  - ColumnFormat
  //  - Nonce
  //  - FirstN
  //  - AtMostN
  SqlExecute(ctx context.Context, session TSessionId, query string, column_format bool, nonce string, first_n int32, at_most_n int32) (r *TQueryResult_, err error)
  // Parameters:
  //  - Session
  //  - Query
  //  - DeviceType
  //  - DeviceID
  //  - FirstN
  //  - TransportMethod
  SqlExecuteDf(ctx context.Context, session TSessionId, query string, device_type common.TDeviceType, device_id int32, first_n int32, transport_method TArrowTransport) (r *TDataFrame, err error)
  // Parameters:
  //  - Session
  //  - Query
  //  - DeviceID
  //  - FirstN
  SqlExecuteGdf(ctx context.Context, session TSessionId, query string, device_id int32, first_n int32) (r *TDataFrame, err error)
  // Parameters:
  //  - Session
  //  - Df
  //  - DeviceType
  //  - DeviceID
  DeallocateDf(ctx context.Context, session TSessionId, df *TDataFrame, device_type common.TDeviceType, device_id int32) (err error)
  // Parameters:
  //  - QuerySession
  //  - InterruptSession
  Interrupt(ctx context.Context, query_session TSessionId, interrupt_session TSessionId) (err error)
  // Parameters:
  //  - Session
  //  - Query
  SqlValidate(ctx context.Context, session TSessionId, query string) (r TRowDescriptor, err error)
  // Parameters:
  //  - Session
  //  - Sql
  //  - Cursor
  GetCompletionHints(ctx context.Context, session TSessionId, sql string, cursor int32) (r []*completion_hints.TCompletionHint, err error)
  // Parameters:
  //  - Session
  //  - Mode
  SetExecutionMode(ctx context.Context, session TSessionId, mode TExecuteMode) (err error)
  // Parameters:
  //  - Session
  //  - WidgetID
  //  - VegaJSON
  //  - CompressionLevel
  //  - Nonce
  RenderVega(ctx context.Context, session TSessionId, widget_id int64, vega_json string, compression_level int32, nonce string) (r *TRenderResult_, err error)
  // Parameters:
  //  - Session
  //  - WidgetID
  //  - Pixel
  //  - TableColNames
  //  - ColumnFormat
  //  - PixelRadius
  //  - Nonce
  GetResultRowForPixel(ctx context.Context, session TSessionId, widget_id int64, pixel *TPixel, table_col_names map[string][]string, column_format bool, pixelRadius int32, nonce string) (r *TPixelTableRowResult_, err error)
  // Parameters:
  //  - Session
  //  - DashboardID
  GetDashboard(ctx context.Context, session TSessionId, dashboard_id int32) (r *TDashboard, err error)
  // Parameters:
  //  - Session
  GetDashboards(ctx context.Context, session TSessionId) (r []*TDashboard, err error)
  // Parameters:
  //  - Session
  //  - DashboardName
  //  - DashboardState
  //  - ImageHash
  //  - DashboardMetadata
  CreateDashboard(ctx context.Context, session TSessionId, dashboard_name string, dashboard_state string, image_hash string, dashboard_metadata string) (r int32, err error)
  // Parameters:
  //  - Session
  //  - DashboardID
  //  - DashboardName
  //  - DashboardOwner
  //  - DashboardState
  //  - ImageHash
  //  - DashboardMetadata
  ReplaceDashboard(ctx context.Context, session TSessionId, dashboard_id int32, dashboard_name string, dashboard_owner string, dashboard_state string, image_hash string, dashboard_metadata string) (err error)
  // Parameters:
  //  - Session
  //  - DashboardID
  DeleteDashboard(ctx context.Context, session TSessionId, dashboard_id int32) (err error)
  // Parameters:
  //  - Session
  //  - DashboardIds
  //  - Groups
  //  - Permissions
  ShareDashboards(ctx context.Context, session TSessionId, dashboard_ids []int32, groups []string, permissions *TDashboardPermissions) (err error)
  // Parameters:
  //  - Session
  //  - DashboardIds
  DeleteDashboards(ctx context.Context, session TSessionId, dashboard_ids []int32) (err error)
  // Parameters:
  //  - Session
  //  - DashboardID
  //  - Groups
  //  - Objects
  //  - Permissions
  //  - GrantRole
  ShareDashboard(ctx context.Context, session TSessionId, dashboard_id int32, groups []string, objects []string, permissions *TDashboardPermissions, grant_role bool) (err error)
  // Parameters:
  //  - Session
  //  - DashboardID
  //  - Groups
  //  - Objects
  //  - Permissions
  UnshareDashboard(ctx context.Context, session TSessionId, dashboard_id int32, groups []string, objects []string, permissions *TDashboardPermissions) (err error)
  // Parameters:
  //  - Session
  //  - DashboardIds
  //  - Groups
  //  - Permissions
  UnshareDashboards(ctx context.Context, session TSessionId, dashboard_ids []int32, groups []string, permissions *TDashboardPermissions) (err error)
  // Parameters:
  //  - Session
  //  - DashboardID
  GetDashboardGrantees(ctx context.Context, session TSessionId, dashboard_id int32) (r []*TDashboardGrantees, err error)
  // Parameters:
  //  - Session
  //  - Link
  GetLinkView(ctx context.Context, session TSessionId, link string) (r *TFrontendView, err error)
  // Parameters:
  //  - Session
  //  - ViewState
  //  - ViewMetadata
  CreateLink(ctx context.Context, session TSessionId, view_state string, view_metadata string) (r string, err error)
  // Parameters:
  //  - Session
  //  - TableName
  //  - Rows
  //  - ColumnNames
  LoadTableBinary(ctx context.Context, session TSessionId, table_name string, rows []*TRow, column_names []string) (err error)
  // Parameters:
  //  - Session
  //  - TableName
  //  - Cols
  //  - ColumnNames
  LoadTableBinaryColumnar(ctx context.Context, session TSessionId, table_name string, cols []*TColumn, column_names []string) (err error)
  // Parameters:
  //  - Session
  //  - TableName
  //  - ArrowStream
  //  - UseColumnNames
  LoadTableBinaryArrow(ctx context.Context, session TSessionId, table_name string, arrow_stream []byte, use_column_names bool) (err error)
  // Parameters:
  //  - Session
  //  - TableName
  //  - Rows
  //  - ColumnNames
  LoadTable(ctx context.Context, session TSessionId, table_name string, rows []*TStringRow, column_names []string) (err error)
  // Parameters:
  //  - Session
  //  - FileName
  //  - CopyParams
  DetectColumnTypes(ctx context.Context, session TSessionId, file_name string, copy_params *TCopyParams) (r *TDetectResult_, err error)
  // Parameters:
  //  - Session
  //  - TableName
  //  - RowDesc
  //  - FileType
  //  - CreateParams
  CreateTable(ctx context.Context, session TSessionId, table_name string, row_desc TRowDescriptor, file_type TFileType, create_params *TCreateParams) (err error)
  // Parameters:
  //  - Session
  //  - TableName
  //  - FileName
  //  - CopyParams
  ImportTable(ctx context.Context, session TSessionId, table_name string, file_name string, copy_params *TCopyParams) (err error)
  // Parameters:
  //  - Session
  //  - TableName
  //  - FileName
  //  - CopyParams
  //  - RowDesc
  //  - CreateParams
  ImportGeoTable(ctx context.Context, session TSessionId, table_name string, file_name string, copy_params *TCopyParams, row_desc TRowDescriptor, create_params *TCreateParams) (err error)
  // Parameters:
  //  - Session
  //  - ImportID
  ImportTableStatus(ctx context.Context, session TSessionId, import_id string) (r *TImportStatus, err error)
  // Parameters:
  //  - Session
  //  - ArchivePath
  //  - CopyParams
  GetFirstGeoFileInArchive(ctx context.Context, session TSessionId, archive_path string, copy_params *TCopyParams) (r string, err error)
  // Parameters:
  //  - Session
  //  - ArchivePath
  //  - CopyParams
  GetAllFilesInArchive(ctx context.Context, session TSessionId, archive_path string, copy_params *TCopyParams) (r []string, err error)
  // Parameters:
  //  - Session
  //  - FileName
  //  - CopyParams
  GetLayersInGeoFile(ctx context.Context, session TSessionId, file_name string, copy_params *TCopyParams) (r []*TGeoFileLayerInfo, err error)
  // Parameters:
  //  - Session
  //  - Query
  QueryGetOuterFragmentCount(ctx context.Context, session TSessionId, query string) (r int64, err error)
  // Parameters:
  //  - Session
  //  - TableID
  CheckTableConsistency(ctx context.Context, session TSessionId, table_id int32) (r *TTableMeta, err error)
  // Parameters:
  //  - LeafSession
  //  - ParentSession
  //  - QueryRa
  //  - StartTimeStr
  //  - JustExplain
  //  - OuterFragmentIndices
  StartQuery(ctx context.Context, leaf_session TSessionId, parent_session TSessionId, query_ra string, start_time_str string, just_explain bool, outer_fragment_indices []int64) (r *TPendingQuery, err error)
  // Parameters:
  //  - PendingQuery
  //  - SubqueryID
  //  - StartTimeStr
  ExecuteQueryStep(ctx context.Context, pending_query *TPendingQuery, subquery_id TSubqueryId, start_time_str string) (r *TStepResult_, err error)
  // Parameters:
  //  - SerializedRows
  //  - RowDesc
  //  - QueryID
  //  - SubqueryID
  //  - IsFinalSubqueryResult_
  BroadcastSerializedRows(ctx context.Context, serialized_rows *serialized_result_set.TSerializedRows, row_desc TRowDescriptor, query_id TQueryId, subquery_id TSubqueryId, is_final_subquery_result bool) (err error)
  // Parameters:
  //  - Session
  //  - WidgetID
  //  - NodeIdx
  //  - VegaJSON
  StartRenderQuery(ctx context.Context, session TSessionId, widget_id int64, node_idx int16, vega_json string) (r *TPendingRenderQuery, err error)
  // Parameters:
  //  - PendingRender
  //  - MergedData
  ExecuteNextRenderStep(ctx context.Context, pending_render *TPendingRenderQuery, merged_data TRenderAggDataMap) (r *TRenderStepResult_, err error)
  // Parameters:
  //  - Session
  //  - InsertData
  InsertData(ctx context.Context, session TSessionId, insert_data *TInsertData) (err error)
  // Parameters:
  //  - Session
  //  - TableID
  Checkpoint(ctx context.Context, session TSessionId, table_id int32) (err error)
  // Parameters:
  //  - Session
  GetRoles(ctx context.Context, session TSessionId) (r []string, err error)
  // Parameters:
  //  - Session
  //  - RoleName
  GetDbObjectsForGrantee(ctx context.Context, session TSessionId, roleName string) (r []*TDBObject, err error)
  // Parameters:
  //  - Session
  //  - ObjectName
  //  - Type
  GetDbObjectPrivs(ctx context.Context, session TSessionId, objectName string, type_a1 TDBObjectType) (r []*TDBObject, err error)
  // Parameters:
  //  - Session
  //  - UserName
  GetAllRolesForUser(ctx context.Context, session TSessionId, userName string) (r []string, err error)
  // Parameters:
  //  - Session
  //  - GranteeName
  //  - RoleName
  HasRole(ctx context.Context, session TSessionId, granteeName string, roleName string) (r bool, err error)
  // Parameters:
  //  - Session
  //  - GranteeName
  //  - ObjectName
  //  - ObjectType
  //  - Permissions
  HasObjectPrivilege(ctx context.Context, session TSessionId, granteeName string, ObjectName string, objectType TDBObjectType, permissions *TDBObjectPermissions) (r bool, err error)
  // Parameters:
  //  - Session
  //  - Key
  //  - Nonce
  SetLicenseKey(ctx context.Context, session TSessionId, key string, nonce string) (r *TLicenseInfo, err error)
  // Parameters:
  //  - Session
  //  - Nonce
  GetLicenseClaims(ctx context.Context, session TSessionId, nonce string) (r *TLicenseInfo, err error)
  // Parameters:
  //  - Session
  GetDeviceParameters(ctx context.Context, session TSessionId) (r map[string]string, err error)
  // Parameters:
  //  - Session
  //  - Udfs
  //  - Udtfs
  //  - DeviceIrMap
  RegisterRuntimeExtensionFunctions(ctx context.Context, session TSessionId, udfs []*extension_functions.TUserDefinedFunction, udtfs []*extension_functions.TUserDefinedTableFunction, device_ir_map map[string]string) (err error)
}

type OmniSciClient struct {
  c thrift.TClient
}

func NewOmniSciClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *OmniSciClient {
  return &OmniSciClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewOmniSciClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *OmniSciClient {
  return &OmniSciClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewOmniSciClient(c thrift.TClient) *OmniSciClient {
  return &OmniSciClient{
    c: c,
  }
}

func (p *OmniSciClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - User
//  - Passwd
//  - Dbname
func (p *OmniSciClient) Connect(ctx context.Context, user string, passwd string, dbname string) (r TSessionId, err error) {
  var _args40 OmniSciConnectArgs
  _args40.User = user
  _args40.Passwd = passwd
  _args40.Dbname = dbname
  var _result41 OmniSciConnectResult
  if err = p.Client_().Call(ctx, "connect", &_args40, &_result41); err != nil {
    return
  }
  switch {
  case _result41.E!= nil:
    return r, _result41.E
  }

  return _result41.GetSuccess(), nil
}

// Parameters:
//  - InputToken
//  - Dbname
func (p *OmniSciClient) Krb5Connect(ctx context.Context, inputToken string, dbname string) (r *TKrb5Session, err error) {
  var _args42 OmniSciKrb5ConnectArgs
  _args42.InputToken = inputToken
  _args42.Dbname = dbname
  var _result43 OmniSciKrb5ConnectResult
  if err = p.Client_().Call(ctx, "krb5_connect", &_args42, &_result43); err != nil {
    return
  }
  switch {
  case _result43.E!= nil:
    return r, _result43.E
  }

  return _result43.GetSuccess(), nil
}

// Parameters:
//  - Session
func (p *OmniSciClient) Disconnect(ctx context.Context, session TSessionId) (err error) {
  var _args44 OmniSciDisconnectArgs
  _args44.Session = session
  var _result45 OmniSciDisconnectResult
  if err = p.Client_().Call(ctx, "disconnect", &_args44, &_result45); err != nil {
    return
  }
  switch {
  case _result45.E!= nil:
    return _result45.E
  }

  return nil
}

// Parameters:
//  - Session
//  - Dbname
func (p *OmniSciClient) SwitchDatabase(ctx context.Context, session TSessionId, dbname string) (err error) {
  var _args46 OmniSciSwitchDatabaseArgs
  _args46.Session = session
  _args46.Dbname = dbname
  var _result47 OmniSciSwitchDatabaseResult
  if err = p.Client_().Call(ctx, "switch_database", &_args46, &_result47); err != nil {
    return
  }
  switch {
  case _result47.E!= nil:
    return _result47.E
  }

  return nil
}

// Parameters:
//  - Session
func (p *OmniSciClient) CloneSession(ctx context.Context, session TSessionId) (r TSessionId, err error) {
  var _args48 OmniSciCloneSessionArgs
  _args48.Session = session
  var _result49 OmniSciCloneSessionResult
  if err = p.Client_().Call(ctx, "clone_session", &_args48, &_result49); err != nil {
    return
  }
  switch {
  case _result49.E!= nil:
    return r, _result49.E
  }

  return _result49.GetSuccess(), nil
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetServerStatus(ctx context.Context, session TSessionId) (r *TServerStatus, err error) {
  var _args50 OmniSciGetServerStatusArgs
  _args50.Session = session
  var _result51 OmniSciGetServerStatusResult
  if err = p.Client_().Call(ctx, "get_server_status", &_args50, &_result51); err != nil {
    return
  }
  switch {
  case _result51.E!= nil:
    return r, _result51.E
  }

  return _result51.GetSuccess(), nil
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetStatus(ctx context.Context, session TSessionId) (r []*TServerStatus, err error) {
  var _args52 OmniSciGetStatusArgs
  _args52.Session = session
  var _result53 OmniSciGetStatusResult
  if err = p.Client_().Call(ctx, "get_status", &_args52, &_result53); err != nil {
    return
  }
  switch {
  case _result53.E!= nil:
    return r, _result53.E
  }

  return _result53.GetSuccess(), nil
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetHardwareInfo(ctx context.Context, session TSessionId) (r *TClusterHardwareInfo, err error) {
  var _args54 OmniSciGetHardwareInfoArgs
  _args54.Session = session
  var _result55 OmniSciGetHardwareInfoResult
  if err = p.Client_().Call(ctx, "get_hardware_info", &_args54, &_result55); err != nil {
    return
  }
  switch {
  case _result55.E!= nil:
    return r, _result55.E
  }

  return _result55.GetSuccess(), nil
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetTables(ctx context.Context, session TSessionId) (r []string, err error) {
  var _args56 OmniSciGetTablesArgs
  _args56.Session = session
  var _result57 OmniSciGetTablesResult
  if err = p.Client_().Call(ctx, "get_tables", &_args56, &_result57); err != nil {
    return
  }
  switch {
  case _result57.E!= nil:
    return r, _result57.E
  }

  return _result57.GetSuccess(), nil
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetPhysicalTables(ctx context.Context, session TSessionId) (r []string, err error) {
  var _args58 OmniSciGetPhysicalTablesArgs
  _args58.Session = session
  var _result59 OmniSciGetPhysicalTablesResult
  if err = p.Client_().Call(ctx, "get_physical_tables", &_args58, &_result59); err != nil {
    return
  }
  switch {
  case _result59.E!= nil:
    return r, _result59.E
  }

  return _result59.GetSuccess(), nil
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetViews(ctx context.Context, session TSessionId) (r []string, err error) {
  var _args60 OmniSciGetViewsArgs
  _args60.Session = session
  var _result61 OmniSciGetViewsResult
  if err = p.Client_().Call(ctx, "get_views", &_args60, &_result61); err != nil {
    return
  }
  switch {
  case _result61.E!= nil:
    return r, _result61.E
  }

  return _result61.GetSuccess(), nil
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetTablesMeta(ctx context.Context, session TSessionId) (r []*TTableMeta, err error) {
  var _args62 OmniSciGetTablesMetaArgs
  _args62.Session = session
  var _result63 OmniSciGetTablesMetaResult
  if err = p.Client_().Call(ctx, "get_tables_meta", &_args62, &_result63); err != nil {
    return
  }
  switch {
  case _result63.E!= nil:
    return r, _result63.E
  }

  return _result63.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - TableName
func (p *OmniSciClient) GetTableDetails(ctx context.Context, session TSessionId, table_name string) (r *TTableDetails, err error) {
  var _args64 OmniSciGetTableDetailsArgs
  _args64.Session = session
  _args64.TableName = table_name
  var _result65 OmniSciGetTableDetailsResult
  if err = p.Client_().Call(ctx, "get_table_details", &_args64, &_result65); err != nil {
    return
  }
  switch {
  case _result65.E!= nil:
    return r, _result65.E
  }

  return _result65.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - TableName
func (p *OmniSciClient) GetInternalTableDetails(ctx context.Context, session TSessionId, table_name string) (r *TTableDetails, err error) {
  var _args66 OmniSciGetInternalTableDetailsArgs
  _args66.Session = session
  _args66.TableName = table_name
  var _result67 OmniSciGetInternalTableDetailsResult
  if err = p.Client_().Call(ctx, "get_internal_table_details", &_args66, &_result67); err != nil {
    return
  }
  switch {
  case _result67.E!= nil:
    return r, _result67.E
  }

  return _result67.GetSuccess(), nil
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetUsers(ctx context.Context, session TSessionId) (r []string, err error) {
  var _args68 OmniSciGetUsersArgs
  _args68.Session = session
  var _result69 OmniSciGetUsersResult
  if err = p.Client_().Call(ctx, "get_users", &_args68, &_result69); err != nil {
    return
  }
  switch {
  case _result69.E!= nil:
    return r, _result69.E
  }

  return _result69.GetSuccess(), nil
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetDatabases(ctx context.Context, session TSessionId) (r []*TDBInfo, err error) {
  var _args70 OmniSciGetDatabasesArgs
  _args70.Session = session
  var _result71 OmniSciGetDatabasesResult
  if err = p.Client_().Call(ctx, "get_databases", &_args70, &_result71); err != nil {
    return
  }
  switch {
  case _result71.E!= nil:
    return r, _result71.E
  }

  return _result71.GetSuccess(), nil
}

func (p *OmniSciClient) GetVersion(ctx context.Context) (r string, err error) {
  var _args72 OmniSciGetVersionArgs
  var _result73 OmniSciGetVersionResult
  if err = p.Client_().Call(ctx, "get_version", &_args72, &_result73); err != nil {
    return
  }
  switch {
  case _result73.E!= nil:
    return r, _result73.E
  }

  return _result73.GetSuccess(), nil
}

// Parameters:
//  - Session
func (p *OmniSciClient) StartHeapProfile(ctx context.Context, session TSessionId) (err error) {
  var _args74 OmniSciStartHeapProfileArgs
  _args74.Session = session
  var _result75 OmniSciStartHeapProfileResult
  if err = p.Client_().Call(ctx, "start_heap_profile", &_args74, &_result75); err != nil {
    return
  }
  switch {
  case _result75.E!= nil:
    return _result75.E
  }

  return nil
}

// Parameters:
//  - Session
func (p *OmniSciClient) StopHeapProfile(ctx context.Context, session TSessionId) (err error) {
  var _args76 OmniSciStopHeapProfileArgs
  _args76.Session = session
  var _result77 OmniSciStopHeapProfileResult
  if err = p.Client_().Call(ctx, "stop_heap_profile", &_args76, &_result77); err != nil {
    return
  }
  switch {
  case _result77.E!= nil:
    return _result77.E
  }

  return nil
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetHeapProfile(ctx context.Context, session TSessionId) (r string, err error) {
  var _args78 OmniSciGetHeapProfileArgs
  _args78.Session = session
  var _result79 OmniSciGetHeapProfileResult
  if err = p.Client_().Call(ctx, "get_heap_profile", &_args78, &_result79); err != nil {
    return
  }
  switch {
  case _result79.E!= nil:
    return r, _result79.E
  }

  return _result79.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - MemoryLevel
func (p *OmniSciClient) GetMemory(ctx context.Context, session TSessionId, memory_level string) (r []*TNodeMemoryInfo, err error) {
  var _args80 OmniSciGetMemoryArgs
  _args80.Session = session
  _args80.MemoryLevel = memory_level
  var _result81 OmniSciGetMemoryResult
  if err = p.Client_().Call(ctx, "get_memory", &_args80, &_result81); err != nil {
    return
  }
  switch {
  case _result81.E!= nil:
    return r, _result81.E
  }

  return _result81.GetSuccess(), nil
}

// Parameters:
//  - Session
func (p *OmniSciClient) ClearCPUMemory(ctx context.Context, session TSessionId) (err error) {
  var _args82 OmniSciClearCPUMemoryArgs
  _args82.Session = session
  var _result83 OmniSciClearCPUMemoryResult
  if err = p.Client_().Call(ctx, "clear_cpu_memory", &_args82, &_result83); err != nil {
    return
  }
  switch {
  case _result83.E!= nil:
    return _result83.E
  }

  return nil
}

// Parameters:
//  - Session
func (p *OmniSciClient) ClearGpuMemory(ctx context.Context, session TSessionId) (err error) {
  var _args84 OmniSciClearGpuMemoryArgs
  _args84.Session = session
  var _result85 OmniSciClearGpuMemoryResult
  if err = p.Client_().Call(ctx, "clear_gpu_memory", &_args84, &_result85); err != nil {
    return
  }
  switch {
  case _result85.E!= nil:
    return _result85.E
  }

  return nil
}

// Parameters:
//  - ParentSession
//  - LeafSession
//  - StartTimeStr
//  - Label
func (p *OmniSciClient) SetCurSession(ctx context.Context, parent_session TSessionId, leaf_session TSessionId, start_time_str string, label string) (err error) {
  var _args86 OmniSciSetCurSessionArgs
  _args86.ParentSession = parent_session
  _args86.LeafSession = leaf_session
  _args86.StartTimeStr = start_time_str
  _args86.Label = label
  var _result87 OmniSciSetCurSessionResult
  if err = p.Client_().Call(ctx, "set_cur_session", &_args86, &_result87); err != nil {
    return
  }
  switch {
  case _result87.E!= nil:
    return _result87.E
  }

  return nil
}

// Parameters:
//  - ParentSession
//  - LeafSession
//  - StartTimeStr
//  - Label
func (p *OmniSciClient) InvalidateCurSession(ctx context.Context, parent_session TSessionId, leaf_session TSessionId, start_time_str string, label string) (err error) {
  var _args88 OmniSciInvalidateCurSessionArgs
  _args88.ParentSession = parent_session
  _args88.LeafSession = leaf_session
  _args88.StartTimeStr = start_time_str
  _args88.Label = label
  var _result89 OmniSciInvalidateCurSessionResult
  if err = p.Client_().Call(ctx, "invalidate_cur_session", &_args88, &_result89); err != nil {
    return
  }
  switch {
  case _result89.E!= nil:
    return _result89.E
  }

  return nil
}

// Parameters:
//  - Session
//  - DbID
//  - TableID
//  - NewEpoch_
func (p *OmniSciClient) SetTableEpoch(ctx context.Context, session TSessionId, db_id int32, table_id int32, new_epoch int32) (err error) {
  var _args90 OmniSciSetTableEpochArgs
  _args90.Session = session
  _args90.DbID = db_id
  _args90.TableID = table_id
  _args90.NewEpoch_ = new_epoch
  var _result91 OmniSciSetTableEpochResult
  if err = p.Client_().Call(ctx, "set_table_epoch", &_args90, &_result91); err != nil {
    return
  }
  switch {
  case _result91.E!= nil:
    return _result91.E
  }

  return nil
}

// Parameters:
//  - Session
//  - TableName
//  - NewEpoch_
func (p *OmniSciClient) SetTableEpochByName(ctx context.Context, session TSessionId, table_name string, new_epoch int32) (err error) {
  var _args92 OmniSciSetTableEpochByNameArgs
  _args92.Session = session
  _args92.TableName = table_name
  _args92.NewEpoch_ = new_epoch
  var _result93 OmniSciSetTableEpochByNameResult
  if err = p.Client_().Call(ctx, "set_table_epoch_by_name", &_args92, &_result93); err != nil {
    return
  }
  switch {
  case _result93.E!= nil:
    return _result93.E
  }

  return nil
}

// Parameters:
//  - Session
//  - DbID
//  - TableID
func (p *OmniSciClient) GetTableEpoch(ctx context.Context, session TSessionId, db_id int32, table_id int32) (r int32, err error) {
  var _args94 OmniSciGetTableEpochArgs
  _args94.Session = session
  _args94.DbID = db_id
  _args94.TableID = table_id
  var _result95 OmniSciGetTableEpochResult
  if err = p.Client_().Call(ctx, "get_table_epoch", &_args94, &_result95); err != nil {
    return
  }
  return _result95.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - TableName
func (p *OmniSciClient) GetTableEpochByName(ctx context.Context, session TSessionId, table_name string) (r int32, err error) {
  var _args96 OmniSciGetTableEpochByNameArgs
  _args96.Session = session
  _args96.TableName = table_name
  var _result97 OmniSciGetTableEpochByNameResult
  if err = p.Client_().Call(ctx, "get_table_epoch_by_name", &_args96, &_result97); err != nil {
    return
  }
  return _result97.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - DbID
//  - TableID
func (p *OmniSciClient) GetTableEpochs(ctx context.Context, session TSessionId, db_id int32, table_id int32) (r []*TTableEpochInfo, err error) {
  var _args98 OmniSciGetTableEpochsArgs
  _args98.Session = session
  _args98.DbID = db_id
  _args98.TableID = table_id
  var _result99 OmniSciGetTableEpochsResult
  if err = p.Client_().Call(ctx, "get_table_epochs", &_args98, &_result99); err != nil {
    return
  }
  return _result99.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - DbID
//  - TableEpochs
func (p *OmniSciClient) SetTableEpochs(ctx context.Context, session TSessionId, db_id int32, table_epochs []*TTableEpochInfo) (err error) {
  var _args100 OmniSciSetTableEpochsArgs
  _args100.Session = session
  _args100.DbID = db_id
  _args100.TableEpochs = table_epochs
  var _result101 OmniSciSetTableEpochsResult
  if err = p.Client_().Call(ctx, "set_table_epochs", &_args100, &_result101); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetSessionInfo(ctx context.Context, session TSessionId) (r *TSessionInfo, err error) {
  var _args102 OmniSciGetSessionInfoArgs
  _args102.Session = session
  var _result103 OmniSciGetSessionInfoResult
  if err = p.Client_().Call(ctx, "get_session_info", &_args102, &_result103); err != nil {
    return
  }
  switch {
  case _result103.E!= nil:
    return r, _result103.E
  }

  return _result103.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - Query
//  - ColumnFormat
//  - Nonce
//  - FirstN
//  - AtMostN
func (p *OmniSciClient) SqlExecute(ctx context.Context, session TSessionId, query string, column_format bool, nonce string, first_n int32, at_most_n int32) (r *TQueryResult_, err error) {
  var _args104 OmniSciSqlExecuteArgs
  _args104.Session = session
  _args104.Query = query
  _args104.ColumnFormat = column_format
  _args104.Nonce = nonce
  _args104.FirstN = first_n
  _args104.AtMostN = at_most_n
  var _result105 OmniSciSqlExecuteResult
  if err = p.Client_().Call(ctx, "sql_execute", &_args104, &_result105); err != nil {
    return
  }
  switch {
  case _result105.E!= nil:
    return r, _result105.E
  }

  return _result105.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - Query
//  - DeviceType
//  - DeviceID
//  - FirstN
//  - TransportMethod
func (p *OmniSciClient) SqlExecuteDf(ctx context.Context, session TSessionId, query string, device_type common.TDeviceType, device_id int32, first_n int32, transport_method TArrowTransport) (r *TDataFrame, err error) {
  var _args106 OmniSciSqlExecuteDfArgs
  _args106.Session = session
  _args106.Query = query
  _args106.DeviceType = device_type
  _args106.DeviceID = device_id
  _args106.FirstN = first_n
  _args106.TransportMethod = transport_method
  var _result107 OmniSciSqlExecuteDfResult
  if err = p.Client_().Call(ctx, "sql_execute_df", &_args106, &_result107); err != nil {
    return
  }
  switch {
  case _result107.E!= nil:
    return r, _result107.E
  }

  return _result107.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - Query
//  - DeviceID
//  - FirstN
func (p *OmniSciClient) SqlExecuteGdf(ctx context.Context, session TSessionId, query string, device_id int32, first_n int32) (r *TDataFrame, err error) {
  var _args108 OmniSciSqlExecuteGdfArgs
  _args108.Session = session
  _args108.Query = query
  _args108.DeviceID = device_id
  _args108.FirstN = first_n
  var _result109 OmniSciSqlExecuteGdfResult
  if err = p.Client_().Call(ctx, "sql_execute_gdf", &_args108, &_result109); err != nil {
    return
  }
  switch {
  case _result109.E!= nil:
    return r, _result109.E
  }

  return _result109.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - Df
//  - DeviceType
//  - DeviceID
func (p *OmniSciClient) DeallocateDf(ctx context.Context, session TSessionId, df *TDataFrame, device_type common.TDeviceType, device_id int32) (err error) {
  var _args110 OmniSciDeallocateDfArgs
  _args110.Session = session
  _args110.Df = df
  _args110.DeviceType = device_type
  _args110.DeviceID = device_id
  var _result111 OmniSciDeallocateDfResult
  if err = p.Client_().Call(ctx, "deallocate_df", &_args110, &_result111); err != nil {
    return
  }
  switch {
  case _result111.E!= nil:
    return _result111.E
  }

  return nil
}

// Parameters:
//  - QuerySession
//  - InterruptSession
func (p *OmniSciClient) Interrupt(ctx context.Context, query_session TSessionId, interrupt_session TSessionId) (err error) {
  var _args112 OmniSciInterruptArgs
  _args112.QuerySession = query_session
  _args112.InterruptSession = interrupt_session
  var _result113 OmniSciInterruptResult
  if err = p.Client_().Call(ctx, "interrupt", &_args112, &_result113); err != nil {
    return
  }
  switch {
  case _result113.E!= nil:
    return _result113.E
  }

  return nil
}

// Parameters:
//  - Session
//  - Query
func (p *OmniSciClient) SqlValidate(ctx context.Context, session TSessionId, query string) (r TRowDescriptor, err error) {
  var _args114 OmniSciSqlValidateArgs
  _args114.Session = session
  _args114.Query = query
  var _result115 OmniSciSqlValidateResult
  if err = p.Client_().Call(ctx, "sql_validate", &_args114, &_result115); err != nil {
    return
  }
  switch {
  case _result115.E!= nil:
    return r, _result115.E
  }

  return _result115.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - Sql
//  - Cursor
func (p *OmniSciClient) GetCompletionHints(ctx context.Context, session TSessionId, sql string, cursor int32) (r []*completion_hints.TCompletionHint, err error) {
  var _args116 OmniSciGetCompletionHintsArgs
  _args116.Session = session
  _args116.Sql = sql
  _args116.Cursor = cursor
  var _result117 OmniSciGetCompletionHintsResult
  if err = p.Client_().Call(ctx, "get_completion_hints", &_args116, &_result117); err != nil {
    return
  }
  switch {
  case _result117.E!= nil:
    return r, _result117.E
  }

  return _result117.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - Mode
func (p *OmniSciClient) SetExecutionMode(ctx context.Context, session TSessionId, mode TExecuteMode) (err error) {
  var _args118 OmniSciSetExecutionModeArgs
  _args118.Session = session
  _args118.Mode = mode
  var _result119 OmniSciSetExecutionModeResult
  if err = p.Client_().Call(ctx, "set_execution_mode", &_args118, &_result119); err != nil {
    return
  }
  switch {
  case _result119.E!= nil:
    return _result119.E
  }

  return nil
}

// Parameters:
//  - Session
//  - WidgetID
//  - VegaJSON
//  - CompressionLevel
//  - Nonce
func (p *OmniSciClient) RenderVega(ctx context.Context, session TSessionId, widget_id int64, vega_json string, compression_level int32, nonce string) (r *TRenderResult_, err error) {
  var _args120 OmniSciRenderVegaArgs
  _args120.Session = session
  _args120.WidgetID = widget_id
  _args120.VegaJSON = vega_json
  _args120.CompressionLevel = compression_level
  _args120.Nonce = nonce
  var _result121 OmniSciRenderVegaResult
  if err = p.Client_().Call(ctx, "render_vega", &_args120, &_result121); err != nil {
    return
  }
  switch {
  case _result121.E!= nil:
    return r, _result121.E
  }

  return _result121.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - WidgetID
//  - Pixel
//  - TableColNames
//  - ColumnFormat
//  - PixelRadius
//  - Nonce
func (p *OmniSciClient) GetResultRowForPixel(ctx context.Context, session TSessionId, widget_id int64, pixel *TPixel, table_col_names map[string][]string, column_format bool, pixelRadius int32, nonce string) (r *TPixelTableRowResult_, err error) {
  var _args122 OmniSciGetResultRowForPixelArgs
  _args122.Session = session
  _args122.WidgetID = widget_id
  _args122.Pixel = pixel
  _args122.TableColNames = table_col_names
  _args122.ColumnFormat = column_format
  _args122.PixelRadius = pixelRadius
  _args122.Nonce = nonce
  var _result123 OmniSciGetResultRowForPixelResult
  if err = p.Client_().Call(ctx, "get_result_row_for_pixel", &_args122, &_result123); err != nil {
    return
  }
  switch {
  case _result123.E!= nil:
    return r, _result123.E
  }

  return _result123.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - DashboardID
func (p *OmniSciClient) GetDashboard(ctx context.Context, session TSessionId, dashboard_id int32) (r *TDashboard, err error) {
  var _args124 OmniSciGetDashboardArgs
  _args124.Session = session
  _args124.DashboardID = dashboard_id
  var _result125 OmniSciGetDashboardResult
  if err = p.Client_().Call(ctx, "get_dashboard", &_args124, &_result125); err != nil {
    return
  }
  switch {
  case _result125.E!= nil:
    return r, _result125.E
  }

  return _result125.GetSuccess(), nil
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetDashboards(ctx context.Context, session TSessionId) (r []*TDashboard, err error) {
  var _args126 OmniSciGetDashboardsArgs
  _args126.Session = session
  var _result127 OmniSciGetDashboardsResult
  if err = p.Client_().Call(ctx, "get_dashboards", &_args126, &_result127); err != nil {
    return
  }
  switch {
  case _result127.E!= nil:
    return r, _result127.E
  }

  return _result127.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - DashboardName
//  - DashboardState
//  - ImageHash
//  - DashboardMetadata
func (p *OmniSciClient) CreateDashboard(ctx context.Context, session TSessionId, dashboard_name string, dashboard_state string, image_hash string, dashboard_metadata string) (r int32, err error) {
  var _args128 OmniSciCreateDashboardArgs
  _args128.Session = session
  _args128.DashboardName = dashboard_name
  _args128.DashboardState = dashboard_state
  _args128.ImageHash = image_hash
  _args128.DashboardMetadata = dashboard_metadata
  var _result129 OmniSciCreateDashboardResult
  if err = p.Client_().Call(ctx, "create_dashboard", &_args128, &_result129); err != nil {
    return
  }
  switch {
  case _result129.E!= nil:
    return r, _result129.E
  }

  return _result129.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - DashboardID
//  - DashboardName
//  - DashboardOwner
//  - DashboardState
//  - ImageHash
//  - DashboardMetadata
func (p *OmniSciClient) ReplaceDashboard(ctx context.Context, session TSessionId, dashboard_id int32, dashboard_name string, dashboard_owner string, dashboard_state string, image_hash string, dashboard_metadata string) (err error) {
  var _args130 OmniSciReplaceDashboardArgs
  _args130.Session = session
  _args130.DashboardID = dashboard_id
  _args130.DashboardName = dashboard_name
  _args130.DashboardOwner = dashboard_owner
  _args130.DashboardState = dashboard_state
  _args130.ImageHash = image_hash
  _args130.DashboardMetadata = dashboard_metadata
  var _result131 OmniSciReplaceDashboardResult
  if err = p.Client_().Call(ctx, "replace_dashboard", &_args130, &_result131); err != nil {
    return
  }
  switch {
  case _result131.E!= nil:
    return _result131.E
  }

  return nil
}

// Parameters:
//  - Session
//  - DashboardID
func (p *OmniSciClient) DeleteDashboard(ctx context.Context, session TSessionId, dashboard_id int32) (err error) {
  var _args132 OmniSciDeleteDashboardArgs
  _args132.Session = session
  _args132.DashboardID = dashboard_id
  var _result133 OmniSciDeleteDashboardResult
  if err = p.Client_().Call(ctx, "delete_dashboard", &_args132, &_result133); err != nil {
    return
  }
  switch {
  case _result133.E!= nil:
    return _result133.E
  }

  return nil
}

// Parameters:
//  - Session
//  - DashboardIds
//  - Groups
//  - Permissions
func (p *OmniSciClient) ShareDashboards(ctx context.Context, session TSessionId, dashboard_ids []int32, groups []string, permissions *TDashboardPermissions) (err error) {
  var _args134 OmniSciShareDashboardsArgs
  _args134.Session = session
  _args134.DashboardIds = dashboard_ids
  _args134.Groups = groups
  _args134.Permissions = permissions
  var _result135 OmniSciShareDashboardsResult
  if err = p.Client_().Call(ctx, "share_dashboards", &_args134, &_result135); err != nil {
    return
  }
  switch {
  case _result135.E!= nil:
    return _result135.E
  }

  return nil
}

// Parameters:
//  - Session
//  - DashboardIds
func (p *OmniSciClient) DeleteDashboards(ctx context.Context, session TSessionId, dashboard_ids []int32) (err error) {
  var _args136 OmniSciDeleteDashboardsArgs
  _args136.Session = session
  _args136.DashboardIds = dashboard_ids
  var _result137 OmniSciDeleteDashboardsResult
  if err = p.Client_().Call(ctx, "delete_dashboards", &_args136, &_result137); err != nil {
    return
  }
  switch {
  case _result137.E!= nil:
    return _result137.E
  }

  return nil
}

// Parameters:
//  - Session
//  - DashboardID
//  - Groups
//  - Objects
//  - Permissions
//  - GrantRole
func (p *OmniSciClient) ShareDashboard(ctx context.Context, session TSessionId, dashboard_id int32, groups []string, objects []string, permissions *TDashboardPermissions, grant_role bool) (err error) {
  var _args138 OmniSciShareDashboardArgs
  _args138.Session = session
  _args138.DashboardID = dashboard_id
  _args138.Groups = groups
  _args138.Objects = objects
  _args138.Permissions = permissions
  _args138.GrantRole = grant_role
  var _result139 OmniSciShareDashboardResult
  if err = p.Client_().Call(ctx, "share_dashboard", &_args138, &_result139); err != nil {
    return
  }
  switch {
  case _result139.E!= nil:
    return _result139.E
  }

  return nil
}

// Parameters:
//  - Session
//  - DashboardID
//  - Groups
//  - Objects
//  - Permissions
func (p *OmniSciClient) UnshareDashboard(ctx context.Context, session TSessionId, dashboard_id int32, groups []string, objects []string, permissions *TDashboardPermissions) (err error) {
  var _args140 OmniSciUnshareDashboardArgs
  _args140.Session = session
  _args140.DashboardID = dashboard_id
  _args140.Groups = groups
  _args140.Objects = objects
  _args140.Permissions = permissions
  var _result141 OmniSciUnshareDashboardResult
  if err = p.Client_().Call(ctx, "unshare_dashboard", &_args140, &_result141); err != nil {
    return
  }
  switch {
  case _result141.E!= nil:
    return _result141.E
  }

  return nil
}

// Parameters:
//  - Session
//  - DashboardIds
//  - Groups
//  - Permissions
func (p *OmniSciClient) UnshareDashboards(ctx context.Context, session TSessionId, dashboard_ids []int32, groups []string, permissions *TDashboardPermissions) (err error) {
  var _args142 OmniSciUnshareDashboardsArgs
  _args142.Session = session
  _args142.DashboardIds = dashboard_ids
  _args142.Groups = groups
  _args142.Permissions = permissions
  var _result143 OmniSciUnshareDashboardsResult
  if err = p.Client_().Call(ctx, "unshare_dashboards", &_args142, &_result143); err != nil {
    return
  }
  switch {
  case _result143.E!= nil:
    return _result143.E
  }

  return nil
}

// Parameters:
//  - Session
//  - DashboardID
func (p *OmniSciClient) GetDashboardGrantees(ctx context.Context, session TSessionId, dashboard_id int32) (r []*TDashboardGrantees, err error) {
  var _args144 OmniSciGetDashboardGranteesArgs
  _args144.Session = session
  _args144.DashboardID = dashboard_id
  var _result145 OmniSciGetDashboardGranteesResult
  if err = p.Client_().Call(ctx, "get_dashboard_grantees", &_args144, &_result145); err != nil {
    return
  }
  switch {
  case _result145.E!= nil:
    return r, _result145.E
  }

  return _result145.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - Link
func (p *OmniSciClient) GetLinkView(ctx context.Context, session TSessionId, link string) (r *TFrontendView, err error) {
  var _args146 OmniSciGetLinkViewArgs
  _args146.Session = session
  _args146.Link = link
  var _result147 OmniSciGetLinkViewResult
  if err = p.Client_().Call(ctx, "get_link_view", &_args146, &_result147); err != nil {
    return
  }
  switch {
  case _result147.E!= nil:
    return r, _result147.E
  }

  return _result147.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - ViewState
//  - ViewMetadata
func (p *OmniSciClient) CreateLink(ctx context.Context, session TSessionId, view_state string, view_metadata string) (r string, err error) {
  var _args148 OmniSciCreateLinkArgs
  _args148.Session = session
  _args148.ViewState = view_state
  _args148.ViewMetadata = view_metadata
  var _result149 OmniSciCreateLinkResult
  if err = p.Client_().Call(ctx, "create_link", &_args148, &_result149); err != nil {
    return
  }
  switch {
  case _result149.E!= nil:
    return r, _result149.E
  }

  return _result149.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - TableName
//  - Rows
//  - ColumnNames
func (p *OmniSciClient) LoadTableBinary(ctx context.Context, session TSessionId, table_name string, rows []*TRow, column_names []string) (err error) {
  var _args150 OmniSciLoadTableBinaryArgs
  _args150.Session = session
  _args150.TableName = table_name
  _args150.Rows = rows
  _args150.ColumnNames = column_names
  var _result151 OmniSciLoadTableBinaryResult
  if err = p.Client_().Call(ctx, "load_table_binary", &_args150, &_result151); err != nil {
    return
  }
  switch {
  case _result151.E!= nil:
    return _result151.E
  }

  return nil
}

// Parameters:
//  - Session
//  - TableName
//  - Cols
//  - ColumnNames
func (p *OmniSciClient) LoadTableBinaryColumnar(ctx context.Context, session TSessionId, table_name string, cols []*TColumn, column_names []string) (err error) {
  var _args152 OmniSciLoadTableBinaryColumnarArgs
  _args152.Session = session
  _args152.TableName = table_name
  _args152.Cols = cols
  _args152.ColumnNames = column_names
  var _result153 OmniSciLoadTableBinaryColumnarResult
  if err = p.Client_().Call(ctx, "load_table_binary_columnar", &_args152, &_result153); err != nil {
    return
  }
  switch {
  case _result153.E!= nil:
    return _result153.E
  }

  return nil
}

// Parameters:
//  - Session
//  - TableName
//  - ArrowStream
//  - UseColumnNames
func (p *OmniSciClient) LoadTableBinaryArrow(ctx context.Context, session TSessionId, table_name string, arrow_stream []byte, use_column_names bool) (err error) {
  var _args154 OmniSciLoadTableBinaryArrowArgs
  _args154.Session = session
  _args154.TableName = table_name
  _args154.ArrowStream = arrow_stream
  _args154.UseColumnNames = use_column_names
  var _result155 OmniSciLoadTableBinaryArrowResult
  if err = p.Client_().Call(ctx, "load_table_binary_arrow", &_args154, &_result155); err != nil {
    return
  }
  switch {
  case _result155.E!= nil:
    return _result155.E
  }

  return nil
}

// Parameters:
//  - Session
//  - TableName
//  - Rows
//  - ColumnNames
func (p *OmniSciClient) LoadTable(ctx context.Context, session TSessionId, table_name string, rows []*TStringRow, column_names []string) (err error) {
  var _args156 OmniSciLoadTableArgs
  _args156.Session = session
  _args156.TableName = table_name
  _args156.Rows = rows
  _args156.ColumnNames = column_names
  var _result157 OmniSciLoadTableResult
  if err = p.Client_().Call(ctx, "load_table", &_args156, &_result157); err != nil {
    return
  }
  switch {
  case _result157.E!= nil:
    return _result157.E
  }

  return nil
}

// Parameters:
//  - Session
//  - FileName
//  - CopyParams
func (p *OmniSciClient) DetectColumnTypes(ctx context.Context, session TSessionId, file_name string, copy_params *TCopyParams) (r *TDetectResult_, err error) {
  var _args158 OmniSciDetectColumnTypesArgs
  _args158.Session = session
  _args158.FileName = file_name
  _args158.CopyParams = copy_params
  var _result159 OmniSciDetectColumnTypesResult
  if err = p.Client_().Call(ctx, "detect_column_types", &_args158, &_result159); err != nil {
    return
  }
  switch {
  case _result159.E!= nil:
    return r, _result159.E
  }

  return _result159.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - TableName
//  - RowDesc
//  - FileType
//  - CreateParams
func (p *OmniSciClient) CreateTable(ctx context.Context, session TSessionId, table_name string, row_desc TRowDescriptor, file_type TFileType, create_params *TCreateParams) (err error) {
  var _args160 OmniSciCreateTableArgs
  _args160.Session = session
  _args160.TableName = table_name
  _args160.RowDesc = row_desc
  _args160.FileType = file_type
  _args160.CreateParams = create_params
  var _result161 OmniSciCreateTableResult
  if err = p.Client_().Call(ctx, "create_table", &_args160, &_result161); err != nil {
    return
  }
  switch {
  case _result161.E!= nil:
    return _result161.E
  }

  return nil
}

// Parameters:
//  - Session
//  - TableName
//  - FileName
//  - CopyParams
func (p *OmniSciClient) ImportTable(ctx context.Context, session TSessionId, table_name string, file_name string, copy_params *TCopyParams) (err error) {
  var _args162 OmniSciImportTableArgs
  _args162.Session = session
  _args162.TableName = table_name
  _args162.FileName = file_name
  _args162.CopyParams = copy_params
  var _result163 OmniSciImportTableResult
  if err = p.Client_().Call(ctx, "import_table", &_args162, &_result163); err != nil {
    return
  }
  switch {
  case _result163.E!= nil:
    return _result163.E
  }

  return nil
}

// Parameters:
//  - Session
//  - TableName
//  - FileName
//  - CopyParams
//  - RowDesc
//  - CreateParams
func (p *OmniSciClient) ImportGeoTable(ctx context.Context, session TSessionId, table_name string, file_name string, copy_params *TCopyParams, row_desc TRowDescriptor, create_params *TCreateParams) (err error) {
  var _args164 OmniSciImportGeoTableArgs
  _args164.Session = session
  _args164.TableName = table_name
  _args164.FileName = file_name
  _args164.CopyParams = copy_params
  _args164.RowDesc = row_desc
  _args164.CreateParams = create_params
  var _result165 OmniSciImportGeoTableResult
  if err = p.Client_().Call(ctx, "import_geo_table", &_args164, &_result165); err != nil {
    return
  }
  switch {
  case _result165.E!= nil:
    return _result165.E
  }

  return nil
}

// Parameters:
//  - Session
//  - ImportID
func (p *OmniSciClient) ImportTableStatus(ctx context.Context, session TSessionId, import_id string) (r *TImportStatus, err error) {
  var _args166 OmniSciImportTableStatusArgs
  _args166.Session = session
  _args166.ImportID = import_id
  var _result167 OmniSciImportTableStatusResult
  if err = p.Client_().Call(ctx, "import_table_status", &_args166, &_result167); err != nil {
    return
  }
  switch {
  case _result167.E!= nil:
    return r, _result167.E
  }

  return _result167.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - ArchivePath
//  - CopyParams
func (p *OmniSciClient) GetFirstGeoFileInArchive(ctx context.Context, session TSessionId, archive_path string, copy_params *TCopyParams) (r string, err error) {
  var _args168 OmniSciGetFirstGeoFileInArchiveArgs
  _args168.Session = session
  _args168.ArchivePath = archive_path
  _args168.CopyParams = copy_params
  var _result169 OmniSciGetFirstGeoFileInArchiveResult
  if err = p.Client_().Call(ctx, "get_first_geo_file_in_archive", &_args168, &_result169); err != nil {
    return
  }
  switch {
  case _result169.E!= nil:
    return r, _result169.E
  }

  return _result169.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - ArchivePath
//  - CopyParams
func (p *OmniSciClient) GetAllFilesInArchive(ctx context.Context, session TSessionId, archive_path string, copy_params *TCopyParams) (r []string, err error) {
  var _args170 OmniSciGetAllFilesInArchiveArgs
  _args170.Session = session
  _args170.ArchivePath = archive_path
  _args170.CopyParams = copy_params
  var _result171 OmniSciGetAllFilesInArchiveResult
  if err = p.Client_().Call(ctx, "get_all_files_in_archive", &_args170, &_result171); err != nil {
    return
  }
  switch {
  case _result171.E!= nil:
    return r, _result171.E
  }

  return _result171.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - FileName
//  - CopyParams
func (p *OmniSciClient) GetLayersInGeoFile(ctx context.Context, session TSessionId, file_name string, copy_params *TCopyParams) (r []*TGeoFileLayerInfo, err error) {
  var _args172 OmniSciGetLayersInGeoFileArgs
  _args172.Session = session
  _args172.FileName = file_name
  _args172.CopyParams = copy_params
  var _result173 OmniSciGetLayersInGeoFileResult
  if err = p.Client_().Call(ctx, "get_layers_in_geo_file", &_args172, &_result173); err != nil {
    return
  }
  switch {
  case _result173.E!= nil:
    return r, _result173.E
  }

  return _result173.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - Query
func (p *OmniSciClient) QueryGetOuterFragmentCount(ctx context.Context, session TSessionId, query string) (r int64, err error) {
  var _args174 OmniSciQueryGetOuterFragmentCountArgs
  _args174.Session = session
  _args174.Query = query
  var _result175 OmniSciQueryGetOuterFragmentCountResult
  if err = p.Client_().Call(ctx, "query_get_outer_fragment_count", &_args174, &_result175); err != nil {
    return
  }
  switch {
  case _result175.E!= nil:
    return r, _result175.E
  }

  return _result175.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - TableID
func (p *OmniSciClient) CheckTableConsistency(ctx context.Context, session TSessionId, table_id int32) (r *TTableMeta, err error) {
  var _args176 OmniSciCheckTableConsistencyArgs
  _args176.Session = session
  _args176.TableID = table_id
  var _result177 OmniSciCheckTableConsistencyResult
  if err = p.Client_().Call(ctx, "check_table_consistency", &_args176, &_result177); err != nil {
    return
  }
  switch {
  case _result177.E!= nil:
    return r, _result177.E
  }

  return _result177.GetSuccess(), nil
}

// Parameters:
//  - LeafSession
//  - ParentSession
//  - QueryRa
//  - StartTimeStr
//  - JustExplain
//  - OuterFragmentIndices
func (p *OmniSciClient) StartQuery(ctx context.Context, leaf_session TSessionId, parent_session TSessionId, query_ra string, start_time_str string, just_explain bool, outer_fragment_indices []int64) (r *TPendingQuery, err error) {
  var _args178 OmniSciStartQueryArgs
  _args178.LeafSession = leaf_session
  _args178.ParentSession = parent_session
  _args178.QueryRa = query_ra
  _args178.StartTimeStr = start_time_str
  _args178.JustExplain = just_explain
  _args178.OuterFragmentIndices = outer_fragment_indices
  var _result179 OmniSciStartQueryResult
  if err = p.Client_().Call(ctx, "start_query", &_args178, &_result179); err != nil {
    return
  }
  switch {
  case _result179.E!= nil:
    return r, _result179.E
  }

  return _result179.GetSuccess(), nil
}

// Parameters:
//  - PendingQuery
//  - SubqueryID
//  - StartTimeStr
func (p *OmniSciClient) ExecuteQueryStep(ctx context.Context, pending_query *TPendingQuery, subquery_id TSubqueryId, start_time_str string) (r *TStepResult_, err error) {
  var _args180 OmniSciExecuteQueryStepArgs
  _args180.PendingQuery = pending_query
  _args180.SubqueryID = subquery_id
  _args180.StartTimeStr = start_time_str
  var _result181 OmniSciExecuteQueryStepResult
  if err = p.Client_().Call(ctx, "execute_query_step", &_args180, &_result181); err != nil {
    return
  }
  switch {
  case _result181.E!= nil:
    return r, _result181.E
  }

  return _result181.GetSuccess(), nil
}

// Parameters:
//  - SerializedRows
//  - RowDesc
//  - QueryID
//  - SubqueryID
//  - IsFinalSubqueryResult_
func (p *OmniSciClient) BroadcastSerializedRows(ctx context.Context, serialized_rows *serialized_result_set.TSerializedRows, row_desc TRowDescriptor, query_id TQueryId, subquery_id TSubqueryId, is_final_subquery_result bool) (err error) {
  var _args182 OmniSciBroadcastSerializedRowsArgs
  _args182.SerializedRows = serialized_rows
  _args182.RowDesc = row_desc
  _args182.QueryID = query_id
  _args182.SubqueryID = subquery_id
  _args182.IsFinalSubqueryResult_ = is_final_subquery_result
  var _result183 OmniSciBroadcastSerializedRowsResult
  if err = p.Client_().Call(ctx, "broadcast_serialized_rows", &_args182, &_result183); err != nil {
    return
  }
  switch {
  case _result183.E!= nil:
    return _result183.E
  }

  return nil
}

// Parameters:
//  - Session
//  - WidgetID
//  - NodeIdx
//  - VegaJSON
func (p *OmniSciClient) StartRenderQuery(ctx context.Context, session TSessionId, widget_id int64, node_idx int16, vega_json string) (r *TPendingRenderQuery, err error) {
  var _args184 OmniSciStartRenderQueryArgs
  _args184.Session = session
  _args184.WidgetID = widget_id
  _args184.NodeIdx = node_idx
  _args184.VegaJSON = vega_json
  var _result185 OmniSciStartRenderQueryResult
  if err = p.Client_().Call(ctx, "start_render_query", &_args184, &_result185); err != nil {
    return
  }
  switch {
  case _result185.E!= nil:
    return r, _result185.E
  }

  return _result185.GetSuccess(), nil
}

// Parameters:
//  - PendingRender
//  - MergedData
func (p *OmniSciClient) ExecuteNextRenderStep(ctx context.Context, pending_render *TPendingRenderQuery, merged_data TRenderAggDataMap) (r *TRenderStepResult_, err error) {
  var _args186 OmniSciExecuteNextRenderStepArgs
  _args186.PendingRender = pending_render
  _args186.MergedData = merged_data
  var _result187 OmniSciExecuteNextRenderStepResult
  if err = p.Client_().Call(ctx, "execute_next_render_step", &_args186, &_result187); err != nil {
    return
  }
  switch {
  case _result187.E!= nil:
    return r, _result187.E
  }

  return _result187.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - InsertData
func (p *OmniSciClient) InsertData(ctx context.Context, session TSessionId, insert_data *TInsertData) (err error) {
  var _args188 OmniSciInsertDataArgs
  _args188.Session = session
  _args188.InsertData = insert_data
  var _result189 OmniSciInsertDataResult
  if err = p.Client_().Call(ctx, "insert_data", &_args188, &_result189); err != nil {
    return
  }
  switch {
  case _result189.E!= nil:
    return _result189.E
  }

  return nil
}

// Parameters:
//  - Session
//  - TableID
func (p *OmniSciClient) Checkpoint(ctx context.Context, session TSessionId, table_id int32) (err error) {
  var _args190 OmniSciCheckpointArgs
  _args190.Session = session
  _args190.TableID = table_id
  var _result191 OmniSciCheckpointResult
  if err = p.Client_().Call(ctx, "checkpoint", &_args190, &_result191); err != nil {
    return
  }
  switch {
  case _result191.E!= nil:
    return _result191.E
  }

  return nil
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetRoles(ctx context.Context, session TSessionId) (r []string, err error) {
  var _args192 OmniSciGetRolesArgs
  _args192.Session = session
  var _result193 OmniSciGetRolesResult
  if err = p.Client_().Call(ctx, "get_roles", &_args192, &_result193); err != nil {
    return
  }
  switch {
  case _result193.E!= nil:
    return r, _result193.E
  }

  return _result193.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - RoleName
func (p *OmniSciClient) GetDbObjectsForGrantee(ctx context.Context, session TSessionId, roleName string) (r []*TDBObject, err error) {
  var _args194 OmniSciGetDbObjectsForGranteeArgs
  _args194.Session = session
  _args194.RoleName = roleName
  var _result195 OmniSciGetDbObjectsForGranteeResult
  if err = p.Client_().Call(ctx, "get_db_objects_for_grantee", &_args194, &_result195); err != nil {
    return
  }
  switch {
  case _result195.E!= nil:
    return r, _result195.E
  }

  return _result195.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - ObjectName
//  - Type
func (p *OmniSciClient) GetDbObjectPrivs(ctx context.Context, session TSessionId, objectName string, type_a1 TDBObjectType) (r []*TDBObject, err error) {
  var _args196 OmniSciGetDbObjectPrivsArgs
  _args196.Session = session
  _args196.ObjectName = objectName
  _args196.Type = type_a1
  var _result197 OmniSciGetDbObjectPrivsResult
  if err = p.Client_().Call(ctx, "get_db_object_privs", &_args196, &_result197); err != nil {
    return
  }
  switch {
  case _result197.E!= nil:
    return r, _result197.E
  }

  return _result197.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - UserName
func (p *OmniSciClient) GetAllRolesForUser(ctx context.Context, session TSessionId, userName string) (r []string, err error) {
  var _args198 OmniSciGetAllRolesForUserArgs
  _args198.Session = session
  _args198.UserName = userName
  var _result199 OmniSciGetAllRolesForUserResult
  if err = p.Client_().Call(ctx, "get_all_roles_for_user", &_args198, &_result199); err != nil {
    return
  }
  switch {
  case _result199.E!= nil:
    return r, _result199.E
  }

  return _result199.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - GranteeName
//  - RoleName
func (p *OmniSciClient) HasRole(ctx context.Context, session TSessionId, granteeName string, roleName string) (r bool, err error) {
  var _args200 OmniSciHasRoleArgs
  _args200.Session = session
  _args200.GranteeName = granteeName
  _args200.RoleName = roleName
  var _result201 OmniSciHasRoleResult
  if err = p.Client_().Call(ctx, "has_role", &_args200, &_result201); err != nil {
    return
  }
  switch {
  case _result201.E!= nil:
    return r, _result201.E
  }

  return _result201.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - GranteeName
//  - ObjectName
//  - ObjectType
//  - Permissions
func (p *OmniSciClient) HasObjectPrivilege(ctx context.Context, session TSessionId, granteeName string, ObjectName string, objectType TDBObjectType, permissions *TDBObjectPermissions) (r bool, err error) {
  var _args202 OmniSciHasObjectPrivilegeArgs
  _args202.Session = session
  _args202.GranteeName = granteeName
  _args202.ObjectName = ObjectName
  _args202.ObjectType = objectType
  _args202.Permissions = permissions
  var _result203 OmniSciHasObjectPrivilegeResult
  if err = p.Client_().Call(ctx, "has_object_privilege", &_args202, &_result203); err != nil {
    return
  }
  switch {
  case _result203.E!= nil:
    return r, _result203.E
  }

  return _result203.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - Key
//  - Nonce
func (p *OmniSciClient) SetLicenseKey(ctx context.Context, session TSessionId, key string, nonce string) (r *TLicenseInfo, err error) {
  var _args204 OmniSciSetLicenseKeyArgs
  _args204.Session = session
  _args204.Key = key
  _args204.Nonce = nonce
  var _result205 OmniSciSetLicenseKeyResult
  if err = p.Client_().Call(ctx, "set_license_key", &_args204, &_result205); err != nil {
    return
  }
  switch {
  case _result205.E!= nil:
    return r, _result205.E
  }

  return _result205.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - Nonce
func (p *OmniSciClient) GetLicenseClaims(ctx context.Context, session TSessionId, nonce string) (r *TLicenseInfo, err error) {
  var _args206 OmniSciGetLicenseClaimsArgs
  _args206.Session = session
  _args206.Nonce = nonce
  var _result207 OmniSciGetLicenseClaimsResult
  if err = p.Client_().Call(ctx, "get_license_claims", &_args206, &_result207); err != nil {
    return
  }
  switch {
  case _result207.E!= nil:
    return r, _result207.E
  }

  return _result207.GetSuccess(), nil
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetDeviceParameters(ctx context.Context, session TSessionId) (r map[string]string, err error) {
  var _args208 OmniSciGetDeviceParametersArgs
  _args208.Session = session
  var _result209 OmniSciGetDeviceParametersResult
  if err = p.Client_().Call(ctx, "get_device_parameters", &_args208, &_result209); err != nil {
    return
  }
  switch {
  case _result209.E!= nil:
    return r, _result209.E
  }

  return _result209.GetSuccess(), nil
}

// Parameters:
//  - Session
//  - Udfs
//  - Udtfs
//  - DeviceIrMap
func (p *OmniSciClient) RegisterRuntimeExtensionFunctions(ctx context.Context, session TSessionId, udfs []*extension_functions.TUserDefinedFunction, udtfs []*extension_functions.TUserDefinedTableFunction, device_ir_map map[string]string) (err error) {
  var _args210 OmniSciRegisterRuntimeExtensionFunctionsArgs
  _args210.Session = session
  _args210.Udfs = udfs
  _args210.Udtfs = udtfs
  _args210.DeviceIrMap = device_ir_map
  var _result211 OmniSciRegisterRuntimeExtensionFunctionsResult
  if err = p.Client_().Call(ctx, "register_runtime_extension_functions", &_args210, &_result211); err != nil {
    return
  }
  switch {
  case _result211.E!= nil:
    return _result211.E
  }

  return nil
}

type OmniSciProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler OmniSci
}

func (p *OmniSciProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *OmniSciProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *OmniSciProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewOmniSciProcessor(handler OmniSci) *OmniSciProcessor {

  self212 := &OmniSciProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self212.processorMap["connect"] = &omniSciProcessorConnect{handler:handler}
  self212.processorMap["krb5_connect"] = &omniSciProcessorKrb5Connect{handler:handler}
  self212.processorMap["disconnect"] = &omniSciProcessorDisconnect{handler:handler}
  self212.processorMap["switch_database"] = &omniSciProcessorSwitchDatabase{handler:handler}
  self212.processorMap["clone_session"] = &omniSciProcessorCloneSession{handler:handler}
  self212.processorMap["get_server_status"] = &omniSciProcessorGetServerStatus{handler:handler}
  self212.processorMap["get_status"] = &omniSciProcessorGetStatus{handler:handler}
  self212.processorMap["get_hardware_info"] = &omniSciProcessorGetHardwareInfo{handler:handler}
  self212.processorMap["get_tables"] = &omniSciProcessorGetTables{handler:handler}
  self212.processorMap["get_physical_tables"] = &omniSciProcessorGetPhysicalTables{handler:handler}
  self212.processorMap["get_views"] = &omniSciProcessorGetViews{handler:handler}
  self212.processorMap["get_tables_meta"] = &omniSciProcessorGetTablesMeta{handler:handler}
  self212.processorMap["get_table_details"] = &omniSciProcessorGetTableDetails{handler:handler}
  self212.processorMap["get_internal_table_details"] = &omniSciProcessorGetInternalTableDetails{handler:handler}
  self212.processorMap["get_users"] = &omniSciProcessorGetUsers{handler:handler}
  self212.processorMap["get_databases"] = &omniSciProcessorGetDatabases{handler:handler}
  self212.processorMap["get_version"] = &omniSciProcessorGetVersion{handler:handler}
  self212.processorMap["start_heap_profile"] = &omniSciProcessorStartHeapProfile{handler:handler}
  self212.processorMap["stop_heap_profile"] = &omniSciProcessorStopHeapProfile{handler:handler}
  self212.processorMap["get_heap_profile"] = &omniSciProcessorGetHeapProfile{handler:handler}
  self212.processorMap["get_memory"] = &omniSciProcessorGetMemory{handler:handler}
  self212.processorMap["clear_cpu_memory"] = &omniSciProcessorClearCPUMemory{handler:handler}
  self212.processorMap["clear_gpu_memory"] = &omniSciProcessorClearGpuMemory{handler:handler}
  self212.processorMap["set_cur_session"] = &omniSciProcessorSetCurSession{handler:handler}
  self212.processorMap["invalidate_cur_session"] = &omniSciProcessorInvalidateCurSession{handler:handler}
  self212.processorMap["set_table_epoch"] = &omniSciProcessorSetTableEpoch{handler:handler}
  self212.processorMap["set_table_epoch_by_name"] = &omniSciProcessorSetTableEpochByName{handler:handler}
  self212.processorMap["get_table_epoch"] = &omniSciProcessorGetTableEpoch{handler:handler}
  self212.processorMap["get_table_epoch_by_name"] = &omniSciProcessorGetTableEpochByName{handler:handler}
  self212.processorMap["get_table_epochs"] = &omniSciProcessorGetTableEpochs{handler:handler}
  self212.processorMap["set_table_epochs"] = &omniSciProcessorSetTableEpochs{handler:handler}
  self212.processorMap["get_session_info"] = &omniSciProcessorGetSessionInfo{handler:handler}
  self212.processorMap["sql_execute"] = &omniSciProcessorSqlExecute{handler:handler}
  self212.processorMap["sql_execute_df"] = &omniSciProcessorSqlExecuteDf{handler:handler}
  self212.processorMap["sql_execute_gdf"] = &omniSciProcessorSqlExecuteGdf{handler:handler}
  self212.processorMap["deallocate_df"] = &omniSciProcessorDeallocateDf{handler:handler}
  self212.processorMap["interrupt"] = &omniSciProcessorInterrupt{handler:handler}
  self212.processorMap["sql_validate"] = &omniSciProcessorSqlValidate{handler:handler}
  self212.processorMap["get_completion_hints"] = &omniSciProcessorGetCompletionHints{handler:handler}
  self212.processorMap["set_execution_mode"] = &omniSciProcessorSetExecutionMode{handler:handler}
  self212.processorMap["render_vega"] = &omniSciProcessorRenderVega{handler:handler}
  self212.processorMap["get_result_row_for_pixel"] = &omniSciProcessorGetResultRowForPixel{handler:handler}
  self212.processorMap["get_dashboard"] = &omniSciProcessorGetDashboard{handler:handler}
  self212.processorMap["get_dashboards"] = &omniSciProcessorGetDashboards{handler:handler}
  self212.processorMap["create_dashboard"] = &omniSciProcessorCreateDashboard{handler:handler}
  self212.processorMap["replace_dashboard"] = &omniSciProcessorReplaceDashboard{handler:handler}
  self212.processorMap["delete_dashboard"] = &omniSciProcessorDeleteDashboard{handler:handler}
  self212.processorMap["share_dashboards"] = &omniSciProcessorShareDashboards{handler:handler}
  self212.processorMap["delete_dashboards"] = &omniSciProcessorDeleteDashboards{handler:handler}
  self212.processorMap["share_dashboard"] = &omniSciProcessorShareDashboard{handler:handler}
  self212.processorMap["unshare_dashboard"] = &omniSciProcessorUnshareDashboard{handler:handler}
  self212.processorMap["unshare_dashboards"] = &omniSciProcessorUnshareDashboards{handler:handler}
  self212.processorMap["get_dashboard_grantees"] = &omniSciProcessorGetDashboardGrantees{handler:handler}
  self212.processorMap["get_link_view"] = &omniSciProcessorGetLinkView{handler:handler}
  self212.processorMap["create_link"] = &omniSciProcessorCreateLink{handler:handler}
  self212.processorMap["load_table_binary"] = &omniSciProcessorLoadTableBinary{handler:handler}
  self212.processorMap["load_table_binary_columnar"] = &omniSciProcessorLoadTableBinaryColumnar{handler:handler}
  self212.processorMap["load_table_binary_arrow"] = &omniSciProcessorLoadTableBinaryArrow{handler:handler}
  self212.processorMap["load_table"] = &omniSciProcessorLoadTable{handler:handler}
  self212.processorMap["detect_column_types"] = &omniSciProcessorDetectColumnTypes{handler:handler}
  self212.processorMap["create_table"] = &omniSciProcessorCreateTable{handler:handler}
  self212.processorMap["import_table"] = &omniSciProcessorImportTable{handler:handler}
  self212.processorMap["import_geo_table"] = &omniSciProcessorImportGeoTable{handler:handler}
  self212.processorMap["import_table_status"] = &omniSciProcessorImportTableStatus{handler:handler}
  self212.processorMap["get_first_geo_file_in_archive"] = &omniSciProcessorGetFirstGeoFileInArchive{handler:handler}
  self212.processorMap["get_all_files_in_archive"] = &omniSciProcessorGetAllFilesInArchive{handler:handler}
  self212.processorMap["get_layers_in_geo_file"] = &omniSciProcessorGetLayersInGeoFile{handler:handler}
  self212.processorMap["query_get_outer_fragment_count"] = &omniSciProcessorQueryGetOuterFragmentCount{handler:handler}
  self212.processorMap["check_table_consistency"] = &omniSciProcessorCheckTableConsistency{handler:handler}
  self212.processorMap["start_query"] = &omniSciProcessorStartQuery{handler:handler}
  self212.processorMap["execute_query_step"] = &omniSciProcessorExecuteQueryStep{handler:handler}
  self212.processorMap["broadcast_serialized_rows"] = &omniSciProcessorBroadcastSerializedRows{handler:handler}
  self212.processorMap["start_render_query"] = &omniSciProcessorStartRenderQuery{handler:handler}
  self212.processorMap["execute_next_render_step"] = &omniSciProcessorExecuteNextRenderStep{handler:handler}
  self212.processorMap["insert_data"] = &omniSciProcessorInsertData{handler:handler}
  self212.processorMap["checkpoint"] = &omniSciProcessorCheckpoint{handler:handler}
  self212.processorMap["get_roles"] = &omniSciProcessorGetRoles{handler:handler}
  self212.processorMap["get_db_objects_for_grantee"] = &omniSciProcessorGetDbObjectsForGrantee{handler:handler}
  self212.processorMap["get_db_object_privs"] = &omniSciProcessorGetDbObjectPrivs{handler:handler}
  self212.processorMap["get_all_roles_for_user"] = &omniSciProcessorGetAllRolesForUser{handler:handler}
  self212.processorMap["has_role"] = &omniSciProcessorHasRole{handler:handler}
  self212.processorMap["has_object_privilege"] = &omniSciProcessorHasObjectPrivilege{handler:handler}
  self212.processorMap["set_license_key"] = &omniSciProcessorSetLicenseKey{handler:handler}
  self212.processorMap["get_license_claims"] = &omniSciProcessorGetLicenseClaims{handler:handler}
  self212.processorMap["get_device_parameters"] = &omniSciProcessorGetDeviceParameters{handler:handler}
  self212.processorMap["register_runtime_extension_functions"] = &omniSciProcessorRegisterRuntimeExtensionFunctions{handler:handler}
return self212
}

func (p *OmniSciProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x213 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x213.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x213

}

type omniSciProcessorConnect struct {
  handler OmniSci
}

func (p *omniSciProcessorConnect) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciConnectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("connect", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciConnectResult{}
var retval TSessionId
  var err2 error
  if retval, err2 = p.handler.Connect(ctx, args.User, args.Passwd, args.Dbname); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing connect: " + err2.Error())
    oprot.WriteMessageBegin("connect", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("connect", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorKrb5Connect struct {
  handler OmniSci
}

func (p *omniSciProcessorKrb5Connect) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciKrb5ConnectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("krb5_connect", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciKrb5ConnectResult{}
var retval *TKrb5Session
  var err2 error
  if retval, err2 = p.handler.Krb5Connect(ctx, args.InputToken, args.Dbname); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing krb5_connect: " + err2.Error())
    oprot.WriteMessageBegin("krb5_connect", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("krb5_connect", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorDisconnect struct {
  handler OmniSci
}

func (p *omniSciProcessorDisconnect) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciDisconnectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("disconnect", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciDisconnectResult{}
  var err2 error
  if err2 = p.handler.Disconnect(ctx, args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing disconnect: " + err2.Error())
    oprot.WriteMessageBegin("disconnect", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("disconnect", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorSwitchDatabase struct {
  handler OmniSci
}

func (p *omniSciProcessorSwitchDatabase) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciSwitchDatabaseArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("switch_database", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciSwitchDatabaseResult{}
  var err2 error
  if err2 = p.handler.SwitchDatabase(ctx, args.Session, args.Dbname); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing switch_database: " + err2.Error())
    oprot.WriteMessageBegin("switch_database", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("switch_database", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorCloneSession struct {
  handler OmniSci
}

func (p *omniSciProcessorCloneSession) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciCloneSessionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("clone_session", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciCloneSessionResult{}
var retval TSessionId
  var err2 error
  if retval, err2 = p.handler.CloneSession(ctx, args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clone_session: " + err2.Error())
    oprot.WriteMessageBegin("clone_session", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("clone_session", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetServerStatus struct {
  handler OmniSci
}

func (p *omniSciProcessorGetServerStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetServerStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_server_status", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetServerStatusResult{}
var retval *TServerStatus
  var err2 error
  if retval, err2 = p.handler.GetServerStatus(ctx, args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_server_status: " + err2.Error())
    oprot.WriteMessageBegin("get_server_status", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_server_status", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetStatus struct {
  handler OmniSci
}

func (p *omniSciProcessorGetStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_status", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetStatusResult{}
var retval []*TServerStatus
  var err2 error
  if retval, err2 = p.handler.GetStatus(ctx, args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_status: " + err2.Error())
    oprot.WriteMessageBegin("get_status", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_status", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetHardwareInfo struct {
  handler OmniSci
}

func (p *omniSciProcessorGetHardwareInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetHardwareInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_hardware_info", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetHardwareInfoResult{}
var retval *TClusterHardwareInfo
  var err2 error
  if retval, err2 = p.handler.GetHardwareInfo(ctx, args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_hardware_info: " + err2.Error())
    oprot.WriteMessageBegin("get_hardware_info", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_hardware_info", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetTables struct {
  handler OmniSci
}

func (p *omniSciProcessorGetTables) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetTablesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_tables", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetTablesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetTables(ctx, args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_tables: " + err2.Error())
    oprot.WriteMessageBegin("get_tables", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_tables", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetPhysicalTables struct {
  handler OmniSci
}

func (p *omniSciProcessorGetPhysicalTables) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetPhysicalTablesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_physical_tables", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetPhysicalTablesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetPhysicalTables(ctx, args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_physical_tables: " + err2.Error())
    oprot.WriteMessageBegin("get_physical_tables", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_physical_tables", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetViews struct {
  handler OmniSci
}

func (p *omniSciProcessorGetViews) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetViewsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_views", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetViewsResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetViews(ctx, args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_views: " + err2.Error())
    oprot.WriteMessageBegin("get_views", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_views", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetTablesMeta struct {
  handler OmniSci
}

func (p *omniSciProcessorGetTablesMeta) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetTablesMetaArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_tables_meta", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetTablesMetaResult{}
var retval []*TTableMeta
  var err2 error
  if retval, err2 = p.handler.GetTablesMeta(ctx, args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_tables_meta: " + err2.Error())
    oprot.WriteMessageBegin("get_tables_meta", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_tables_meta", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetTableDetails struct {
  handler OmniSci
}

func (p *omniSciProcessorGetTableDetails) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetTableDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_table_details", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetTableDetailsResult{}
var retval *TTableDetails
  var err2 error
  if retval, err2 = p.handler.GetTableDetails(ctx, args.Session, args.TableName); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_details: " + err2.Error())
    oprot.WriteMessageBegin("get_table_details", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_table_details", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetInternalTableDetails struct {
  handler OmniSci
}

func (p *omniSciProcessorGetInternalTableDetails) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetInternalTableDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_internal_table_details", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetInternalTableDetailsResult{}
var retval *TTableDetails
  var err2 error
  if retval, err2 = p.handler.GetInternalTableDetails(ctx, args.Session, args.TableName); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_internal_table_details: " + err2.Error())
    oprot.WriteMessageBegin("get_internal_table_details", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_internal_table_details", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetUsers struct {
  handler OmniSci
}

func (p *omniSciProcessorGetUsers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetUsersArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_users", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetUsersResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetUsers(ctx, args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_users: " + err2.Error())
    oprot.WriteMessageBegin("get_users", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_users", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetDatabases struct {
  handler OmniSci
}

func (p *omniSciProcessorGetDatabases) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetDatabasesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_databases", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetDatabasesResult{}
var retval []*TDBInfo
  var err2 error
  if retval, err2 = p.handler.GetDatabases(ctx, args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_databases: " + err2.Error())
    oprot.WriteMessageBegin("get_databases", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_databases", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetVersion struct {
  handler OmniSci
}

func (p *omniSciProcessorGetVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetVersionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_version", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetVersionResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetVersion(ctx); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_version: " + err2.Error())
    oprot.WriteMessageBegin("get_version", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("get_version", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorStartHeapProfile struct {
  handler OmniSci
}

func (p *omniSciProcessorStartHeapProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciStartHeapProfileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("start_heap_profile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciStartHeapProfileResult{}
  var err2 error
  if err2 = p.handler.StartHeapProfile(ctx, args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing start_heap_profile: " + err2.Error())
    oprot.WriteMessageBegin("start_heap_profile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("start_heap_profile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorStopHeapProfile struct {
  handler OmniSci
}

func (p *omniSciProcessorStopHeapProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciStopHeapProfileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("stop_heap_profile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciStopHeapProfileResult{}
  var err2 error
  if err2 = p.handler.StopHeapProfile(ctx, args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing stop_heap_profile: " + err2.Error())
    oprot.WriteMessageBegin("stop_heap_profile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("stop_heap_profile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetHeapProfile struct {
  handler OmniSci
}

func (p *omniSciProcessorGetHeapProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetHeapProfileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_heap_profile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetHeapProfileResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetHeapProfile(ctx, args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_heap_profile: " + err2.Error())
    oprot.WriteMessageBegin("get_heap_profile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("get_heap_profile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetMemory struct {
  handler OmniSci
}

func (p *omniSciProcessorGetMemory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetMemoryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_memory", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetMemoryResult{}
var retval []*TNodeMemoryInfo
  var err2 error
  if retval, err2 = p.handler.GetMemory(ctx, args.Session, args.MemoryLevel); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_memory: " + err2.Error())
    oprot.WriteMessageBegin("get_memory", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_memory", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorClearCPUMemory struct {
  handler OmniSci
}

func (p *omniSciProcessorClearCPUMemory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciClearCPUMemoryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("clear_cpu_memory", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciClearCPUMemoryResult{}
  var err2 error
  if err2 = p.handler.ClearCPUMemory(ctx, args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clear_cpu_memory: " + err2.Error())
    oprot.WriteMessageBegin("clear_cpu_memory", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("clear_cpu_memory", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorClearGpuMemory struct {
  handler OmniSci
}

func (p *omniSciProcessorClearGpuMemory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciClearGpuMemoryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("clear_gpu_memory", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciClearGpuMemoryResult{}
  var err2 error
  if err2 = p.handler.ClearGpuMemory(ctx, args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clear_gpu_memory: " + err2.Error())
    oprot.WriteMessageBegin("clear_gpu_memory", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("clear_gpu_memory", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorSetCurSession struct {
  handler OmniSci
}

func (p *omniSciProcessorSetCurSession) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciSetCurSessionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("set_cur_session", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciSetCurSessionResult{}
  var err2 error
  if err2 = p.handler.SetCurSession(ctx, args.ParentSession, args.LeafSession, args.StartTimeStr, args.Label); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_cur_session: " + err2.Error())
    oprot.WriteMessageBegin("set_cur_session", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("set_cur_session", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorInvalidateCurSession struct {
  handler OmniSci
}

func (p *omniSciProcessorInvalidateCurSession) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciInvalidateCurSessionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("invalidate_cur_session", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciInvalidateCurSessionResult{}
  var err2 error
  if err2 = p.handler.InvalidateCurSession(ctx, args.ParentSession, args.LeafSession, args.StartTimeStr, args.Label); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing invalidate_cur_session: " + err2.Error())
    oprot.WriteMessageBegin("invalidate_cur_session", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("invalidate_cur_session", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorSetTableEpoch struct {
  handler OmniSci
}

func (p *omniSciProcessorSetTableEpoch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciSetTableEpochArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("set_table_epoch", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciSetTableEpochResult{}
  var err2 error
  if err2 = p.handler.SetTableEpoch(ctx, args.Session, args.DbID, args.TableID, args.NewEpoch_); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_table_epoch: " + err2.Error())
    oprot.WriteMessageBegin("set_table_epoch", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("set_table_epoch", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorSetTableEpochByName struct {
  handler OmniSci
}

func (p *omniSciProcessorSetTableEpochByName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciSetTableEpochByNameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("set_table_epoch_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciSetTableEpochByNameResult{}
  var err2 error
  if err2 = p.handler.SetTableEpochByName(ctx, args.Session, args.TableName, args.NewEpoch_); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_table_epoch_by_name: " + err2.Error())
    oprot.WriteMessageBegin("set_table_epoch_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("set_table_epoch_by_name", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetTableEpoch struct {
  handler OmniSci
}

func (p *omniSciProcessorGetTableEpoch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetTableEpochArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_table_epoch", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetTableEpochResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.GetTableEpoch(ctx, args.Session, args.DbID, args.TableID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_epoch: " + err2.Error())
    oprot.WriteMessageBegin("get_table_epoch", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("get_table_epoch", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetTableEpochByName struct {
  handler OmniSci
}

func (p *omniSciProcessorGetTableEpochByName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetTableEpochByNameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_table_epoch_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetTableEpochByNameResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.GetTableEpochByName(ctx, args.Session, args.TableName); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_epoch_by_name: " + err2.Error())
    oprot.WriteMessageBegin("get_table_epoch_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("get_table_epoch_by_name", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetTableEpochs struct {
  handler OmniSci
}

func (p *omniSciProcessorGetTableEpochs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetTableEpochsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_table_epochs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetTableEpochsResult{}
var retval []*TTableEpochInfo
  var err2 error
  if retval, err2 = p.handler.GetTableEpochs(ctx, args.Session, args.DbID, args.TableID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_epochs: " + err2.Error())
    oprot.WriteMessageBegin("get_table_epochs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_table_epochs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorSetTableEpochs struct {
  handler OmniSci
}

func (p *omniSciProcessorSetTableEpochs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciSetTableEpochsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("set_table_epochs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciSetTableEpochsResult{}
  var err2 error
  if err2 = p.handler.SetTableEpochs(ctx, args.Session, args.DbID, args.TableEpochs); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_table_epochs: " + err2.Error())
    oprot.WriteMessageBegin("set_table_epochs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("set_table_epochs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetSessionInfo struct {
  handler OmniSci
}

func (p *omniSciProcessorGetSessionInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetSessionInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_session_info", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetSessionInfoResult{}
var retval *TSessionInfo
  var err2 error
  if retval, err2 = p.handler.GetSessionInfo(ctx, args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_session_info: " + err2.Error())
    oprot.WriteMessageBegin("get_session_info", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_session_info", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorSqlExecute struct {
  handler OmniSci
}

func (p *omniSciProcessorSqlExecute) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciSqlExecuteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sql_execute", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciSqlExecuteResult{}
var retval *TQueryResult_
  var err2 error
  if retval, err2 = p.handler.SqlExecute(ctx, args.Session, args.Query, args.ColumnFormat, args.Nonce, args.FirstN, args.AtMostN); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_execute: " + err2.Error())
    oprot.WriteMessageBegin("sql_execute", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("sql_execute", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorSqlExecuteDf struct {
  handler OmniSci
}

func (p *omniSciProcessorSqlExecuteDf) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciSqlExecuteDfArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sql_execute_df", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciSqlExecuteDfResult{}
var retval *TDataFrame
  var err2 error
  if retval, err2 = p.handler.SqlExecuteDf(ctx, args.Session, args.Query, args.DeviceType, args.DeviceID, args.FirstN, args.TransportMethod); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_execute_df: " + err2.Error())
    oprot.WriteMessageBegin("sql_execute_df", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("sql_execute_df", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorSqlExecuteGdf struct {
  handler OmniSci
}

func (p *omniSciProcessorSqlExecuteGdf) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciSqlExecuteGdfArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sql_execute_gdf", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciSqlExecuteGdfResult{}
var retval *TDataFrame
  var err2 error
  if retval, err2 = p.handler.SqlExecuteGdf(ctx, args.Session, args.Query, args.DeviceID, args.FirstN); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_execute_gdf: " + err2.Error())
    oprot.WriteMessageBegin("sql_execute_gdf", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("sql_execute_gdf", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorDeallocateDf struct {
  handler OmniSci
}

func (p *omniSciProcessorDeallocateDf) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciDeallocateDfArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deallocate_df", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciDeallocateDfResult{}
  var err2 error
  if err2 = p.handler.DeallocateDf(ctx, args.Session, args.Df, args.DeviceType, args.DeviceID); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deallocate_df: " + err2.Error())
    oprot.WriteMessageBegin("deallocate_df", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("deallocate_df", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorInterrupt struct {
  handler OmniSci
}

func (p *omniSciProcessorInterrupt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciInterruptArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("interrupt", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciInterruptResult{}
  var err2 error
  if err2 = p.handler.Interrupt(ctx, args.QuerySession, args.InterruptSession); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing interrupt: " + err2.Error())
    oprot.WriteMessageBegin("interrupt", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("interrupt", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorSqlValidate struct {
  handler OmniSci
}

func (p *omniSciProcessorSqlValidate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciSqlValidateArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sql_validate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciSqlValidateResult{}
var retval TRowDescriptor
  var err2 error
  if retval, err2 = p.handler.SqlValidate(ctx, args.Session, args.Query); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_validate: " + err2.Error())
    oprot.WriteMessageBegin("sql_validate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("sql_validate", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetCompletionHints struct {
  handler OmniSci
}

func (p *omniSciProcessorGetCompletionHints) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetCompletionHintsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_completion_hints", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetCompletionHintsResult{}
var retval []*completion_hints.TCompletionHint
  var err2 error
  if retval, err2 = p.handler.GetCompletionHints(ctx, args.Session, args.Sql, args.Cursor); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_completion_hints: " + err2.Error())
    oprot.WriteMessageBegin("get_completion_hints", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_completion_hints", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorSetExecutionMode struct {
  handler OmniSci
}

func (p *omniSciProcessorSetExecutionMode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciSetExecutionModeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("set_execution_mode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciSetExecutionModeResult{}
  var err2 error
  if err2 = p.handler.SetExecutionMode(ctx, args.Session, args.Mode); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_execution_mode: " + err2.Error())
    oprot.WriteMessageBegin("set_execution_mode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("set_execution_mode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorRenderVega struct {
  handler OmniSci
}

func (p *omniSciProcessorRenderVega) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciRenderVegaArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("render_vega", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciRenderVegaResult{}
var retval *TRenderResult_
  var err2 error
  if retval, err2 = p.handler.RenderVega(ctx, args.Session, args.WidgetID, args.VegaJSON, args.CompressionLevel, args.Nonce); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing render_vega: " + err2.Error())
    oprot.WriteMessageBegin("render_vega", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("render_vega", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetResultRowForPixel struct {
  handler OmniSci
}

func (p *omniSciProcessorGetResultRowForPixel) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetResultRowForPixelArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_result_row_for_pixel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetResultRowForPixelResult{}
var retval *TPixelTableRowResult_
  var err2 error
  if retval, err2 = p.handler.GetResultRowForPixel(ctx, args.Session, args.WidgetID, args.Pixel, args.TableColNames, args.ColumnFormat, args.PixelRadius, args.Nonce); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_result_row_for_pixel: " + err2.Error())
    oprot.WriteMessageBegin("get_result_row_for_pixel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_result_row_for_pixel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetDashboard struct {
  handler OmniSci
}

func (p *omniSciProcessorGetDashboard) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetDashboardArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_dashboard", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetDashboardResult{}
var retval *TDashboard
  var err2 error
  if retval, err2 = p.handler.GetDashboard(ctx, args.Session, args.DashboardID); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_dashboard: " + err2.Error())
    oprot.WriteMessageBegin("get_dashboard", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_dashboard", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetDashboards struct {
  handler OmniSci
}

func (p *omniSciProcessorGetDashboards) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetDashboardsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_dashboards", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetDashboardsResult{}
var retval []*TDashboard
  var err2 error
  if retval, err2 = p.handler.GetDashboards(ctx, args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_dashboards: " + err2.Error())
    oprot.WriteMessageBegin("get_dashboards", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_dashboards", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorCreateDashboard struct {
  handler OmniSci
}

func (p *omniSciProcessorCreateDashboard) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciCreateDashboardArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("create_dashboard", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciCreateDashboardResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.CreateDashboard(ctx, args.Session, args.DashboardName, args.DashboardState, args.ImageHash, args.DashboardMetadata); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_dashboard: " + err2.Error())
    oprot.WriteMessageBegin("create_dashboard", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("create_dashboard", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorReplaceDashboard struct {
  handler OmniSci
}

func (p *omniSciProcessorReplaceDashboard) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciReplaceDashboardArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("replace_dashboard", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciReplaceDashboardResult{}
  var err2 error
  if err2 = p.handler.ReplaceDashboard(ctx, args.Session, args.DashboardID, args.DashboardName, args.DashboardOwner, args.DashboardState, args.ImageHash, args.DashboardMetadata); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing replace_dashboard: " + err2.Error())
    oprot.WriteMessageBegin("replace_dashboard", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("replace_dashboard", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorDeleteDashboard struct {
  handler OmniSci
}

func (p *omniSciProcessorDeleteDashboard) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciDeleteDashboardArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("delete_dashboard", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciDeleteDashboardResult{}
  var err2 error
  if err2 = p.handler.DeleteDashboard(ctx, args.Session, args.DashboardID); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delete_dashboard: " + err2.Error())
    oprot.WriteMessageBegin("delete_dashboard", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("delete_dashboard", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorShareDashboards struct {
  handler OmniSci
}

func (p *omniSciProcessorShareDashboards) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciShareDashboardsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("share_dashboards", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciShareDashboardsResult{}
  var err2 error
  if err2 = p.handler.ShareDashboards(ctx, args.Session, args.DashboardIds, args.Groups, args.Permissions); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing share_dashboards: " + err2.Error())
    oprot.WriteMessageBegin("share_dashboards", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("share_dashboards", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorDeleteDashboards struct {
  handler OmniSci
}

func (p *omniSciProcessorDeleteDashboards) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciDeleteDashboardsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("delete_dashboards", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciDeleteDashboardsResult{}
  var err2 error
  if err2 = p.handler.DeleteDashboards(ctx, args.Session, args.DashboardIds); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delete_dashboards: " + err2.Error())
    oprot.WriteMessageBegin("delete_dashboards", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("delete_dashboards", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorShareDashboard struct {
  handler OmniSci
}

func (p *omniSciProcessorShareDashboard) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciShareDashboardArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("share_dashboard", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciShareDashboardResult{}
  var err2 error
  if err2 = p.handler.ShareDashboard(ctx, args.Session, args.DashboardID, args.Groups, args.Objects, args.Permissions, args.GrantRole); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing share_dashboard: " + err2.Error())
    oprot.WriteMessageBegin("share_dashboard", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("share_dashboard", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorUnshareDashboard struct {
  handler OmniSci
}

func (p *omniSciProcessorUnshareDashboard) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciUnshareDashboardArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("unshare_dashboard", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciUnshareDashboardResult{}
  var err2 error
  if err2 = p.handler.UnshareDashboard(ctx, args.Session, args.DashboardID, args.Groups, args.Objects, args.Permissions); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unshare_dashboard: " + err2.Error())
    oprot.WriteMessageBegin("unshare_dashboard", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("unshare_dashboard", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorUnshareDashboards struct {
  handler OmniSci
}

func (p *omniSciProcessorUnshareDashboards) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciUnshareDashboardsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("unshare_dashboards", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciUnshareDashboardsResult{}
  var err2 error
  if err2 = p.handler.UnshareDashboards(ctx, args.Session, args.DashboardIds, args.Groups, args.Permissions); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unshare_dashboards: " + err2.Error())
    oprot.WriteMessageBegin("unshare_dashboards", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("unshare_dashboards", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetDashboardGrantees struct {
  handler OmniSci
}

func (p *omniSciProcessorGetDashboardGrantees) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetDashboardGranteesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_dashboard_grantees", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetDashboardGranteesResult{}
var retval []*TDashboardGrantees
  var err2 error
  if retval, err2 = p.handler.GetDashboardGrantees(ctx, args.Session, args.DashboardID); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_dashboard_grantees: " + err2.Error())
    oprot.WriteMessageBegin("get_dashboard_grantees", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_dashboard_grantees", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetLinkView struct {
  handler OmniSci
}

func (p *omniSciProcessorGetLinkView) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetLinkViewArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_link_view", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetLinkViewResult{}
var retval *TFrontendView
  var err2 error
  if retval, err2 = p.handler.GetLinkView(ctx, args.Session, args.Link); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_link_view: " + err2.Error())
    oprot.WriteMessageBegin("get_link_view", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_link_view", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorCreateLink struct {
  handler OmniSci
}

func (p *omniSciProcessorCreateLink) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciCreateLinkArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("create_link", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciCreateLinkResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.CreateLink(ctx, args.Session, args.ViewState, args.ViewMetadata); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_link: " + err2.Error())
    oprot.WriteMessageBegin("create_link", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("create_link", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorLoadTableBinary struct {
  handler OmniSci
}

func (p *omniSciProcessorLoadTableBinary) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciLoadTableBinaryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("load_table_binary", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciLoadTableBinaryResult{}
  var err2 error
  if err2 = p.handler.LoadTableBinary(ctx, args.Session, args.TableName, args.Rows, args.ColumnNames); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing load_table_binary: " + err2.Error())
    oprot.WriteMessageBegin("load_table_binary", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("load_table_binary", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorLoadTableBinaryColumnar struct {
  handler OmniSci
}

func (p *omniSciProcessorLoadTableBinaryColumnar) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciLoadTableBinaryColumnarArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("load_table_binary_columnar", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciLoadTableBinaryColumnarResult{}
  var err2 error
  if err2 = p.handler.LoadTableBinaryColumnar(ctx, args.Session, args.TableName, args.Cols, args.ColumnNames); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing load_table_binary_columnar: " + err2.Error())
    oprot.WriteMessageBegin("load_table_binary_columnar", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("load_table_binary_columnar", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorLoadTableBinaryArrow struct {
  handler OmniSci
}

func (p *omniSciProcessorLoadTableBinaryArrow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciLoadTableBinaryArrowArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("load_table_binary_arrow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciLoadTableBinaryArrowResult{}
  var err2 error
  if err2 = p.handler.LoadTableBinaryArrow(ctx, args.Session, args.TableName, args.ArrowStream, args.UseColumnNames); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing load_table_binary_arrow: " + err2.Error())
    oprot.WriteMessageBegin("load_table_binary_arrow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("load_table_binary_arrow", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorLoadTable struct {
  handler OmniSci
}

func (p *omniSciProcessorLoadTable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciLoadTableArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("load_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciLoadTableResult{}
  var err2 error
  if err2 = p.handler.LoadTable(ctx, args.Session, args.TableName, args.Rows, args.ColumnNames); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing load_table: " + err2.Error())
    oprot.WriteMessageBegin("load_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("load_table", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorDetectColumnTypes struct {
  handler OmniSci
}

func (p *omniSciProcessorDetectColumnTypes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciDetectColumnTypesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("detect_column_types", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciDetectColumnTypesResult{}
var retval *TDetectResult_
  var err2 error
  if retval, err2 = p.handler.DetectColumnTypes(ctx, args.Session, args.FileName, args.CopyParams); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing detect_column_types: " + err2.Error())
    oprot.WriteMessageBegin("detect_column_types", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("detect_column_types", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorCreateTable struct {
  handler OmniSci
}

func (p *omniSciProcessorCreateTable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciCreateTableArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("create_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciCreateTableResult{}
  var err2 error
  if err2 = p.handler.CreateTable(ctx, args.Session, args.TableName, args.RowDesc, args.FileType, args.CreateParams); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_table: " + err2.Error())
    oprot.WriteMessageBegin("create_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("create_table", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorImportTable struct {
  handler OmniSci
}

func (p *omniSciProcessorImportTable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciImportTableArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("import_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciImportTableResult{}
  var err2 error
  if err2 = p.handler.ImportTable(ctx, args.Session, args.TableName, args.FileName, args.CopyParams); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing import_table: " + err2.Error())
    oprot.WriteMessageBegin("import_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("import_table", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorImportGeoTable struct {
  handler OmniSci
}

func (p *omniSciProcessorImportGeoTable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciImportGeoTableArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("import_geo_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciImportGeoTableResult{}
  var err2 error
  if err2 = p.handler.ImportGeoTable(ctx, args.Session, args.TableName, args.FileName, args.CopyParams, args.RowDesc, args.CreateParams); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing import_geo_table: " + err2.Error())
    oprot.WriteMessageBegin("import_geo_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("import_geo_table", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorImportTableStatus struct {
  handler OmniSci
}

func (p *omniSciProcessorImportTableStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciImportTableStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("import_table_status", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciImportTableStatusResult{}
var retval *TImportStatus
  var err2 error
  if retval, err2 = p.handler.ImportTableStatus(ctx, args.Session, args.ImportID); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing import_table_status: " + err2.Error())
    oprot.WriteMessageBegin("import_table_status", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("import_table_status", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetFirstGeoFileInArchive struct {
  handler OmniSci
}

func (p *omniSciProcessorGetFirstGeoFileInArchive) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetFirstGeoFileInArchiveArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_first_geo_file_in_archive", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetFirstGeoFileInArchiveResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetFirstGeoFileInArchive(ctx, args.Session, args.ArchivePath, args.CopyParams); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_first_geo_file_in_archive: " + err2.Error())
    oprot.WriteMessageBegin("get_first_geo_file_in_archive", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("get_first_geo_file_in_archive", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetAllFilesInArchive struct {
  handler OmniSci
}

func (p *omniSciProcessorGetAllFilesInArchive) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetAllFilesInArchiveArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_all_files_in_archive", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetAllFilesInArchiveResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetAllFilesInArchive(ctx, args.Session, args.ArchivePath, args.CopyParams); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_all_files_in_archive: " + err2.Error())
    oprot.WriteMessageBegin("get_all_files_in_archive", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_all_files_in_archive", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetLayersInGeoFile struct {
  handler OmniSci
}

func (p *omniSciProcessorGetLayersInGeoFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetLayersInGeoFileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_layers_in_geo_file", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetLayersInGeoFileResult{}
var retval []*TGeoFileLayerInfo
  var err2 error
  if retval, err2 = p.handler.GetLayersInGeoFile(ctx, args.Session, args.FileName, args.CopyParams); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_layers_in_geo_file: " + err2.Error())
    oprot.WriteMessageBegin("get_layers_in_geo_file", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_layers_in_geo_file", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorQueryGetOuterFragmentCount struct {
  handler OmniSci
}

func (p *omniSciProcessorQueryGetOuterFragmentCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciQueryGetOuterFragmentCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("query_get_outer_fragment_count", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciQueryGetOuterFragmentCountResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.QueryGetOuterFragmentCount(ctx, args.Session, args.Query); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing query_get_outer_fragment_count: " + err2.Error())
    oprot.WriteMessageBegin("query_get_outer_fragment_count", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("query_get_outer_fragment_count", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorCheckTableConsistency struct {
  handler OmniSci
}

func (p *omniSciProcessorCheckTableConsistency) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciCheckTableConsistencyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("check_table_consistency", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciCheckTableConsistencyResult{}
var retval *TTableMeta
  var err2 error
  if retval, err2 = p.handler.CheckTableConsistency(ctx, args.Session, args.TableID); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing check_table_consistency: " + err2.Error())
    oprot.WriteMessageBegin("check_table_consistency", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("check_table_consistency", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorStartQuery struct {
  handler OmniSci
}

func (p *omniSciProcessorStartQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciStartQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("start_query", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciStartQueryResult{}
var retval *TPendingQuery
  var err2 error
  if retval, err2 = p.handler.StartQuery(ctx, args.LeafSession, args.ParentSession, args.QueryRa, args.StartTimeStr, args.JustExplain, args.OuterFragmentIndices); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing start_query: " + err2.Error())
    oprot.WriteMessageBegin("start_query", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("start_query", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorExecuteQueryStep struct {
  handler OmniSci
}

func (p *omniSciProcessorExecuteQueryStep) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciExecuteQueryStepArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("execute_query_step", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciExecuteQueryStepResult{}
var retval *TStepResult_
  var err2 error
  if retval, err2 = p.handler.ExecuteQueryStep(ctx, args.PendingQuery, args.SubqueryID, args.StartTimeStr); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing execute_query_step: " + err2.Error())
    oprot.WriteMessageBegin("execute_query_step", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("execute_query_step", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorBroadcastSerializedRows struct {
  handler OmniSci
}

func (p *omniSciProcessorBroadcastSerializedRows) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciBroadcastSerializedRowsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("broadcast_serialized_rows", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciBroadcastSerializedRowsResult{}
  var err2 error
  if err2 = p.handler.BroadcastSerializedRows(ctx, args.SerializedRows, args.RowDesc, args.QueryID, args.SubqueryID, args.IsFinalSubqueryResult_); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing broadcast_serialized_rows: " + err2.Error())
    oprot.WriteMessageBegin("broadcast_serialized_rows", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("broadcast_serialized_rows", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorStartRenderQuery struct {
  handler OmniSci
}

func (p *omniSciProcessorStartRenderQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciStartRenderQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("start_render_query", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciStartRenderQueryResult{}
var retval *TPendingRenderQuery
  var err2 error
  if retval, err2 = p.handler.StartRenderQuery(ctx, args.Session, args.WidgetID, args.NodeIdx, args.VegaJSON); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing start_render_query: " + err2.Error())
    oprot.WriteMessageBegin("start_render_query", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("start_render_query", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorExecuteNextRenderStep struct {
  handler OmniSci
}

func (p *omniSciProcessorExecuteNextRenderStep) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciExecuteNextRenderStepArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("execute_next_render_step", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciExecuteNextRenderStepResult{}
var retval *TRenderStepResult_
  var err2 error
  if retval, err2 = p.handler.ExecuteNextRenderStep(ctx, args.PendingRender, args.MergedData); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing execute_next_render_step: " + err2.Error())
    oprot.WriteMessageBegin("execute_next_render_step", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("execute_next_render_step", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorInsertData struct {
  handler OmniSci
}

func (p *omniSciProcessorInsertData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciInsertDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("insert_data", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciInsertDataResult{}
  var err2 error
  if err2 = p.handler.InsertData(ctx, args.Session, args.InsertData); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing insert_data: " + err2.Error())
    oprot.WriteMessageBegin("insert_data", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("insert_data", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorCheckpoint struct {
  handler OmniSci
}

func (p *omniSciProcessorCheckpoint) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciCheckpointArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("checkpoint", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciCheckpointResult{}
  var err2 error
  if err2 = p.handler.Checkpoint(ctx, args.Session, args.TableID); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkpoint: " + err2.Error())
    oprot.WriteMessageBegin("checkpoint", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("checkpoint", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetRoles struct {
  handler OmniSci
}

func (p *omniSciProcessorGetRoles) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetRolesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_roles", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetRolesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetRoles(ctx, args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_roles: " + err2.Error())
    oprot.WriteMessageBegin("get_roles", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_roles", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetDbObjectsForGrantee struct {
  handler OmniSci
}

func (p *omniSciProcessorGetDbObjectsForGrantee) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetDbObjectsForGranteeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_db_objects_for_grantee", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetDbObjectsForGranteeResult{}
var retval []*TDBObject
  var err2 error
  if retval, err2 = p.handler.GetDbObjectsForGrantee(ctx, args.Session, args.RoleName); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_db_objects_for_grantee: " + err2.Error())
    oprot.WriteMessageBegin("get_db_objects_for_grantee", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_db_objects_for_grantee", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetDbObjectPrivs struct {
  handler OmniSci
}

func (p *omniSciProcessorGetDbObjectPrivs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetDbObjectPrivsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_db_object_privs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetDbObjectPrivsResult{}
var retval []*TDBObject
  var err2 error
  if retval, err2 = p.handler.GetDbObjectPrivs(ctx, args.Session, args.ObjectName, args.Type); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_db_object_privs: " + err2.Error())
    oprot.WriteMessageBegin("get_db_object_privs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_db_object_privs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetAllRolesForUser struct {
  handler OmniSci
}

func (p *omniSciProcessorGetAllRolesForUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetAllRolesForUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_all_roles_for_user", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetAllRolesForUserResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetAllRolesForUser(ctx, args.Session, args.UserName); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_all_roles_for_user: " + err2.Error())
    oprot.WriteMessageBegin("get_all_roles_for_user", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_all_roles_for_user", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorHasRole struct {
  handler OmniSci
}

func (p *omniSciProcessorHasRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciHasRoleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("has_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciHasRoleResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.HasRole(ctx, args.Session, args.GranteeName, args.RoleName); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing has_role: " + err2.Error())
    oprot.WriteMessageBegin("has_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("has_role", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorHasObjectPrivilege struct {
  handler OmniSci
}

func (p *omniSciProcessorHasObjectPrivilege) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciHasObjectPrivilegeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("has_object_privilege", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciHasObjectPrivilegeResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.HasObjectPrivilege(ctx, args.Session, args.GranteeName, args.ObjectName, args.ObjectType, args.Permissions); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing has_object_privilege: " + err2.Error())
    oprot.WriteMessageBegin("has_object_privilege", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("has_object_privilege", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorSetLicenseKey struct {
  handler OmniSci
}

func (p *omniSciProcessorSetLicenseKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciSetLicenseKeyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("set_license_key", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciSetLicenseKeyResult{}
var retval *TLicenseInfo
  var err2 error
  if retval, err2 = p.handler.SetLicenseKey(ctx, args.Session, args.Key, args.Nonce); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_license_key: " + err2.Error())
    oprot.WriteMessageBegin("set_license_key", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("set_license_key", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetLicenseClaims struct {
  handler OmniSci
}

func (p *omniSciProcessorGetLicenseClaims) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetLicenseClaimsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_license_claims", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetLicenseClaimsResult{}
var retval *TLicenseInfo
  var err2 error
  if retval, err2 = p.handler.GetLicenseClaims(ctx, args.Session, args.Nonce); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_license_claims: " + err2.Error())
    oprot.WriteMessageBegin("get_license_claims", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_license_claims", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorGetDeviceParameters struct {
  handler OmniSci
}

func (p *omniSciProcessorGetDeviceParameters) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciGetDeviceParametersArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_device_parameters", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciGetDeviceParametersResult{}
var retval map[string]string
  var err2 error
  if retval, err2 = p.handler.GetDeviceParameters(ctx, args.Session); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_device_parameters: " + err2.Error())
    oprot.WriteMessageBegin("get_device_parameters", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_device_parameters", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type omniSciProcessorRegisterRuntimeExtensionFunctions struct {
  handler OmniSci
}

func (p *omniSciProcessorRegisterRuntimeExtensionFunctions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OmniSciRegisterRuntimeExtensionFunctionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("register_runtime_extension_functions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OmniSciRegisterRuntimeExtensionFunctionsResult{}
  var err2 error
  if err2 = p.handler.RegisterRuntimeExtensionFunctions(ctx, args.Session, args.Udfs, args.Udtfs, args.DeviceIrMap); err2 != nil {
  switch v := err2.(type) {
    case *TOmniSciException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing register_runtime_extension_functions: " + err2.Error())
    oprot.WriteMessageBegin("register_runtime_extension_functions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("register_runtime_extension_functions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - User
//  - Passwd
//  - Dbname
type OmniSciConnectArgs struct {
  User string `thrift:"user,1" db:"user" json:"user"`
  Passwd string `thrift:"passwd,2" db:"passwd" json:"passwd"`
  Dbname string `thrift:"dbname,3" db:"dbname" json:"dbname"`
}

func NewOmniSciConnectArgs() *OmniSciConnectArgs {
  return &OmniSciConnectArgs{}
}


func (p *OmniSciConnectArgs) GetUser() string {
  return p.User
}

func (p *OmniSciConnectArgs) GetPasswd() string {
  return p.Passwd
}

func (p *OmniSciConnectArgs) GetDbname() string {
  return p.Dbname
}
func (p *OmniSciConnectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciConnectArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.User = v
}
  return nil
}

func (p *OmniSciConnectArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Passwd = v
}
  return nil
}

func (p *OmniSciConnectArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *OmniSciConnectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("connect_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciConnectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := oprot.WriteString(string(p.User)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *OmniSciConnectArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:passwd: ", p), err) }
  if err := oprot.WriteString(string(p.Passwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:passwd: ", p), err) }
  return err
}

func (p *OmniSciConnectArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dbname: ", p), err) }
  if err := oprot.WriteString(string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dbname: ", p), err) }
  return err
}

func (p *OmniSciConnectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciConnectArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciConnectResult struct {
  Success *TSessionId `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciConnectResult() *OmniSciConnectResult {
  return &OmniSciConnectResult{}
}

var OmniSciConnectResult_Success_DEFAULT TSessionId
func (p *OmniSciConnectResult) GetSuccess() TSessionId {
  if !p.IsSetSuccess() {
    return OmniSciConnectResult_Success_DEFAULT
  }
return *p.Success
}
var OmniSciConnectResult_E_DEFAULT *TOmniSciException
func (p *OmniSciConnectResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciConnectResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciConnectResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciConnectResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciConnectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciConnectResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := TSessionId(v)
  p.Success = &temp
}
  return nil
}

func (p *OmniSciConnectResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciConnectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("connect_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciConnectResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciConnectResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciConnectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciConnectResult(%+v)", *p)
}

// Attributes:
//  - InputToken
//  - Dbname
type OmniSciKrb5ConnectArgs struct {
  InputToken string `thrift:"inputToken,1" db:"inputToken" json:"inputToken"`
  Dbname string `thrift:"dbname,2" db:"dbname" json:"dbname"`
}

func NewOmniSciKrb5ConnectArgs() *OmniSciKrb5ConnectArgs {
  return &OmniSciKrb5ConnectArgs{}
}


func (p *OmniSciKrb5ConnectArgs) GetInputToken() string {
  return p.InputToken
}

func (p *OmniSciKrb5ConnectArgs) GetDbname() string {
  return p.Dbname
}
func (p *OmniSciKrb5ConnectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciKrb5ConnectArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.InputToken = v
}
  return nil
}

func (p *OmniSciKrb5ConnectArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *OmniSciKrb5ConnectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("krb5_connect_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciKrb5ConnectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("inputToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inputToken: ", p), err) }
  if err := oprot.WriteString(string(p.InputToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inputToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inputToken: ", p), err) }
  return err
}

func (p *OmniSciKrb5ConnectArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dbname: ", p), err) }
  if err := oprot.WriteString(string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dbname: ", p), err) }
  return err
}

func (p *OmniSciKrb5ConnectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciKrb5ConnectArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciKrb5ConnectResult struct {
  Success *TKrb5Session `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciKrb5ConnectResult() *OmniSciKrb5ConnectResult {
  return &OmniSciKrb5ConnectResult{}
}

var OmniSciKrb5ConnectResult_Success_DEFAULT *TKrb5Session
func (p *OmniSciKrb5ConnectResult) GetSuccess() *TKrb5Session {
  if !p.IsSetSuccess() {
    return OmniSciKrb5ConnectResult_Success_DEFAULT
  }
return p.Success
}
var OmniSciKrb5ConnectResult_E_DEFAULT *TOmniSciException
func (p *OmniSciKrb5ConnectResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciKrb5ConnectResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciKrb5ConnectResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciKrb5ConnectResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciKrb5ConnectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciKrb5ConnectResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TKrb5Session{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OmniSciKrb5ConnectResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciKrb5ConnectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("krb5_connect_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciKrb5ConnectResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciKrb5ConnectResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciKrb5ConnectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciKrb5ConnectResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciDisconnectArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewOmniSciDisconnectArgs() *OmniSciDisconnectArgs {
  return &OmniSciDisconnectArgs{}
}


func (p *OmniSciDisconnectArgs) GetSession() TSessionId {
  return p.Session
}
func (p *OmniSciDisconnectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciDisconnectArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciDisconnectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("disconnect_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciDisconnectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciDisconnectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciDisconnectArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciDisconnectResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciDisconnectResult() *OmniSciDisconnectResult {
  return &OmniSciDisconnectResult{}
}

var OmniSciDisconnectResult_E_DEFAULT *TOmniSciException
func (p *OmniSciDisconnectResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciDisconnectResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciDisconnectResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciDisconnectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciDisconnectResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciDisconnectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("disconnect_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciDisconnectResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciDisconnectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciDisconnectResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Dbname
type OmniSciSwitchDatabaseArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  Dbname string `thrift:"dbname,2" db:"dbname" json:"dbname"`
}

func NewOmniSciSwitchDatabaseArgs() *OmniSciSwitchDatabaseArgs {
  return &OmniSciSwitchDatabaseArgs{}
}


func (p *OmniSciSwitchDatabaseArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciSwitchDatabaseArgs) GetDbname() string {
  return p.Dbname
}
func (p *OmniSciSwitchDatabaseArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciSwitchDatabaseArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciSwitchDatabaseArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *OmniSciSwitchDatabaseArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("switch_database_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciSwitchDatabaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciSwitchDatabaseArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dbname: ", p), err) }
  if err := oprot.WriteString(string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dbname: ", p), err) }
  return err
}

func (p *OmniSciSwitchDatabaseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciSwitchDatabaseArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciSwitchDatabaseResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciSwitchDatabaseResult() *OmniSciSwitchDatabaseResult {
  return &OmniSciSwitchDatabaseResult{}
}

var OmniSciSwitchDatabaseResult_E_DEFAULT *TOmniSciException
func (p *OmniSciSwitchDatabaseResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciSwitchDatabaseResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciSwitchDatabaseResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciSwitchDatabaseResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciSwitchDatabaseResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciSwitchDatabaseResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("switch_database_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciSwitchDatabaseResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciSwitchDatabaseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciSwitchDatabaseResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciCloneSessionArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewOmniSciCloneSessionArgs() *OmniSciCloneSessionArgs {
  return &OmniSciCloneSessionArgs{}
}


func (p *OmniSciCloneSessionArgs) GetSession() TSessionId {
  return p.Session
}
func (p *OmniSciCloneSessionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciCloneSessionArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciCloneSessionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("clone_session_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciCloneSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciCloneSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciCloneSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciCloneSessionResult struct {
  Success *TSessionId `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciCloneSessionResult() *OmniSciCloneSessionResult {
  return &OmniSciCloneSessionResult{}
}

var OmniSciCloneSessionResult_Success_DEFAULT TSessionId
func (p *OmniSciCloneSessionResult) GetSuccess() TSessionId {
  if !p.IsSetSuccess() {
    return OmniSciCloneSessionResult_Success_DEFAULT
  }
return *p.Success
}
var OmniSciCloneSessionResult_E_DEFAULT *TOmniSciException
func (p *OmniSciCloneSessionResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciCloneSessionResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciCloneSessionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciCloneSessionResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciCloneSessionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciCloneSessionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := TSessionId(v)
  p.Success = &temp
}
  return nil
}

func (p *OmniSciCloneSessionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciCloneSessionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("clone_session_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciCloneSessionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciCloneSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciCloneSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciCloneSessionResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetServerStatusArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewOmniSciGetServerStatusArgs() *OmniSciGetServerStatusArgs {
  return &OmniSciGetServerStatusArgs{}
}


func (p *OmniSciGetServerStatusArgs) GetSession() TSessionId {
  return p.Session
}
func (p *OmniSciGetServerStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetServerStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetServerStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_server_status_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetServerStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetServerStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetServerStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetServerStatusResult struct {
  Success *TServerStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetServerStatusResult() *OmniSciGetServerStatusResult {
  return &OmniSciGetServerStatusResult{}
}

var OmniSciGetServerStatusResult_Success_DEFAULT *TServerStatus
func (p *OmniSciGetServerStatusResult) GetSuccess() *TServerStatus {
  if !p.IsSetSuccess() {
    return OmniSciGetServerStatusResult_Success_DEFAULT
  }
return p.Success
}
var OmniSciGetServerStatusResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetServerStatusResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetServerStatusResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetServerStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetServerStatusResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetServerStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetServerStatusResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TServerStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OmniSciGetServerStatusResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetServerStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_server_status_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetServerStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetServerStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetServerStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetServerStatusResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetStatusArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewOmniSciGetStatusArgs() *OmniSciGetStatusArgs {
  return &OmniSciGetStatusArgs{}
}


func (p *OmniSciGetStatusArgs) GetSession() TSessionId {
  return p.Session
}
func (p *OmniSciGetStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_status_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetStatusResult struct {
  Success []*TServerStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetStatusResult() *OmniSciGetStatusResult {
  return &OmniSciGetStatusResult{}
}

var OmniSciGetStatusResult_Success_DEFAULT []*TServerStatus

func (p *OmniSciGetStatusResult) GetSuccess() []*TServerStatus {
  return p.Success
}
var OmniSciGetStatusResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetStatusResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetStatusResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetStatusResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetStatusResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TServerStatus, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem214 := &TServerStatus{}
    if err := _elem214.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem214), err)
    }
    p.Success = append(p.Success, _elem214)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciGetStatusResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_status_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetStatusResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetHardwareInfoArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewOmniSciGetHardwareInfoArgs() *OmniSciGetHardwareInfoArgs {
  return &OmniSciGetHardwareInfoArgs{}
}


func (p *OmniSciGetHardwareInfoArgs) GetSession() TSessionId {
  return p.Session
}
func (p *OmniSciGetHardwareInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetHardwareInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetHardwareInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_hardware_info_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetHardwareInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetHardwareInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetHardwareInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetHardwareInfoResult struct {
  Success *TClusterHardwareInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetHardwareInfoResult() *OmniSciGetHardwareInfoResult {
  return &OmniSciGetHardwareInfoResult{}
}

var OmniSciGetHardwareInfoResult_Success_DEFAULT *TClusterHardwareInfo
func (p *OmniSciGetHardwareInfoResult) GetSuccess() *TClusterHardwareInfo {
  if !p.IsSetSuccess() {
    return OmniSciGetHardwareInfoResult_Success_DEFAULT
  }
return p.Success
}
var OmniSciGetHardwareInfoResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetHardwareInfoResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetHardwareInfoResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetHardwareInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetHardwareInfoResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetHardwareInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetHardwareInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TClusterHardwareInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OmniSciGetHardwareInfoResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetHardwareInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_hardware_info_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetHardwareInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetHardwareInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetHardwareInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetHardwareInfoResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetTablesArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewOmniSciGetTablesArgs() *OmniSciGetTablesArgs {
  return &OmniSciGetTablesArgs{}
}


func (p *OmniSciGetTablesArgs) GetSession() TSessionId {
  return p.Session
}
func (p *OmniSciGetTablesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetTablesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetTablesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_tables_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetTablesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetTablesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetTablesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetTablesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetTablesResult() *OmniSciGetTablesResult {
  return &OmniSciGetTablesResult{}
}

var OmniSciGetTablesResult_Success_DEFAULT []string

func (p *OmniSciGetTablesResult) GetSuccess() []string {
  return p.Success
}
var OmniSciGetTablesResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetTablesResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetTablesResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetTablesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetTablesResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetTablesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetTablesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem215 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem215 = v
}
    p.Success = append(p.Success, _elem215)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciGetTablesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetTablesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_tables_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetTablesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetTablesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetTablesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetTablesResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetPhysicalTablesArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewOmniSciGetPhysicalTablesArgs() *OmniSciGetPhysicalTablesArgs {
  return &OmniSciGetPhysicalTablesArgs{}
}


func (p *OmniSciGetPhysicalTablesArgs) GetSession() TSessionId {
  return p.Session
}
func (p *OmniSciGetPhysicalTablesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetPhysicalTablesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetPhysicalTablesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_physical_tables_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetPhysicalTablesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetPhysicalTablesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetPhysicalTablesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetPhysicalTablesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetPhysicalTablesResult() *OmniSciGetPhysicalTablesResult {
  return &OmniSciGetPhysicalTablesResult{}
}

var OmniSciGetPhysicalTablesResult_Success_DEFAULT []string

func (p *OmniSciGetPhysicalTablesResult) GetSuccess() []string {
  return p.Success
}
var OmniSciGetPhysicalTablesResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetPhysicalTablesResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetPhysicalTablesResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetPhysicalTablesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetPhysicalTablesResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetPhysicalTablesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetPhysicalTablesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem216 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem216 = v
}
    p.Success = append(p.Success, _elem216)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciGetPhysicalTablesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetPhysicalTablesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_physical_tables_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetPhysicalTablesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetPhysicalTablesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetPhysicalTablesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetPhysicalTablesResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetViewsArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewOmniSciGetViewsArgs() *OmniSciGetViewsArgs {
  return &OmniSciGetViewsArgs{}
}


func (p *OmniSciGetViewsArgs) GetSession() TSessionId {
  return p.Session
}
func (p *OmniSciGetViewsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetViewsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetViewsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_views_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetViewsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetViewsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetViewsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetViewsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetViewsResult() *OmniSciGetViewsResult {
  return &OmniSciGetViewsResult{}
}

var OmniSciGetViewsResult_Success_DEFAULT []string

func (p *OmniSciGetViewsResult) GetSuccess() []string {
  return p.Success
}
var OmniSciGetViewsResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetViewsResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetViewsResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetViewsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetViewsResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetViewsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetViewsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem217 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem217 = v
}
    p.Success = append(p.Success, _elem217)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciGetViewsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetViewsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_views_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetViewsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetViewsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetViewsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetViewsResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetTablesMetaArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewOmniSciGetTablesMetaArgs() *OmniSciGetTablesMetaArgs {
  return &OmniSciGetTablesMetaArgs{}
}


func (p *OmniSciGetTablesMetaArgs) GetSession() TSessionId {
  return p.Session
}
func (p *OmniSciGetTablesMetaArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetTablesMetaArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetTablesMetaArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_tables_meta_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetTablesMetaArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetTablesMetaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetTablesMetaArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetTablesMetaResult struct {
  Success []*TTableMeta `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetTablesMetaResult() *OmniSciGetTablesMetaResult {
  return &OmniSciGetTablesMetaResult{}
}

var OmniSciGetTablesMetaResult_Success_DEFAULT []*TTableMeta

func (p *OmniSciGetTablesMetaResult) GetSuccess() []*TTableMeta {
  return p.Success
}
var OmniSciGetTablesMetaResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetTablesMetaResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetTablesMetaResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetTablesMetaResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetTablesMetaResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetTablesMetaResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetTablesMetaResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TTableMeta, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem218 := &TTableMeta{}
    if err := _elem218.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem218), err)
    }
    p.Success = append(p.Success, _elem218)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciGetTablesMetaResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetTablesMetaResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_tables_meta_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetTablesMetaResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetTablesMetaResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetTablesMetaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetTablesMetaResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
type OmniSciGetTableDetailsArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
}

func NewOmniSciGetTableDetailsArgs() *OmniSciGetTableDetailsArgs {
  return &OmniSciGetTableDetailsArgs{}
}


func (p *OmniSciGetTableDetailsArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciGetTableDetailsArgs) GetTableName() string {
  return p.TableName
}
func (p *OmniSciGetTableDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetTableDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetTableDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *OmniSciGetTableDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_table_details_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetTableDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetTableDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *OmniSciGetTableDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetTableDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetTableDetailsResult struct {
  Success *TTableDetails `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetTableDetailsResult() *OmniSciGetTableDetailsResult {
  return &OmniSciGetTableDetailsResult{}
}

var OmniSciGetTableDetailsResult_Success_DEFAULT *TTableDetails
func (p *OmniSciGetTableDetailsResult) GetSuccess() *TTableDetails {
  if !p.IsSetSuccess() {
    return OmniSciGetTableDetailsResult_Success_DEFAULT
  }
return p.Success
}
var OmniSciGetTableDetailsResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetTableDetailsResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetTableDetailsResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetTableDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetTableDetailsResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetTableDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetTableDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TTableDetails{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OmniSciGetTableDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetTableDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_table_details_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetTableDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetTableDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetTableDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetTableDetailsResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
type OmniSciGetInternalTableDetailsArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
}

func NewOmniSciGetInternalTableDetailsArgs() *OmniSciGetInternalTableDetailsArgs {
  return &OmniSciGetInternalTableDetailsArgs{}
}


func (p *OmniSciGetInternalTableDetailsArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciGetInternalTableDetailsArgs) GetTableName() string {
  return p.TableName
}
func (p *OmniSciGetInternalTableDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetInternalTableDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetInternalTableDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *OmniSciGetInternalTableDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_internal_table_details_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetInternalTableDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetInternalTableDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *OmniSciGetInternalTableDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetInternalTableDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetInternalTableDetailsResult struct {
  Success *TTableDetails `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetInternalTableDetailsResult() *OmniSciGetInternalTableDetailsResult {
  return &OmniSciGetInternalTableDetailsResult{}
}

var OmniSciGetInternalTableDetailsResult_Success_DEFAULT *TTableDetails
func (p *OmniSciGetInternalTableDetailsResult) GetSuccess() *TTableDetails {
  if !p.IsSetSuccess() {
    return OmniSciGetInternalTableDetailsResult_Success_DEFAULT
  }
return p.Success
}
var OmniSciGetInternalTableDetailsResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetInternalTableDetailsResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetInternalTableDetailsResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetInternalTableDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetInternalTableDetailsResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetInternalTableDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetInternalTableDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TTableDetails{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OmniSciGetInternalTableDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetInternalTableDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_internal_table_details_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetInternalTableDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetInternalTableDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetInternalTableDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetInternalTableDetailsResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetUsersArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewOmniSciGetUsersArgs() *OmniSciGetUsersArgs {
  return &OmniSciGetUsersArgs{}
}


func (p *OmniSciGetUsersArgs) GetSession() TSessionId {
  return p.Session
}
func (p *OmniSciGetUsersArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetUsersArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetUsersArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_users_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetUsersArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetUsersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetUsersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetUsersResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetUsersResult() *OmniSciGetUsersResult {
  return &OmniSciGetUsersResult{}
}

var OmniSciGetUsersResult_Success_DEFAULT []string

func (p *OmniSciGetUsersResult) GetSuccess() []string {
  return p.Success
}
var OmniSciGetUsersResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetUsersResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetUsersResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetUsersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetUsersResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetUsersResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetUsersResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem219 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem219 = v
}
    p.Success = append(p.Success, _elem219)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciGetUsersResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetUsersResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_users_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetUsersResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetUsersResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetUsersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetUsersResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetDatabasesArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewOmniSciGetDatabasesArgs() *OmniSciGetDatabasesArgs {
  return &OmniSciGetDatabasesArgs{}
}


func (p *OmniSciGetDatabasesArgs) GetSession() TSessionId {
  return p.Session
}
func (p *OmniSciGetDatabasesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetDatabasesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetDatabasesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_databases_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetDatabasesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetDatabasesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetDatabasesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetDatabasesResult struct {
  Success []*TDBInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetDatabasesResult() *OmniSciGetDatabasesResult {
  return &OmniSciGetDatabasesResult{}
}

var OmniSciGetDatabasesResult_Success_DEFAULT []*TDBInfo

func (p *OmniSciGetDatabasesResult) GetSuccess() []*TDBInfo {
  return p.Success
}
var OmniSciGetDatabasesResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetDatabasesResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetDatabasesResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetDatabasesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetDatabasesResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetDatabasesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetDatabasesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDBInfo, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem220 := &TDBInfo{}
    if err := _elem220.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem220), err)
    }
    p.Success = append(p.Success, _elem220)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciGetDatabasesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetDatabasesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_databases_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetDatabasesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetDatabasesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetDatabasesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetDatabasesResult(%+v)", *p)
}

type OmniSciGetVersionArgs struct {
}

func NewOmniSciGetVersionArgs() *OmniSciGetVersionArgs {
  return &OmniSciGetVersionArgs{}
}

func (p *OmniSciGetVersionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetVersionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_version_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetVersionResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetVersionResult() *OmniSciGetVersionResult {
  return &OmniSciGetVersionResult{}
}

var OmniSciGetVersionResult_Success_DEFAULT string
func (p *OmniSciGetVersionResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return OmniSciGetVersionResult_Success_DEFAULT
  }
return *p.Success
}
var OmniSciGetVersionResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetVersionResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetVersionResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetVersionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetVersionResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetVersionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetVersionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *OmniSciGetVersionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetVersionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_version_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetVersionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetVersionResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciStartHeapProfileArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewOmniSciStartHeapProfileArgs() *OmniSciStartHeapProfileArgs {
  return &OmniSciStartHeapProfileArgs{}
}


func (p *OmniSciStartHeapProfileArgs) GetSession() TSessionId {
  return p.Session
}
func (p *OmniSciStartHeapProfileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciStartHeapProfileArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciStartHeapProfileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("start_heap_profile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciStartHeapProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciStartHeapProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciStartHeapProfileArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciStartHeapProfileResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciStartHeapProfileResult() *OmniSciStartHeapProfileResult {
  return &OmniSciStartHeapProfileResult{}
}

var OmniSciStartHeapProfileResult_E_DEFAULT *TOmniSciException
func (p *OmniSciStartHeapProfileResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciStartHeapProfileResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciStartHeapProfileResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciStartHeapProfileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciStartHeapProfileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciStartHeapProfileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("start_heap_profile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciStartHeapProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciStartHeapProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciStartHeapProfileResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciStopHeapProfileArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewOmniSciStopHeapProfileArgs() *OmniSciStopHeapProfileArgs {
  return &OmniSciStopHeapProfileArgs{}
}


func (p *OmniSciStopHeapProfileArgs) GetSession() TSessionId {
  return p.Session
}
func (p *OmniSciStopHeapProfileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciStopHeapProfileArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciStopHeapProfileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stop_heap_profile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciStopHeapProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciStopHeapProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciStopHeapProfileArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciStopHeapProfileResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciStopHeapProfileResult() *OmniSciStopHeapProfileResult {
  return &OmniSciStopHeapProfileResult{}
}

var OmniSciStopHeapProfileResult_E_DEFAULT *TOmniSciException
func (p *OmniSciStopHeapProfileResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciStopHeapProfileResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciStopHeapProfileResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciStopHeapProfileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciStopHeapProfileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciStopHeapProfileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stop_heap_profile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciStopHeapProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciStopHeapProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciStopHeapProfileResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetHeapProfileArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewOmniSciGetHeapProfileArgs() *OmniSciGetHeapProfileArgs {
  return &OmniSciGetHeapProfileArgs{}
}


func (p *OmniSciGetHeapProfileArgs) GetSession() TSessionId {
  return p.Session
}
func (p *OmniSciGetHeapProfileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetHeapProfileArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetHeapProfileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_heap_profile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetHeapProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetHeapProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetHeapProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetHeapProfileResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetHeapProfileResult() *OmniSciGetHeapProfileResult {
  return &OmniSciGetHeapProfileResult{}
}

var OmniSciGetHeapProfileResult_Success_DEFAULT string
func (p *OmniSciGetHeapProfileResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return OmniSciGetHeapProfileResult_Success_DEFAULT
  }
return *p.Success
}
var OmniSciGetHeapProfileResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetHeapProfileResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetHeapProfileResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetHeapProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetHeapProfileResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetHeapProfileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetHeapProfileResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *OmniSciGetHeapProfileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetHeapProfileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_heap_profile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetHeapProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetHeapProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetHeapProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetHeapProfileResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - MemoryLevel
type OmniSciGetMemoryArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  MemoryLevel string `thrift:"memory_level,2" db:"memory_level" json:"memory_level"`
}

func NewOmniSciGetMemoryArgs() *OmniSciGetMemoryArgs {
  return &OmniSciGetMemoryArgs{}
}


func (p *OmniSciGetMemoryArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciGetMemoryArgs) GetMemoryLevel() string {
  return p.MemoryLevel
}
func (p *OmniSciGetMemoryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetMemoryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetMemoryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MemoryLevel = v
}
  return nil
}

func (p *OmniSciGetMemoryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_memory_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetMemoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetMemoryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memory_level", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:memory_level: ", p), err) }
  if err := oprot.WriteString(string(p.MemoryLevel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memory_level (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:memory_level: ", p), err) }
  return err
}

func (p *OmniSciGetMemoryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetMemoryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetMemoryResult struct {
  Success []*TNodeMemoryInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetMemoryResult() *OmniSciGetMemoryResult {
  return &OmniSciGetMemoryResult{}
}

var OmniSciGetMemoryResult_Success_DEFAULT []*TNodeMemoryInfo

func (p *OmniSciGetMemoryResult) GetSuccess() []*TNodeMemoryInfo {
  return p.Success
}
var OmniSciGetMemoryResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetMemoryResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetMemoryResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetMemoryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetMemoryResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetMemoryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetMemoryResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TNodeMemoryInfo, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem221 := &TNodeMemoryInfo{}
    if err := _elem221.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem221), err)
    }
    p.Success = append(p.Success, _elem221)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciGetMemoryResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetMemoryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_memory_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetMemoryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetMemoryResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetMemoryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetMemoryResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciClearCPUMemoryArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewOmniSciClearCPUMemoryArgs() *OmniSciClearCPUMemoryArgs {
  return &OmniSciClearCPUMemoryArgs{}
}


func (p *OmniSciClearCPUMemoryArgs) GetSession() TSessionId {
  return p.Session
}
func (p *OmniSciClearCPUMemoryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciClearCPUMemoryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciClearCPUMemoryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("clear_cpu_memory_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciClearCPUMemoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciClearCPUMemoryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciClearCPUMemoryArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciClearCPUMemoryResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciClearCPUMemoryResult() *OmniSciClearCPUMemoryResult {
  return &OmniSciClearCPUMemoryResult{}
}

var OmniSciClearCPUMemoryResult_E_DEFAULT *TOmniSciException
func (p *OmniSciClearCPUMemoryResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciClearCPUMemoryResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciClearCPUMemoryResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciClearCPUMemoryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciClearCPUMemoryResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciClearCPUMemoryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("clear_cpu_memory_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciClearCPUMemoryResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciClearCPUMemoryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciClearCPUMemoryResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciClearGpuMemoryArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewOmniSciClearGpuMemoryArgs() *OmniSciClearGpuMemoryArgs {
  return &OmniSciClearGpuMemoryArgs{}
}


func (p *OmniSciClearGpuMemoryArgs) GetSession() TSessionId {
  return p.Session
}
func (p *OmniSciClearGpuMemoryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciClearGpuMemoryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciClearGpuMemoryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("clear_gpu_memory_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciClearGpuMemoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciClearGpuMemoryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciClearGpuMemoryArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciClearGpuMemoryResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciClearGpuMemoryResult() *OmniSciClearGpuMemoryResult {
  return &OmniSciClearGpuMemoryResult{}
}

var OmniSciClearGpuMemoryResult_E_DEFAULT *TOmniSciException
func (p *OmniSciClearGpuMemoryResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciClearGpuMemoryResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciClearGpuMemoryResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciClearGpuMemoryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciClearGpuMemoryResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciClearGpuMemoryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("clear_gpu_memory_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciClearGpuMemoryResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciClearGpuMemoryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciClearGpuMemoryResult(%+v)", *p)
}

// Attributes:
//  - ParentSession
//  - LeafSession
//  - StartTimeStr
//  - Label
type OmniSciSetCurSessionArgs struct {
  ParentSession TSessionId `thrift:"parent_session,1" db:"parent_session" json:"parent_session"`
  LeafSession TSessionId `thrift:"leaf_session,2" db:"leaf_session" json:"leaf_session"`
  StartTimeStr string `thrift:"start_time_str,3" db:"start_time_str" json:"start_time_str"`
  Label string `thrift:"label,4" db:"label" json:"label"`
}

func NewOmniSciSetCurSessionArgs() *OmniSciSetCurSessionArgs {
  return &OmniSciSetCurSessionArgs{}
}


func (p *OmniSciSetCurSessionArgs) GetParentSession() TSessionId {
  return p.ParentSession
}

func (p *OmniSciSetCurSessionArgs) GetLeafSession() TSessionId {
  return p.LeafSession
}

func (p *OmniSciSetCurSessionArgs) GetStartTimeStr() string {
  return p.StartTimeStr
}

func (p *OmniSciSetCurSessionArgs) GetLabel() string {
  return p.Label
}
func (p *OmniSciSetCurSessionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciSetCurSessionArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.ParentSession = temp
}
  return nil
}

func (p *OmniSciSetCurSessionArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TSessionId(v)
  p.LeafSession = temp
}
  return nil
}

func (p *OmniSciSetCurSessionArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartTimeStr = v
}
  return nil
}

func (p *OmniSciSetCurSessionArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Label = v
}
  return nil
}

func (p *OmniSciSetCurSessionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_cur_session_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciSetCurSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parent_session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:parent_session: ", p), err) }
  if err := oprot.WriteString(string(p.ParentSession)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parent_session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:parent_session: ", p), err) }
  return err
}

func (p *OmniSciSetCurSessionArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("leaf_session", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leaf_session: ", p), err) }
  if err := oprot.WriteString(string(p.LeafSession)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leaf_session (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leaf_session: ", p), err) }
  return err
}

func (p *OmniSciSetCurSessionArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("start_time_str", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:start_time_str: ", p), err) }
  if err := oprot.WriteString(string(p.StartTimeStr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time_str (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:start_time_str: ", p), err) }
  return err
}

func (p *OmniSciSetCurSessionArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("label", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:label: ", p), err) }
  if err := oprot.WriteString(string(p.Label)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.label (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:label: ", p), err) }
  return err
}

func (p *OmniSciSetCurSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciSetCurSessionArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciSetCurSessionResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciSetCurSessionResult() *OmniSciSetCurSessionResult {
  return &OmniSciSetCurSessionResult{}
}

var OmniSciSetCurSessionResult_E_DEFAULT *TOmniSciException
func (p *OmniSciSetCurSessionResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciSetCurSessionResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciSetCurSessionResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciSetCurSessionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciSetCurSessionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciSetCurSessionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_cur_session_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciSetCurSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciSetCurSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciSetCurSessionResult(%+v)", *p)
}

// Attributes:
//  - ParentSession
//  - LeafSession
//  - StartTimeStr
//  - Label
type OmniSciInvalidateCurSessionArgs struct {
  ParentSession TSessionId `thrift:"parent_session,1" db:"parent_session" json:"parent_session"`
  LeafSession TSessionId `thrift:"leaf_session,2" db:"leaf_session" json:"leaf_session"`
  StartTimeStr string `thrift:"start_time_str,3" db:"start_time_str" json:"start_time_str"`
  Label string `thrift:"label,4" db:"label" json:"label"`
}

func NewOmniSciInvalidateCurSessionArgs() *OmniSciInvalidateCurSessionArgs {
  return &OmniSciInvalidateCurSessionArgs{}
}


func (p *OmniSciInvalidateCurSessionArgs) GetParentSession() TSessionId {
  return p.ParentSession
}

func (p *OmniSciInvalidateCurSessionArgs) GetLeafSession() TSessionId {
  return p.LeafSession
}

func (p *OmniSciInvalidateCurSessionArgs) GetStartTimeStr() string {
  return p.StartTimeStr
}

func (p *OmniSciInvalidateCurSessionArgs) GetLabel() string {
  return p.Label
}
func (p *OmniSciInvalidateCurSessionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciInvalidateCurSessionArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.ParentSession = temp
}
  return nil
}

func (p *OmniSciInvalidateCurSessionArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TSessionId(v)
  p.LeafSession = temp
}
  return nil
}

func (p *OmniSciInvalidateCurSessionArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartTimeStr = v
}
  return nil
}

func (p *OmniSciInvalidateCurSessionArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Label = v
}
  return nil
}

func (p *OmniSciInvalidateCurSessionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("invalidate_cur_session_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciInvalidateCurSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parent_session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:parent_session: ", p), err) }
  if err := oprot.WriteString(string(p.ParentSession)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parent_session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:parent_session: ", p), err) }
  return err
}

func (p *OmniSciInvalidateCurSessionArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("leaf_session", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leaf_session: ", p), err) }
  if err := oprot.WriteString(string(p.LeafSession)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leaf_session (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leaf_session: ", p), err) }
  return err
}

func (p *OmniSciInvalidateCurSessionArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("start_time_str", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:start_time_str: ", p), err) }
  if err := oprot.WriteString(string(p.StartTimeStr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time_str (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:start_time_str: ", p), err) }
  return err
}

func (p *OmniSciInvalidateCurSessionArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("label", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:label: ", p), err) }
  if err := oprot.WriteString(string(p.Label)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.label (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:label: ", p), err) }
  return err
}

func (p *OmniSciInvalidateCurSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciInvalidateCurSessionArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciInvalidateCurSessionResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciInvalidateCurSessionResult() *OmniSciInvalidateCurSessionResult {
  return &OmniSciInvalidateCurSessionResult{}
}

var OmniSciInvalidateCurSessionResult_E_DEFAULT *TOmniSciException
func (p *OmniSciInvalidateCurSessionResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciInvalidateCurSessionResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciInvalidateCurSessionResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciInvalidateCurSessionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciInvalidateCurSessionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciInvalidateCurSessionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("invalidate_cur_session_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciInvalidateCurSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciInvalidateCurSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciInvalidateCurSessionResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DbID
//  - TableID
//  - NewEpoch_
type OmniSciSetTableEpochArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  DbID int32 `thrift:"db_id,2" db:"db_id" json:"db_id"`
  TableID int32 `thrift:"table_id,3" db:"table_id" json:"table_id"`
  NewEpoch_ int32 `thrift:"new_epoch,4" db:"new_epoch" json:"new_epoch"`
}

func NewOmniSciSetTableEpochArgs() *OmniSciSetTableEpochArgs {
  return &OmniSciSetTableEpochArgs{}
}


func (p *OmniSciSetTableEpochArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciSetTableEpochArgs) GetDbID() int32 {
  return p.DbID
}

func (p *OmniSciSetTableEpochArgs) GetTableID() int32 {
  return p.TableID
}

func (p *OmniSciSetTableEpochArgs) GetNewEpoch_() int32 {
  return p.NewEpoch_
}
func (p *OmniSciSetTableEpochArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciSetTableEpochArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciSetTableEpochArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DbID = v
}
  return nil
}

func (p *OmniSciSetTableEpochArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TableID = v
}
  return nil
}

func (p *OmniSciSetTableEpochArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NewEpoch_ = v
}
  return nil
}

func (p *OmniSciSetTableEpochArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_table_epoch_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciSetTableEpochArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciSetTableEpochArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:db_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.DbID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:db_id: ", p), err) }
  return err
}

func (p *OmniSciSetTableEpochArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:table_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TableID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:table_id: ", p), err) }
  return err
}

func (p *OmniSciSetTableEpochArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("new_epoch", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:new_epoch: ", p), err) }
  if err := oprot.WriteI32(int32(p.NewEpoch_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_epoch (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:new_epoch: ", p), err) }
  return err
}

func (p *OmniSciSetTableEpochArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciSetTableEpochArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciSetTableEpochResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciSetTableEpochResult() *OmniSciSetTableEpochResult {
  return &OmniSciSetTableEpochResult{}
}

var OmniSciSetTableEpochResult_E_DEFAULT *TOmniSciException
func (p *OmniSciSetTableEpochResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciSetTableEpochResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciSetTableEpochResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciSetTableEpochResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciSetTableEpochResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciSetTableEpochResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_table_epoch_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciSetTableEpochResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciSetTableEpochResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciSetTableEpochResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
//  - NewEpoch_
type OmniSciSetTableEpochByNameArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
  NewEpoch_ int32 `thrift:"new_epoch,3" db:"new_epoch" json:"new_epoch"`
}

func NewOmniSciSetTableEpochByNameArgs() *OmniSciSetTableEpochByNameArgs {
  return &OmniSciSetTableEpochByNameArgs{}
}


func (p *OmniSciSetTableEpochByNameArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciSetTableEpochByNameArgs) GetTableName() string {
  return p.TableName
}

func (p *OmniSciSetTableEpochByNameArgs) GetNewEpoch_() int32 {
  return p.NewEpoch_
}
func (p *OmniSciSetTableEpochByNameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciSetTableEpochByNameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciSetTableEpochByNameArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *OmniSciSetTableEpochByNameArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NewEpoch_ = v
}
  return nil
}

func (p *OmniSciSetTableEpochByNameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_table_epoch_by_name_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciSetTableEpochByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciSetTableEpochByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *OmniSciSetTableEpochByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("new_epoch", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_epoch: ", p), err) }
  if err := oprot.WriteI32(int32(p.NewEpoch_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_epoch (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_epoch: ", p), err) }
  return err
}

func (p *OmniSciSetTableEpochByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciSetTableEpochByNameArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciSetTableEpochByNameResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciSetTableEpochByNameResult() *OmniSciSetTableEpochByNameResult {
  return &OmniSciSetTableEpochByNameResult{}
}

var OmniSciSetTableEpochByNameResult_E_DEFAULT *TOmniSciException
func (p *OmniSciSetTableEpochByNameResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciSetTableEpochByNameResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciSetTableEpochByNameResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciSetTableEpochByNameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciSetTableEpochByNameResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciSetTableEpochByNameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_table_epoch_by_name_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciSetTableEpochByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciSetTableEpochByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciSetTableEpochByNameResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DbID
//  - TableID
type OmniSciGetTableEpochArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  DbID int32 `thrift:"db_id,2" db:"db_id" json:"db_id"`
  TableID int32 `thrift:"table_id,3" db:"table_id" json:"table_id"`
}

func NewOmniSciGetTableEpochArgs() *OmniSciGetTableEpochArgs {
  return &OmniSciGetTableEpochArgs{}
}


func (p *OmniSciGetTableEpochArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciGetTableEpochArgs) GetDbID() int32 {
  return p.DbID
}

func (p *OmniSciGetTableEpochArgs) GetTableID() int32 {
  return p.TableID
}
func (p *OmniSciGetTableEpochArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetTableEpochArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetTableEpochArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DbID = v
}
  return nil
}

func (p *OmniSciGetTableEpochArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TableID = v
}
  return nil
}

func (p *OmniSciGetTableEpochArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_table_epoch_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetTableEpochArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetTableEpochArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:db_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.DbID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:db_id: ", p), err) }
  return err
}

func (p *OmniSciGetTableEpochArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:table_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TableID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:table_id: ", p), err) }
  return err
}

func (p *OmniSciGetTableEpochArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetTableEpochArgs(%+v)", *p)
}

// Attributes:
//  - Success
type OmniSciGetTableEpochResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewOmniSciGetTableEpochResult() *OmniSciGetTableEpochResult {
  return &OmniSciGetTableEpochResult{}
}

var OmniSciGetTableEpochResult_Success_DEFAULT int32
func (p *OmniSciGetTableEpochResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return OmniSciGetTableEpochResult_Success_DEFAULT
  }
return *p.Success
}
func (p *OmniSciGetTableEpochResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetTableEpochResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetTableEpochResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *OmniSciGetTableEpochResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_table_epoch_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetTableEpochResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetTableEpochResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetTableEpochResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
type OmniSciGetTableEpochByNameArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
}

func NewOmniSciGetTableEpochByNameArgs() *OmniSciGetTableEpochByNameArgs {
  return &OmniSciGetTableEpochByNameArgs{}
}


func (p *OmniSciGetTableEpochByNameArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciGetTableEpochByNameArgs) GetTableName() string {
  return p.TableName
}
func (p *OmniSciGetTableEpochByNameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetTableEpochByNameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetTableEpochByNameArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *OmniSciGetTableEpochByNameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_table_epoch_by_name_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetTableEpochByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetTableEpochByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *OmniSciGetTableEpochByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetTableEpochByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type OmniSciGetTableEpochByNameResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewOmniSciGetTableEpochByNameResult() *OmniSciGetTableEpochByNameResult {
  return &OmniSciGetTableEpochByNameResult{}
}

var OmniSciGetTableEpochByNameResult_Success_DEFAULT int32
func (p *OmniSciGetTableEpochByNameResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return OmniSciGetTableEpochByNameResult_Success_DEFAULT
  }
return *p.Success
}
func (p *OmniSciGetTableEpochByNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetTableEpochByNameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetTableEpochByNameResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *OmniSciGetTableEpochByNameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_table_epoch_by_name_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetTableEpochByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetTableEpochByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetTableEpochByNameResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DbID
//  - TableID
type OmniSciGetTableEpochsArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  DbID int32 `thrift:"db_id,2" db:"db_id" json:"db_id"`
  TableID int32 `thrift:"table_id,3" db:"table_id" json:"table_id"`
}

func NewOmniSciGetTableEpochsArgs() *OmniSciGetTableEpochsArgs {
  return &OmniSciGetTableEpochsArgs{}
}


func (p *OmniSciGetTableEpochsArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciGetTableEpochsArgs) GetDbID() int32 {
  return p.DbID
}

func (p *OmniSciGetTableEpochsArgs) GetTableID() int32 {
  return p.TableID
}
func (p *OmniSciGetTableEpochsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetTableEpochsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetTableEpochsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DbID = v
}
  return nil
}

func (p *OmniSciGetTableEpochsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TableID = v
}
  return nil
}

func (p *OmniSciGetTableEpochsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_table_epochs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetTableEpochsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetTableEpochsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:db_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.DbID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:db_id: ", p), err) }
  return err
}

func (p *OmniSciGetTableEpochsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:table_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TableID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:table_id: ", p), err) }
  return err
}

func (p *OmniSciGetTableEpochsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetTableEpochsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type OmniSciGetTableEpochsResult struct {
  Success []*TTableEpochInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewOmniSciGetTableEpochsResult() *OmniSciGetTableEpochsResult {
  return &OmniSciGetTableEpochsResult{}
}

var OmniSciGetTableEpochsResult_Success_DEFAULT []*TTableEpochInfo

func (p *OmniSciGetTableEpochsResult) GetSuccess() []*TTableEpochInfo {
  return p.Success
}
func (p *OmniSciGetTableEpochsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetTableEpochsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetTableEpochsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TTableEpochInfo, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem222 := &TTableEpochInfo{}
    if err := _elem222.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem222), err)
    }
    p.Success = append(p.Success, _elem222)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciGetTableEpochsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_table_epochs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetTableEpochsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetTableEpochsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetTableEpochsResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DbID
//  - TableEpochs
type OmniSciSetTableEpochsArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  DbID int32 `thrift:"db_id,2" db:"db_id" json:"db_id"`
  TableEpochs []*TTableEpochInfo `thrift:"table_epochs,3" db:"table_epochs" json:"table_epochs"`
}

func NewOmniSciSetTableEpochsArgs() *OmniSciSetTableEpochsArgs {
  return &OmniSciSetTableEpochsArgs{}
}


func (p *OmniSciSetTableEpochsArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciSetTableEpochsArgs) GetDbID() int32 {
  return p.DbID
}

func (p *OmniSciSetTableEpochsArgs) GetTableEpochs() []*TTableEpochInfo {
  return p.TableEpochs
}
func (p *OmniSciSetTableEpochsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciSetTableEpochsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciSetTableEpochsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DbID = v
}
  return nil
}

func (p *OmniSciSetTableEpochsArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TTableEpochInfo, 0, size)
  p.TableEpochs =  tSlice
  for i := 0; i < size; i ++ {
    _elem223 := &TTableEpochInfo{}
    if err := _elem223.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem223), err)
    }
    p.TableEpochs = append(p.TableEpochs, _elem223)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciSetTableEpochsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_table_epochs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciSetTableEpochsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciSetTableEpochsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:db_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.DbID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:db_id: ", p), err) }
  return err
}

func (p *OmniSciSetTableEpochsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_epochs", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:table_epochs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TableEpochs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TableEpochs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:table_epochs: ", p), err) }
  return err
}

func (p *OmniSciSetTableEpochsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciSetTableEpochsArgs(%+v)", *p)
}

type OmniSciSetTableEpochsResult struct {
}

func NewOmniSciSetTableEpochsResult() *OmniSciSetTableEpochsResult {
  return &OmniSciSetTableEpochsResult{}
}

func (p *OmniSciSetTableEpochsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciSetTableEpochsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_table_epochs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciSetTableEpochsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciSetTableEpochsResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetSessionInfoArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewOmniSciGetSessionInfoArgs() *OmniSciGetSessionInfoArgs {
  return &OmniSciGetSessionInfoArgs{}
}


func (p *OmniSciGetSessionInfoArgs) GetSession() TSessionId {
  return p.Session
}
func (p *OmniSciGetSessionInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetSessionInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetSessionInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_session_info_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetSessionInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetSessionInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetSessionInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetSessionInfoResult struct {
  Success *TSessionInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetSessionInfoResult() *OmniSciGetSessionInfoResult {
  return &OmniSciGetSessionInfoResult{}
}

var OmniSciGetSessionInfoResult_Success_DEFAULT *TSessionInfo
func (p *OmniSciGetSessionInfoResult) GetSuccess() *TSessionInfo {
  if !p.IsSetSuccess() {
    return OmniSciGetSessionInfoResult_Success_DEFAULT
  }
return p.Success
}
var OmniSciGetSessionInfoResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetSessionInfoResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetSessionInfoResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetSessionInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetSessionInfoResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetSessionInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetSessionInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TSessionInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OmniSciGetSessionInfoResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetSessionInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_session_info_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetSessionInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetSessionInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetSessionInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetSessionInfoResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Query
//  - ColumnFormat
//  - Nonce
//  - FirstN
//  - AtMostN
type OmniSciSqlExecuteArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  Query string `thrift:"query,2" db:"query" json:"query"`
  ColumnFormat bool `thrift:"column_format,3" db:"column_format" json:"column_format"`
  Nonce string `thrift:"nonce,4" db:"nonce" json:"nonce"`
  FirstN int32 `thrift:"first_n,5" db:"first_n" json:"first_n"`
  AtMostN int32 `thrift:"at_most_n,6" db:"at_most_n" json:"at_most_n"`
}

func NewOmniSciSqlExecuteArgs() *OmniSciSqlExecuteArgs {
  return &OmniSciSqlExecuteArgs{
FirstN: -1,

AtMostN: -1,
}
}


func (p *OmniSciSqlExecuteArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciSqlExecuteArgs) GetQuery() string {
  return p.Query
}

func (p *OmniSciSqlExecuteArgs) GetColumnFormat() bool {
  return p.ColumnFormat
}

func (p *OmniSciSqlExecuteArgs) GetNonce() string {
  return p.Nonce
}

func (p *OmniSciSqlExecuteArgs) GetFirstN() int32 {
  return p.FirstN
}

func (p *OmniSciSqlExecuteArgs) GetAtMostN() int32 {
  return p.AtMostN
}
func (p *OmniSciSqlExecuteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciSqlExecuteArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciSqlExecuteArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Query = v
}
  return nil
}

func (p *OmniSciSqlExecuteArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ColumnFormat = v
}
  return nil
}

func (p *OmniSciSqlExecuteArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *OmniSciSqlExecuteArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.FirstN = v
}
  return nil
}

func (p *OmniSciSqlExecuteArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.AtMostN = v
}
  return nil
}

func (p *OmniSciSqlExecuteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sql_execute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciSqlExecuteArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciSqlExecuteArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query: ", p), err) }
  if err := oprot.WriteString(string(p.Query)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query: ", p), err) }
  return err
}

func (p *OmniSciSqlExecuteArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("column_format", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:column_format: ", p), err) }
  if err := oprot.WriteBool(bool(p.ColumnFormat)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.column_format (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:column_format: ", p), err) }
  return err
}

func (p *OmniSciSqlExecuteArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nonce: ", p), err) }
  if err := oprot.WriteString(string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nonce: ", p), err) }
  return err
}

func (p *OmniSciSqlExecuteArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("first_n", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:first_n: ", p), err) }
  if err := oprot.WriteI32(int32(p.FirstN)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.first_n (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:first_n: ", p), err) }
  return err
}

func (p *OmniSciSqlExecuteArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("at_most_n", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:at_most_n: ", p), err) }
  if err := oprot.WriteI32(int32(p.AtMostN)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.at_most_n (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:at_most_n: ", p), err) }
  return err
}

func (p *OmniSciSqlExecuteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciSqlExecuteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciSqlExecuteResult struct {
  Success *TQueryResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciSqlExecuteResult() *OmniSciSqlExecuteResult {
  return &OmniSciSqlExecuteResult{}
}

var OmniSciSqlExecuteResult_Success_DEFAULT *TQueryResult_
func (p *OmniSciSqlExecuteResult) GetSuccess() *TQueryResult_ {
  if !p.IsSetSuccess() {
    return OmniSciSqlExecuteResult_Success_DEFAULT
  }
return p.Success
}
var OmniSciSqlExecuteResult_E_DEFAULT *TOmniSciException
func (p *OmniSciSqlExecuteResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciSqlExecuteResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciSqlExecuteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciSqlExecuteResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciSqlExecuteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciSqlExecuteResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TQueryResult_{
  Success: true,

  QueryType:   0,
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OmniSciSqlExecuteResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciSqlExecuteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sql_execute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciSqlExecuteResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciSqlExecuteResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciSqlExecuteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciSqlExecuteResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Query
//  - DeviceType
//  - DeviceID
//  - FirstN
//  - TransportMethod
type OmniSciSqlExecuteDfArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  Query string `thrift:"query,2" db:"query" json:"query"`
  DeviceType common.TDeviceType `thrift:"device_type,3" db:"device_type" json:"device_type"`
  DeviceID int32 `thrift:"device_id,4" db:"device_id" json:"device_id"`
  FirstN int32 `thrift:"first_n,5" db:"first_n" json:"first_n"`
  TransportMethod TArrowTransport `thrift:"transport_method,6" db:"transport_method" json:"transport_method"`
}

func NewOmniSciSqlExecuteDfArgs() *OmniSciSqlExecuteDfArgs {
  return &OmniSciSqlExecuteDfArgs{
FirstN: -1,
}
}


func (p *OmniSciSqlExecuteDfArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciSqlExecuteDfArgs) GetQuery() string {
  return p.Query
}

func (p *OmniSciSqlExecuteDfArgs) GetDeviceType() common.TDeviceType {
  return p.DeviceType
}

func (p *OmniSciSqlExecuteDfArgs) GetDeviceID() int32 {
  return p.DeviceID
}

func (p *OmniSciSqlExecuteDfArgs) GetFirstN() int32 {
  return p.FirstN
}

func (p *OmniSciSqlExecuteDfArgs) GetTransportMethod() TArrowTransport {
  return p.TransportMethod
}
func (p *OmniSciSqlExecuteDfArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciSqlExecuteDfArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciSqlExecuteDfArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Query = v
}
  return nil
}

func (p *OmniSciSqlExecuteDfArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := common.TDeviceType(v)
  p.DeviceType = temp
}
  return nil
}

func (p *OmniSciSqlExecuteDfArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DeviceID = v
}
  return nil
}

func (p *OmniSciSqlExecuteDfArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.FirstN = v
}
  return nil
}

func (p *OmniSciSqlExecuteDfArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := TArrowTransport(v)
  p.TransportMethod = temp
}
  return nil
}

func (p *OmniSciSqlExecuteDfArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sql_execute_df_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciSqlExecuteDfArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciSqlExecuteDfArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query: ", p), err) }
  if err := oprot.WriteString(string(p.Query)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query: ", p), err) }
  return err
}

func (p *OmniSciSqlExecuteDfArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("device_type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:device_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.DeviceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.device_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:device_type: ", p), err) }
  return err
}

func (p *OmniSciSqlExecuteDfArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("device_id", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:device_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.DeviceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.device_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:device_id: ", p), err) }
  return err
}

func (p *OmniSciSqlExecuteDfArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("first_n", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:first_n: ", p), err) }
  if err := oprot.WriteI32(int32(p.FirstN)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.first_n (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:first_n: ", p), err) }
  return err
}

func (p *OmniSciSqlExecuteDfArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("transport_method", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:transport_method: ", p), err) }
  if err := oprot.WriteI32(int32(p.TransportMethod)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transport_method (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:transport_method: ", p), err) }
  return err
}

func (p *OmniSciSqlExecuteDfArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciSqlExecuteDfArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciSqlExecuteDfResult struct {
  Success *TDataFrame `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciSqlExecuteDfResult() *OmniSciSqlExecuteDfResult {
  return &OmniSciSqlExecuteDfResult{}
}

var OmniSciSqlExecuteDfResult_Success_DEFAULT *TDataFrame
func (p *OmniSciSqlExecuteDfResult) GetSuccess() *TDataFrame {
  if !p.IsSetSuccess() {
    return OmniSciSqlExecuteDfResult_Success_DEFAULT
  }
return p.Success
}
var OmniSciSqlExecuteDfResult_E_DEFAULT *TOmniSciException
func (p *OmniSciSqlExecuteDfResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciSqlExecuteDfResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciSqlExecuteDfResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciSqlExecuteDfResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciSqlExecuteDfResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciSqlExecuteDfResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDataFrame{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OmniSciSqlExecuteDfResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciSqlExecuteDfResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sql_execute_df_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciSqlExecuteDfResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciSqlExecuteDfResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciSqlExecuteDfResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciSqlExecuteDfResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Query
//  - DeviceID
//  - FirstN
type OmniSciSqlExecuteGdfArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  Query string `thrift:"query,2" db:"query" json:"query"`
  DeviceID int32 `thrift:"device_id,3" db:"device_id" json:"device_id"`
  FirstN int32 `thrift:"first_n,4" db:"first_n" json:"first_n"`
}

func NewOmniSciSqlExecuteGdfArgs() *OmniSciSqlExecuteGdfArgs {
  return &OmniSciSqlExecuteGdfArgs{
FirstN: -1,
}
}


func (p *OmniSciSqlExecuteGdfArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciSqlExecuteGdfArgs) GetQuery() string {
  return p.Query
}

func (p *OmniSciSqlExecuteGdfArgs) GetDeviceID() int32 {
  return p.DeviceID
}

func (p *OmniSciSqlExecuteGdfArgs) GetFirstN() int32 {
  return p.FirstN
}
func (p *OmniSciSqlExecuteGdfArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciSqlExecuteGdfArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciSqlExecuteGdfArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Query = v
}
  return nil
}

func (p *OmniSciSqlExecuteGdfArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DeviceID = v
}
  return nil
}

func (p *OmniSciSqlExecuteGdfArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FirstN = v
}
  return nil
}

func (p *OmniSciSqlExecuteGdfArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sql_execute_gdf_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciSqlExecuteGdfArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciSqlExecuteGdfArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query: ", p), err) }
  if err := oprot.WriteString(string(p.Query)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query: ", p), err) }
  return err
}

func (p *OmniSciSqlExecuteGdfArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("device_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:device_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.DeviceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.device_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:device_id: ", p), err) }
  return err
}

func (p *OmniSciSqlExecuteGdfArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("first_n", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:first_n: ", p), err) }
  if err := oprot.WriteI32(int32(p.FirstN)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.first_n (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:first_n: ", p), err) }
  return err
}

func (p *OmniSciSqlExecuteGdfArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciSqlExecuteGdfArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciSqlExecuteGdfResult struct {
  Success *TDataFrame `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciSqlExecuteGdfResult() *OmniSciSqlExecuteGdfResult {
  return &OmniSciSqlExecuteGdfResult{}
}

var OmniSciSqlExecuteGdfResult_Success_DEFAULT *TDataFrame
func (p *OmniSciSqlExecuteGdfResult) GetSuccess() *TDataFrame {
  if !p.IsSetSuccess() {
    return OmniSciSqlExecuteGdfResult_Success_DEFAULT
  }
return p.Success
}
var OmniSciSqlExecuteGdfResult_E_DEFAULT *TOmniSciException
func (p *OmniSciSqlExecuteGdfResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciSqlExecuteGdfResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciSqlExecuteGdfResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciSqlExecuteGdfResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciSqlExecuteGdfResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciSqlExecuteGdfResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDataFrame{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OmniSciSqlExecuteGdfResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciSqlExecuteGdfResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sql_execute_gdf_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciSqlExecuteGdfResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciSqlExecuteGdfResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciSqlExecuteGdfResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciSqlExecuteGdfResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Df
//  - DeviceType
//  - DeviceID
type OmniSciDeallocateDfArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  Df *TDataFrame `thrift:"df,2" db:"df" json:"df"`
  DeviceType common.TDeviceType `thrift:"device_type,3" db:"device_type" json:"device_type"`
  DeviceID int32 `thrift:"device_id,4" db:"device_id" json:"device_id"`
}

func NewOmniSciDeallocateDfArgs() *OmniSciDeallocateDfArgs {
  return &OmniSciDeallocateDfArgs{}
}


func (p *OmniSciDeallocateDfArgs) GetSession() TSessionId {
  return p.Session
}
var OmniSciDeallocateDfArgs_Df_DEFAULT *TDataFrame
func (p *OmniSciDeallocateDfArgs) GetDf() *TDataFrame {
  if !p.IsSetDf() {
    return OmniSciDeallocateDfArgs_Df_DEFAULT
  }
return p.Df
}

func (p *OmniSciDeallocateDfArgs) GetDeviceType() common.TDeviceType {
  return p.DeviceType
}

func (p *OmniSciDeallocateDfArgs) GetDeviceID() int32 {
  return p.DeviceID
}
func (p *OmniSciDeallocateDfArgs) IsSetDf() bool {
  return p.Df != nil
}

func (p *OmniSciDeallocateDfArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciDeallocateDfArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciDeallocateDfArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Df = &TDataFrame{}
  if err := p.Df.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Df), err)
  }
  return nil
}

func (p *OmniSciDeallocateDfArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := common.TDeviceType(v)
  p.DeviceType = temp
}
  return nil
}

func (p *OmniSciDeallocateDfArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DeviceID = v
}
  return nil
}

func (p *OmniSciDeallocateDfArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deallocate_df_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciDeallocateDfArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciDeallocateDfArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("df", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:df: ", p), err) }
  if err := p.Df.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Df), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:df: ", p), err) }
  return err
}

func (p *OmniSciDeallocateDfArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("device_type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:device_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.DeviceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.device_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:device_type: ", p), err) }
  return err
}

func (p *OmniSciDeallocateDfArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("device_id", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:device_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.DeviceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.device_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:device_id: ", p), err) }
  return err
}

func (p *OmniSciDeallocateDfArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciDeallocateDfArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciDeallocateDfResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciDeallocateDfResult() *OmniSciDeallocateDfResult {
  return &OmniSciDeallocateDfResult{}
}

var OmniSciDeallocateDfResult_E_DEFAULT *TOmniSciException
func (p *OmniSciDeallocateDfResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciDeallocateDfResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciDeallocateDfResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciDeallocateDfResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciDeallocateDfResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciDeallocateDfResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deallocate_df_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciDeallocateDfResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciDeallocateDfResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciDeallocateDfResult(%+v)", *p)
}

// Attributes:
//  - QuerySession
//  - InterruptSession
type OmniSciInterruptArgs struct {
  QuerySession TSessionId `thrift:"query_session,1" db:"query_session" json:"query_session"`
  InterruptSession TSessionId `thrift:"interrupt_session,2" db:"interrupt_session" json:"interrupt_session"`
}

func NewOmniSciInterruptArgs() *OmniSciInterruptArgs {
  return &OmniSciInterruptArgs{}
}


func (p *OmniSciInterruptArgs) GetQuerySession() TSessionId {
  return p.QuerySession
}

func (p *OmniSciInterruptArgs) GetInterruptSession() TSessionId {
  return p.InterruptSession
}
func (p *OmniSciInterruptArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciInterruptArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.QuerySession = temp
}
  return nil
}

func (p *OmniSciInterruptArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TSessionId(v)
  p.InterruptSession = temp
}
  return nil
}

func (p *OmniSciInterruptArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("interrupt_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciInterruptArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query_session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query_session: ", p), err) }
  if err := oprot.WriteString(string(p.QuerySession)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query_session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query_session: ", p), err) }
  return err
}

func (p *OmniSciInterruptArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("interrupt_session", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:interrupt_session: ", p), err) }
  if err := oprot.WriteString(string(p.InterruptSession)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.interrupt_session (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:interrupt_session: ", p), err) }
  return err
}

func (p *OmniSciInterruptArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciInterruptArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciInterruptResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciInterruptResult() *OmniSciInterruptResult {
  return &OmniSciInterruptResult{}
}

var OmniSciInterruptResult_E_DEFAULT *TOmniSciException
func (p *OmniSciInterruptResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciInterruptResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciInterruptResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciInterruptResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciInterruptResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciInterruptResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("interrupt_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciInterruptResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciInterruptResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciInterruptResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Query
type OmniSciSqlValidateArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  Query string `thrift:"query,2" db:"query" json:"query"`
}

func NewOmniSciSqlValidateArgs() *OmniSciSqlValidateArgs {
  return &OmniSciSqlValidateArgs{}
}


func (p *OmniSciSqlValidateArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciSqlValidateArgs) GetQuery() string {
  return p.Query
}
func (p *OmniSciSqlValidateArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciSqlValidateArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciSqlValidateArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Query = v
}
  return nil
}

func (p *OmniSciSqlValidateArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sql_validate_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciSqlValidateArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciSqlValidateArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query: ", p), err) }
  if err := oprot.WriteString(string(p.Query)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query: ", p), err) }
  return err
}

func (p *OmniSciSqlValidateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciSqlValidateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciSqlValidateResult struct {
  Success TRowDescriptor `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciSqlValidateResult() *OmniSciSqlValidateResult {
  return &OmniSciSqlValidateResult{}
}

var OmniSciSqlValidateResult_Success_DEFAULT TRowDescriptor

func (p *OmniSciSqlValidateResult) GetSuccess() TRowDescriptor {
  return p.Success
}
var OmniSciSqlValidateResult_E_DEFAULT *TOmniSciException
func (p *OmniSciSqlValidateResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciSqlValidateResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciSqlValidateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciSqlValidateResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciSqlValidateResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciSqlValidateResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make(TRowDescriptor, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem224 := &TColumnType{}
    if err := _elem224.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem224), err)
    }
    p.Success = append(p.Success, _elem224)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciSqlValidateResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciSqlValidateResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sql_validate_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciSqlValidateResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciSqlValidateResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciSqlValidateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciSqlValidateResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Sql
//  - Cursor
type OmniSciGetCompletionHintsArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  Sql string `thrift:"sql,2" db:"sql" json:"sql"`
  Cursor int32 `thrift:"cursor,3" db:"cursor" json:"cursor"`
}

func NewOmniSciGetCompletionHintsArgs() *OmniSciGetCompletionHintsArgs {
  return &OmniSciGetCompletionHintsArgs{}
}


func (p *OmniSciGetCompletionHintsArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciGetCompletionHintsArgs) GetSql() string {
  return p.Sql
}

func (p *OmniSciGetCompletionHintsArgs) GetCursor() int32 {
  return p.Cursor
}
func (p *OmniSciGetCompletionHintsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetCompletionHintsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetCompletionHintsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Sql = v
}
  return nil
}

func (p *OmniSciGetCompletionHintsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Cursor = v
}
  return nil
}

func (p *OmniSciGetCompletionHintsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_completion_hints_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetCompletionHintsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetCompletionHintsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sql", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sql: ", p), err) }
  if err := oprot.WriteString(string(p.Sql)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sql (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sql: ", p), err) }
  return err
}

func (p *OmniSciGetCompletionHintsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cursor", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cursor: ", p), err) }
  if err := oprot.WriteI32(int32(p.Cursor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cursor (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cursor: ", p), err) }
  return err
}

func (p *OmniSciGetCompletionHintsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetCompletionHintsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetCompletionHintsResult struct {
  Success []*completion_hints.TCompletionHint `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetCompletionHintsResult() *OmniSciGetCompletionHintsResult {
  return &OmniSciGetCompletionHintsResult{}
}

var OmniSciGetCompletionHintsResult_Success_DEFAULT []*completion_hints.TCompletionHint

func (p *OmniSciGetCompletionHintsResult) GetSuccess() []*completion_hints.TCompletionHint {
  return p.Success
}
var OmniSciGetCompletionHintsResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetCompletionHintsResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetCompletionHintsResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetCompletionHintsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetCompletionHintsResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetCompletionHintsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetCompletionHintsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*completion_hints.TCompletionHint, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem225 := &completion_hints.TCompletionHint{}
    if err := _elem225.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem225), err)
    }
    p.Success = append(p.Success, _elem225)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciGetCompletionHintsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetCompletionHintsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_completion_hints_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetCompletionHintsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetCompletionHintsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetCompletionHintsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetCompletionHintsResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Mode
type OmniSciSetExecutionModeArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  Mode TExecuteMode `thrift:"mode,2" db:"mode" json:"mode"`
}

func NewOmniSciSetExecutionModeArgs() *OmniSciSetExecutionModeArgs {
  return &OmniSciSetExecutionModeArgs{}
}


func (p *OmniSciSetExecutionModeArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciSetExecutionModeArgs) GetMode() TExecuteMode {
  return p.Mode
}
func (p *OmniSciSetExecutionModeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciSetExecutionModeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciSetExecutionModeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TExecuteMode(v)
  p.Mode = temp
}
  return nil
}

func (p *OmniSciSetExecutionModeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_execution_mode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciSetExecutionModeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciSetExecutionModeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mode", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Mode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mode: ", p), err) }
  return err
}

func (p *OmniSciSetExecutionModeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciSetExecutionModeArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciSetExecutionModeResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciSetExecutionModeResult() *OmniSciSetExecutionModeResult {
  return &OmniSciSetExecutionModeResult{}
}

var OmniSciSetExecutionModeResult_E_DEFAULT *TOmniSciException
func (p *OmniSciSetExecutionModeResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciSetExecutionModeResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciSetExecutionModeResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciSetExecutionModeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciSetExecutionModeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciSetExecutionModeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_execution_mode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciSetExecutionModeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciSetExecutionModeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciSetExecutionModeResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - WidgetID
//  - VegaJSON
//  - CompressionLevel
//  - Nonce
type OmniSciRenderVegaArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  WidgetID int64 `thrift:"widget_id,2" db:"widget_id" json:"widget_id"`
  VegaJSON string `thrift:"vega_json,3" db:"vega_json" json:"vega_json"`
  CompressionLevel int32 `thrift:"compression_level,4" db:"compression_level" json:"compression_level"`
  Nonce string `thrift:"nonce,5" db:"nonce" json:"nonce"`
}

func NewOmniSciRenderVegaArgs() *OmniSciRenderVegaArgs {
  return &OmniSciRenderVegaArgs{}
}


func (p *OmniSciRenderVegaArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciRenderVegaArgs) GetWidgetID() int64 {
  return p.WidgetID
}

func (p *OmniSciRenderVegaArgs) GetVegaJSON() string {
  return p.VegaJSON
}

func (p *OmniSciRenderVegaArgs) GetCompressionLevel() int32 {
  return p.CompressionLevel
}

func (p *OmniSciRenderVegaArgs) GetNonce() string {
  return p.Nonce
}
func (p *OmniSciRenderVegaArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciRenderVegaArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciRenderVegaArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WidgetID = v
}
  return nil
}

func (p *OmniSciRenderVegaArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.VegaJSON = v
}
  return nil
}

func (p *OmniSciRenderVegaArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CompressionLevel = v
}
  return nil
}

func (p *OmniSciRenderVegaArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *OmniSciRenderVegaArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("render_vega_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciRenderVegaArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciRenderVegaArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("widget_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:widget_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.WidgetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.widget_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:widget_id: ", p), err) }
  return err
}

func (p *OmniSciRenderVegaArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vega_json", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vega_json: ", p), err) }
  if err := oprot.WriteString(string(p.VegaJSON)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vega_json (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vega_json: ", p), err) }
  return err
}

func (p *OmniSciRenderVegaArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("compression_level", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:compression_level: ", p), err) }
  if err := oprot.WriteI32(int32(p.CompressionLevel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.compression_level (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:compression_level: ", p), err) }
  return err
}

func (p *OmniSciRenderVegaArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nonce: ", p), err) }
  if err := oprot.WriteString(string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nonce: ", p), err) }
  return err
}

func (p *OmniSciRenderVegaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciRenderVegaArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciRenderVegaResult struct {
  Success *TRenderResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciRenderVegaResult() *OmniSciRenderVegaResult {
  return &OmniSciRenderVegaResult{}
}

var OmniSciRenderVegaResult_Success_DEFAULT *TRenderResult_
func (p *OmniSciRenderVegaResult) GetSuccess() *TRenderResult_ {
  if !p.IsSetSuccess() {
    return OmniSciRenderVegaResult_Success_DEFAULT
  }
return p.Success
}
var OmniSciRenderVegaResult_E_DEFAULT *TOmniSciException
func (p *OmniSciRenderVegaResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciRenderVegaResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciRenderVegaResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciRenderVegaResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciRenderVegaResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciRenderVegaResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TRenderResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OmniSciRenderVegaResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciRenderVegaResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("render_vega_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciRenderVegaResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciRenderVegaResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciRenderVegaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciRenderVegaResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - WidgetID
//  - Pixel
//  - TableColNames
//  - ColumnFormat
//  - PixelRadius
//  - Nonce
type OmniSciGetResultRowForPixelArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  WidgetID int64 `thrift:"widget_id,2" db:"widget_id" json:"widget_id"`
  Pixel *TPixel `thrift:"pixel,3" db:"pixel" json:"pixel"`
  TableColNames map[string][]string `thrift:"table_col_names,4" db:"table_col_names" json:"table_col_names"`
  ColumnFormat bool `thrift:"column_format,5" db:"column_format" json:"column_format"`
  PixelRadius int32 `thrift:"pixelRadius,6" db:"pixelRadius" json:"pixelRadius"`
  Nonce string `thrift:"nonce,7" db:"nonce" json:"nonce"`
}

func NewOmniSciGetResultRowForPixelArgs() *OmniSciGetResultRowForPixelArgs {
  return &OmniSciGetResultRowForPixelArgs{}
}


func (p *OmniSciGetResultRowForPixelArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciGetResultRowForPixelArgs) GetWidgetID() int64 {
  return p.WidgetID
}
var OmniSciGetResultRowForPixelArgs_Pixel_DEFAULT *TPixel
func (p *OmniSciGetResultRowForPixelArgs) GetPixel() *TPixel {
  if !p.IsSetPixel() {
    return OmniSciGetResultRowForPixelArgs_Pixel_DEFAULT
  }
return p.Pixel
}

func (p *OmniSciGetResultRowForPixelArgs) GetTableColNames() map[string][]string {
  return p.TableColNames
}

func (p *OmniSciGetResultRowForPixelArgs) GetColumnFormat() bool {
  return p.ColumnFormat
}

func (p *OmniSciGetResultRowForPixelArgs) GetPixelRadius() int32 {
  return p.PixelRadius
}

func (p *OmniSciGetResultRowForPixelArgs) GetNonce() string {
  return p.Nonce
}
func (p *OmniSciGetResultRowForPixelArgs) IsSetPixel() bool {
  return p.Pixel != nil
}

func (p *OmniSciGetResultRowForPixelArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetResultRowForPixelArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetResultRowForPixelArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WidgetID = v
}
  return nil
}

func (p *OmniSciGetResultRowForPixelArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.Pixel = &TPixel{}
  if err := p.Pixel.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pixel), err)
  }
  return nil
}

func (p *OmniSciGetResultRowForPixelArgs)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]string, size)
  p.TableColNames =  tMap
  for i := 0; i < size; i ++ {
var _key226 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key226 = v
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]string, 0, size)
    _val227 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem228 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _elem228 = v
}
      _val227 = append(_val227, _elem228)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.TableColNames[_key226] = _val227
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *OmniSciGetResultRowForPixelArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ColumnFormat = v
}
  return nil
}

func (p *OmniSciGetResultRowForPixelArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.PixelRadius = v
}
  return nil
}

func (p *OmniSciGetResultRowForPixelArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *OmniSciGetResultRowForPixelArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_result_row_for_pixel_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetResultRowForPixelArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetResultRowForPixelArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("widget_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:widget_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.WidgetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.widget_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:widget_id: ", p), err) }
  return err
}

func (p *OmniSciGetResultRowForPixelArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pixel", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pixel: ", p), err) }
  if err := p.Pixel.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pixel), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pixel: ", p), err) }
  return err
}

func (p *OmniSciGetResultRowForPixelArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_col_names", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:table_col_names: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.TableColNames)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.TableColNames {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:table_col_names: ", p), err) }
  return err
}

func (p *OmniSciGetResultRowForPixelArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("column_format", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:column_format: ", p), err) }
  if err := oprot.WriteBool(bool(p.ColumnFormat)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.column_format (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:column_format: ", p), err) }
  return err
}

func (p *OmniSciGetResultRowForPixelArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pixelRadius", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:pixelRadius: ", p), err) }
  if err := oprot.WriteI32(int32(p.PixelRadius)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pixelRadius (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:pixelRadius: ", p), err) }
  return err
}

func (p *OmniSciGetResultRowForPixelArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:nonce: ", p), err) }
  if err := oprot.WriteString(string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:nonce: ", p), err) }
  return err
}

func (p *OmniSciGetResultRowForPixelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetResultRowForPixelArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetResultRowForPixelResult struct {
  Success *TPixelTableRowResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetResultRowForPixelResult() *OmniSciGetResultRowForPixelResult {
  return &OmniSciGetResultRowForPixelResult{}
}

var OmniSciGetResultRowForPixelResult_Success_DEFAULT *TPixelTableRowResult_
func (p *OmniSciGetResultRowForPixelResult) GetSuccess() *TPixelTableRowResult_ {
  if !p.IsSetSuccess() {
    return OmniSciGetResultRowForPixelResult_Success_DEFAULT
  }
return p.Success
}
var OmniSciGetResultRowForPixelResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetResultRowForPixelResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetResultRowForPixelResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetResultRowForPixelResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetResultRowForPixelResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetResultRowForPixelResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetResultRowForPixelResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TPixelTableRowResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OmniSciGetResultRowForPixelResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetResultRowForPixelResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_result_row_for_pixel_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetResultRowForPixelResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetResultRowForPixelResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetResultRowForPixelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetResultRowForPixelResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DashboardID
type OmniSciGetDashboardArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  DashboardID int32 `thrift:"dashboard_id,2" db:"dashboard_id" json:"dashboard_id"`
}

func NewOmniSciGetDashboardArgs() *OmniSciGetDashboardArgs {
  return &OmniSciGetDashboardArgs{}
}


func (p *OmniSciGetDashboardArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciGetDashboardArgs) GetDashboardID() int32 {
  return p.DashboardID
}
func (p *OmniSciGetDashboardArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetDashboardArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetDashboardArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DashboardID = v
}
  return nil
}

func (p *OmniSciGetDashboardArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_dashboard_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetDashboardArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetDashboardArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dashboard_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dashboard_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.DashboardID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dashboard_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dashboard_id: ", p), err) }
  return err
}

func (p *OmniSciGetDashboardArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetDashboardArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetDashboardResult struct {
  Success *TDashboard `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetDashboardResult() *OmniSciGetDashboardResult {
  return &OmniSciGetDashboardResult{}
}

var OmniSciGetDashboardResult_Success_DEFAULT *TDashboard
func (p *OmniSciGetDashboardResult) GetSuccess() *TDashboard {
  if !p.IsSetSuccess() {
    return OmniSciGetDashboardResult_Success_DEFAULT
  }
return p.Success
}
var OmniSciGetDashboardResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetDashboardResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetDashboardResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetDashboardResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetDashboardResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetDashboardResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetDashboardResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDashboard{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OmniSciGetDashboardResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetDashboardResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_dashboard_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetDashboardResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetDashboardResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetDashboardResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetDashboardResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetDashboardsArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewOmniSciGetDashboardsArgs() *OmniSciGetDashboardsArgs {
  return &OmniSciGetDashboardsArgs{}
}


func (p *OmniSciGetDashboardsArgs) GetSession() TSessionId {
  return p.Session
}
func (p *OmniSciGetDashboardsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetDashboardsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetDashboardsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_dashboards_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetDashboardsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetDashboardsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetDashboardsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetDashboardsResult struct {
  Success []*TDashboard `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetDashboardsResult() *OmniSciGetDashboardsResult {
  return &OmniSciGetDashboardsResult{}
}

var OmniSciGetDashboardsResult_Success_DEFAULT []*TDashboard

func (p *OmniSciGetDashboardsResult) GetSuccess() []*TDashboard {
  return p.Success
}
var OmniSciGetDashboardsResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetDashboardsResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetDashboardsResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetDashboardsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetDashboardsResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetDashboardsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetDashboardsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDashboard, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem229 := &TDashboard{}
    if err := _elem229.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem229), err)
    }
    p.Success = append(p.Success, _elem229)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciGetDashboardsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetDashboardsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_dashboards_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetDashboardsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetDashboardsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetDashboardsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetDashboardsResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DashboardName
//  - DashboardState
//  - ImageHash
//  - DashboardMetadata
type OmniSciCreateDashboardArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  DashboardName string `thrift:"dashboard_name,2" db:"dashboard_name" json:"dashboard_name"`
  DashboardState string `thrift:"dashboard_state,3" db:"dashboard_state" json:"dashboard_state"`
  ImageHash string `thrift:"image_hash,4" db:"image_hash" json:"image_hash"`
  DashboardMetadata string `thrift:"dashboard_metadata,5" db:"dashboard_metadata" json:"dashboard_metadata"`
}

func NewOmniSciCreateDashboardArgs() *OmniSciCreateDashboardArgs {
  return &OmniSciCreateDashboardArgs{}
}


func (p *OmniSciCreateDashboardArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciCreateDashboardArgs) GetDashboardName() string {
  return p.DashboardName
}

func (p *OmniSciCreateDashboardArgs) GetDashboardState() string {
  return p.DashboardState
}

func (p *OmniSciCreateDashboardArgs) GetImageHash() string {
  return p.ImageHash
}

func (p *OmniSciCreateDashboardArgs) GetDashboardMetadata() string {
  return p.DashboardMetadata
}
func (p *OmniSciCreateDashboardArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciCreateDashboardArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciCreateDashboardArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DashboardName = v
}
  return nil
}

func (p *OmniSciCreateDashboardArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DashboardState = v
}
  return nil
}

func (p *OmniSciCreateDashboardArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ImageHash = v
}
  return nil
}

func (p *OmniSciCreateDashboardArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.DashboardMetadata = v
}
  return nil
}

func (p *OmniSciCreateDashboardArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_dashboard_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciCreateDashboardArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciCreateDashboardArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dashboard_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dashboard_name: ", p), err) }
  if err := oprot.WriteString(string(p.DashboardName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dashboard_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dashboard_name: ", p), err) }
  return err
}

func (p *OmniSciCreateDashboardArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dashboard_state", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dashboard_state: ", p), err) }
  if err := oprot.WriteString(string(p.DashboardState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dashboard_state (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dashboard_state: ", p), err) }
  return err
}

func (p *OmniSciCreateDashboardArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_hash", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:image_hash: ", p), err) }
  if err := oprot.WriteString(string(p.ImageHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.image_hash (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:image_hash: ", p), err) }
  return err
}

func (p *OmniSciCreateDashboardArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dashboard_metadata", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:dashboard_metadata: ", p), err) }
  if err := oprot.WriteString(string(p.DashboardMetadata)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dashboard_metadata (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:dashboard_metadata: ", p), err) }
  return err
}

func (p *OmniSciCreateDashboardArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciCreateDashboardArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciCreateDashboardResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciCreateDashboardResult() *OmniSciCreateDashboardResult {
  return &OmniSciCreateDashboardResult{}
}

var OmniSciCreateDashboardResult_Success_DEFAULT int32
func (p *OmniSciCreateDashboardResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return OmniSciCreateDashboardResult_Success_DEFAULT
  }
return *p.Success
}
var OmniSciCreateDashboardResult_E_DEFAULT *TOmniSciException
func (p *OmniSciCreateDashboardResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciCreateDashboardResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciCreateDashboardResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciCreateDashboardResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciCreateDashboardResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciCreateDashboardResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *OmniSciCreateDashboardResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciCreateDashboardResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_dashboard_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciCreateDashboardResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciCreateDashboardResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciCreateDashboardResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciCreateDashboardResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DashboardID
//  - DashboardName
//  - DashboardOwner
//  - DashboardState
//  - ImageHash
//  - DashboardMetadata
type OmniSciReplaceDashboardArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  DashboardID int32 `thrift:"dashboard_id,2" db:"dashboard_id" json:"dashboard_id"`
  DashboardName string `thrift:"dashboard_name,3" db:"dashboard_name" json:"dashboard_name"`
  DashboardOwner string `thrift:"dashboard_owner,4" db:"dashboard_owner" json:"dashboard_owner"`
  DashboardState string `thrift:"dashboard_state,5" db:"dashboard_state" json:"dashboard_state"`
  ImageHash string `thrift:"image_hash,6" db:"image_hash" json:"image_hash"`
  DashboardMetadata string `thrift:"dashboard_metadata,7" db:"dashboard_metadata" json:"dashboard_metadata"`
}

func NewOmniSciReplaceDashboardArgs() *OmniSciReplaceDashboardArgs {
  return &OmniSciReplaceDashboardArgs{}
}


func (p *OmniSciReplaceDashboardArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciReplaceDashboardArgs) GetDashboardID() int32 {
  return p.DashboardID
}

func (p *OmniSciReplaceDashboardArgs) GetDashboardName() string {
  return p.DashboardName
}

func (p *OmniSciReplaceDashboardArgs) GetDashboardOwner() string {
  return p.DashboardOwner
}

func (p *OmniSciReplaceDashboardArgs) GetDashboardState() string {
  return p.DashboardState
}

func (p *OmniSciReplaceDashboardArgs) GetImageHash() string {
  return p.ImageHash
}

func (p *OmniSciReplaceDashboardArgs) GetDashboardMetadata() string {
  return p.DashboardMetadata
}
func (p *OmniSciReplaceDashboardArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciReplaceDashboardArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciReplaceDashboardArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DashboardID = v
}
  return nil
}

func (p *OmniSciReplaceDashboardArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DashboardName = v
}
  return nil
}

func (p *OmniSciReplaceDashboardArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DashboardOwner = v
}
  return nil
}

func (p *OmniSciReplaceDashboardArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.DashboardState = v
}
  return nil
}

func (p *OmniSciReplaceDashboardArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ImageHash = v
}
  return nil
}

func (p *OmniSciReplaceDashboardArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.DashboardMetadata = v
}
  return nil
}

func (p *OmniSciReplaceDashboardArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("replace_dashboard_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciReplaceDashboardArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciReplaceDashboardArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dashboard_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dashboard_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.DashboardID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dashboard_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dashboard_id: ", p), err) }
  return err
}

func (p *OmniSciReplaceDashboardArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dashboard_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dashboard_name: ", p), err) }
  if err := oprot.WriteString(string(p.DashboardName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dashboard_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dashboard_name: ", p), err) }
  return err
}

func (p *OmniSciReplaceDashboardArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dashboard_owner", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dashboard_owner: ", p), err) }
  if err := oprot.WriteString(string(p.DashboardOwner)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dashboard_owner (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dashboard_owner: ", p), err) }
  return err
}

func (p *OmniSciReplaceDashboardArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dashboard_state", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:dashboard_state: ", p), err) }
  if err := oprot.WriteString(string(p.DashboardState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dashboard_state (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:dashboard_state: ", p), err) }
  return err
}

func (p *OmniSciReplaceDashboardArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_hash", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:image_hash: ", p), err) }
  if err := oprot.WriteString(string(p.ImageHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.image_hash (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:image_hash: ", p), err) }
  return err
}

func (p *OmniSciReplaceDashboardArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dashboard_metadata", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dashboard_metadata: ", p), err) }
  if err := oprot.WriteString(string(p.DashboardMetadata)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dashboard_metadata (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dashboard_metadata: ", p), err) }
  return err
}

func (p *OmniSciReplaceDashboardArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciReplaceDashboardArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciReplaceDashboardResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciReplaceDashboardResult() *OmniSciReplaceDashboardResult {
  return &OmniSciReplaceDashboardResult{}
}

var OmniSciReplaceDashboardResult_E_DEFAULT *TOmniSciException
func (p *OmniSciReplaceDashboardResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciReplaceDashboardResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciReplaceDashboardResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciReplaceDashboardResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciReplaceDashboardResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciReplaceDashboardResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("replace_dashboard_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciReplaceDashboardResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciReplaceDashboardResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciReplaceDashboardResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DashboardID
type OmniSciDeleteDashboardArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  DashboardID int32 `thrift:"dashboard_id,2" db:"dashboard_id" json:"dashboard_id"`
}

func NewOmniSciDeleteDashboardArgs() *OmniSciDeleteDashboardArgs {
  return &OmniSciDeleteDashboardArgs{}
}


func (p *OmniSciDeleteDashboardArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciDeleteDashboardArgs) GetDashboardID() int32 {
  return p.DashboardID
}
func (p *OmniSciDeleteDashboardArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciDeleteDashboardArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciDeleteDashboardArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DashboardID = v
}
  return nil
}

func (p *OmniSciDeleteDashboardArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("delete_dashboard_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciDeleteDashboardArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciDeleteDashboardArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dashboard_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dashboard_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.DashboardID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dashboard_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dashboard_id: ", p), err) }
  return err
}

func (p *OmniSciDeleteDashboardArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciDeleteDashboardArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciDeleteDashboardResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciDeleteDashboardResult() *OmniSciDeleteDashboardResult {
  return &OmniSciDeleteDashboardResult{}
}

var OmniSciDeleteDashboardResult_E_DEFAULT *TOmniSciException
func (p *OmniSciDeleteDashboardResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciDeleteDashboardResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciDeleteDashboardResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciDeleteDashboardResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciDeleteDashboardResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciDeleteDashboardResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("delete_dashboard_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciDeleteDashboardResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciDeleteDashboardResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciDeleteDashboardResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DashboardIds
//  - Groups
//  - Permissions
type OmniSciShareDashboardsArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  DashboardIds []int32 `thrift:"dashboard_ids,2" db:"dashboard_ids" json:"dashboard_ids"`
  Groups []string `thrift:"groups,3" db:"groups" json:"groups"`
  Permissions *TDashboardPermissions `thrift:"permissions,4" db:"permissions" json:"permissions"`
}

func NewOmniSciShareDashboardsArgs() *OmniSciShareDashboardsArgs {
  return &OmniSciShareDashboardsArgs{}
}


func (p *OmniSciShareDashboardsArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciShareDashboardsArgs) GetDashboardIds() []int32 {
  return p.DashboardIds
}

func (p *OmniSciShareDashboardsArgs) GetGroups() []string {
  return p.Groups
}
var OmniSciShareDashboardsArgs_Permissions_DEFAULT *TDashboardPermissions
func (p *OmniSciShareDashboardsArgs) GetPermissions() *TDashboardPermissions {
  if !p.IsSetPermissions() {
    return OmniSciShareDashboardsArgs_Permissions_DEFAULT
  }
return p.Permissions
}
func (p *OmniSciShareDashboardsArgs) IsSetPermissions() bool {
  return p.Permissions != nil
}

func (p *OmniSciShareDashboardsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciShareDashboardsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciShareDashboardsArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.DashboardIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem230 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem230 = v
}
    p.DashboardIds = append(p.DashboardIds, _elem230)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciShareDashboardsArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Groups =  tSlice
  for i := 0; i < size; i ++ {
var _elem231 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem231 = v
}
    p.Groups = append(p.Groups, _elem231)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciShareDashboardsArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.Permissions = &TDashboardPermissions{}
  if err := p.Permissions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Permissions), err)
  }
  return nil
}

func (p *OmniSciShareDashboardsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("share_dashboards_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciShareDashboardsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciShareDashboardsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dashboard_ids", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dashboard_ids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.DashboardIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.DashboardIds {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dashboard_ids: ", p), err) }
  return err
}

func (p *OmniSciShareDashboardsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groups", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groups: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Groups)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Groups {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groups: ", p), err) }
  return err
}

func (p *OmniSciShareDashboardsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("permissions", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:permissions: ", p), err) }
  if err := p.Permissions.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Permissions), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:permissions: ", p), err) }
  return err
}

func (p *OmniSciShareDashboardsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciShareDashboardsArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciShareDashboardsResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciShareDashboardsResult() *OmniSciShareDashboardsResult {
  return &OmniSciShareDashboardsResult{}
}

var OmniSciShareDashboardsResult_E_DEFAULT *TOmniSciException
func (p *OmniSciShareDashboardsResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciShareDashboardsResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciShareDashboardsResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciShareDashboardsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciShareDashboardsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciShareDashboardsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("share_dashboards_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciShareDashboardsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciShareDashboardsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciShareDashboardsResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DashboardIds
type OmniSciDeleteDashboardsArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  DashboardIds []int32 `thrift:"dashboard_ids,2" db:"dashboard_ids" json:"dashboard_ids"`
}

func NewOmniSciDeleteDashboardsArgs() *OmniSciDeleteDashboardsArgs {
  return &OmniSciDeleteDashboardsArgs{}
}


func (p *OmniSciDeleteDashboardsArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciDeleteDashboardsArgs) GetDashboardIds() []int32 {
  return p.DashboardIds
}
func (p *OmniSciDeleteDashboardsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciDeleteDashboardsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciDeleteDashboardsArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.DashboardIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem232 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem232 = v
}
    p.DashboardIds = append(p.DashboardIds, _elem232)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciDeleteDashboardsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("delete_dashboards_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciDeleteDashboardsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciDeleteDashboardsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dashboard_ids", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dashboard_ids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.DashboardIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.DashboardIds {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dashboard_ids: ", p), err) }
  return err
}

func (p *OmniSciDeleteDashboardsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciDeleteDashboardsArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciDeleteDashboardsResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciDeleteDashboardsResult() *OmniSciDeleteDashboardsResult {
  return &OmniSciDeleteDashboardsResult{}
}

var OmniSciDeleteDashboardsResult_E_DEFAULT *TOmniSciException
func (p *OmniSciDeleteDashboardsResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciDeleteDashboardsResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciDeleteDashboardsResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciDeleteDashboardsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciDeleteDashboardsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciDeleteDashboardsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("delete_dashboards_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciDeleteDashboardsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciDeleteDashboardsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciDeleteDashboardsResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DashboardID
//  - Groups
//  - Objects
//  - Permissions
//  - GrantRole
type OmniSciShareDashboardArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  DashboardID int32 `thrift:"dashboard_id,2" db:"dashboard_id" json:"dashboard_id"`
  Groups []string `thrift:"groups,3" db:"groups" json:"groups"`
  Objects []string `thrift:"objects,4" db:"objects" json:"objects"`
  Permissions *TDashboardPermissions `thrift:"permissions,5" db:"permissions" json:"permissions"`
  GrantRole bool `thrift:"grant_role,6" db:"grant_role" json:"grant_role"`
}

func NewOmniSciShareDashboardArgs() *OmniSciShareDashboardArgs {
  return &OmniSciShareDashboardArgs{}
}


func (p *OmniSciShareDashboardArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciShareDashboardArgs) GetDashboardID() int32 {
  return p.DashboardID
}

func (p *OmniSciShareDashboardArgs) GetGroups() []string {
  return p.Groups
}

func (p *OmniSciShareDashboardArgs) GetObjects() []string {
  return p.Objects
}
var OmniSciShareDashboardArgs_Permissions_DEFAULT *TDashboardPermissions
func (p *OmniSciShareDashboardArgs) GetPermissions() *TDashboardPermissions {
  if !p.IsSetPermissions() {
    return OmniSciShareDashboardArgs_Permissions_DEFAULT
  }
return p.Permissions
}

func (p *OmniSciShareDashboardArgs) GetGrantRole() bool {
  return p.GrantRole
}
func (p *OmniSciShareDashboardArgs) IsSetPermissions() bool {
  return p.Permissions != nil
}

func (p *OmniSciShareDashboardArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciShareDashboardArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciShareDashboardArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DashboardID = v
}
  return nil
}

func (p *OmniSciShareDashboardArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Groups =  tSlice
  for i := 0; i < size; i ++ {
var _elem233 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem233 = v
}
    p.Groups = append(p.Groups, _elem233)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciShareDashboardArgs)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Objects =  tSlice
  for i := 0; i < size; i ++ {
var _elem234 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem234 = v
}
    p.Objects = append(p.Objects, _elem234)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciShareDashboardArgs)  ReadField5(iprot thrift.TProtocol) error {
  p.Permissions = &TDashboardPermissions{}
  if err := p.Permissions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Permissions), err)
  }
  return nil
}

func (p *OmniSciShareDashboardArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.GrantRole = v
}
  return nil
}

func (p *OmniSciShareDashboardArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("share_dashboard_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciShareDashboardArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciShareDashboardArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dashboard_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dashboard_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.DashboardID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dashboard_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dashboard_id: ", p), err) }
  return err
}

func (p *OmniSciShareDashboardArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groups", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groups: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Groups)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Groups {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groups: ", p), err) }
  return err
}

func (p *OmniSciShareDashboardArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("objects", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:objects: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Objects)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Objects {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:objects: ", p), err) }
  return err
}

func (p *OmniSciShareDashboardArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("permissions", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:permissions: ", p), err) }
  if err := p.Permissions.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Permissions), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:permissions: ", p), err) }
  return err
}

func (p *OmniSciShareDashboardArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("grant_role", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:grant_role: ", p), err) }
  if err := oprot.WriteBool(bool(p.GrantRole)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.grant_role (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:grant_role: ", p), err) }
  return err
}

func (p *OmniSciShareDashboardArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciShareDashboardArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciShareDashboardResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciShareDashboardResult() *OmniSciShareDashboardResult {
  return &OmniSciShareDashboardResult{}
}

var OmniSciShareDashboardResult_E_DEFAULT *TOmniSciException
func (p *OmniSciShareDashboardResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciShareDashboardResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciShareDashboardResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciShareDashboardResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciShareDashboardResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciShareDashboardResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("share_dashboard_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciShareDashboardResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciShareDashboardResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciShareDashboardResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DashboardID
//  - Groups
//  - Objects
//  - Permissions
type OmniSciUnshareDashboardArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  DashboardID int32 `thrift:"dashboard_id,2" db:"dashboard_id" json:"dashboard_id"`
  Groups []string `thrift:"groups,3" db:"groups" json:"groups"`
  Objects []string `thrift:"objects,4" db:"objects" json:"objects"`
  Permissions *TDashboardPermissions `thrift:"permissions,5" db:"permissions" json:"permissions"`
}

func NewOmniSciUnshareDashboardArgs() *OmniSciUnshareDashboardArgs {
  return &OmniSciUnshareDashboardArgs{}
}


func (p *OmniSciUnshareDashboardArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciUnshareDashboardArgs) GetDashboardID() int32 {
  return p.DashboardID
}

func (p *OmniSciUnshareDashboardArgs) GetGroups() []string {
  return p.Groups
}

func (p *OmniSciUnshareDashboardArgs) GetObjects() []string {
  return p.Objects
}
var OmniSciUnshareDashboardArgs_Permissions_DEFAULT *TDashboardPermissions
func (p *OmniSciUnshareDashboardArgs) GetPermissions() *TDashboardPermissions {
  if !p.IsSetPermissions() {
    return OmniSciUnshareDashboardArgs_Permissions_DEFAULT
  }
return p.Permissions
}
func (p *OmniSciUnshareDashboardArgs) IsSetPermissions() bool {
  return p.Permissions != nil
}

func (p *OmniSciUnshareDashboardArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciUnshareDashboardArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciUnshareDashboardArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DashboardID = v
}
  return nil
}

func (p *OmniSciUnshareDashboardArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Groups =  tSlice
  for i := 0; i < size; i ++ {
var _elem235 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem235 = v
}
    p.Groups = append(p.Groups, _elem235)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciUnshareDashboardArgs)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Objects =  tSlice
  for i := 0; i < size; i ++ {
var _elem236 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem236 = v
}
    p.Objects = append(p.Objects, _elem236)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciUnshareDashboardArgs)  ReadField5(iprot thrift.TProtocol) error {
  p.Permissions = &TDashboardPermissions{}
  if err := p.Permissions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Permissions), err)
  }
  return nil
}

func (p *OmniSciUnshareDashboardArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unshare_dashboard_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciUnshareDashboardArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciUnshareDashboardArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dashboard_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dashboard_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.DashboardID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dashboard_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dashboard_id: ", p), err) }
  return err
}

func (p *OmniSciUnshareDashboardArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groups", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groups: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Groups)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Groups {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groups: ", p), err) }
  return err
}

func (p *OmniSciUnshareDashboardArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("objects", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:objects: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Objects)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Objects {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:objects: ", p), err) }
  return err
}

func (p *OmniSciUnshareDashboardArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("permissions", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:permissions: ", p), err) }
  if err := p.Permissions.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Permissions), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:permissions: ", p), err) }
  return err
}

func (p *OmniSciUnshareDashboardArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciUnshareDashboardArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciUnshareDashboardResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciUnshareDashboardResult() *OmniSciUnshareDashboardResult {
  return &OmniSciUnshareDashboardResult{}
}

var OmniSciUnshareDashboardResult_E_DEFAULT *TOmniSciException
func (p *OmniSciUnshareDashboardResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciUnshareDashboardResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciUnshareDashboardResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciUnshareDashboardResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciUnshareDashboardResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciUnshareDashboardResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unshare_dashboard_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciUnshareDashboardResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciUnshareDashboardResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciUnshareDashboardResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DashboardIds
//  - Groups
//  - Permissions
type OmniSciUnshareDashboardsArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  DashboardIds []int32 `thrift:"dashboard_ids,2" db:"dashboard_ids" json:"dashboard_ids"`
  Groups []string `thrift:"groups,3" db:"groups" json:"groups"`
  Permissions *TDashboardPermissions `thrift:"permissions,4" db:"permissions" json:"permissions"`
}

func NewOmniSciUnshareDashboardsArgs() *OmniSciUnshareDashboardsArgs {
  return &OmniSciUnshareDashboardsArgs{}
}


func (p *OmniSciUnshareDashboardsArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciUnshareDashboardsArgs) GetDashboardIds() []int32 {
  return p.DashboardIds
}

func (p *OmniSciUnshareDashboardsArgs) GetGroups() []string {
  return p.Groups
}
var OmniSciUnshareDashboardsArgs_Permissions_DEFAULT *TDashboardPermissions
func (p *OmniSciUnshareDashboardsArgs) GetPermissions() *TDashboardPermissions {
  if !p.IsSetPermissions() {
    return OmniSciUnshareDashboardsArgs_Permissions_DEFAULT
  }
return p.Permissions
}
func (p *OmniSciUnshareDashboardsArgs) IsSetPermissions() bool {
  return p.Permissions != nil
}

func (p *OmniSciUnshareDashboardsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciUnshareDashboardsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciUnshareDashboardsArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.DashboardIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem237 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem237 = v
}
    p.DashboardIds = append(p.DashboardIds, _elem237)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciUnshareDashboardsArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Groups =  tSlice
  for i := 0; i < size; i ++ {
var _elem238 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem238 = v
}
    p.Groups = append(p.Groups, _elem238)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciUnshareDashboardsArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.Permissions = &TDashboardPermissions{}
  if err := p.Permissions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Permissions), err)
  }
  return nil
}

func (p *OmniSciUnshareDashboardsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unshare_dashboards_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciUnshareDashboardsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciUnshareDashboardsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dashboard_ids", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dashboard_ids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.DashboardIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.DashboardIds {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dashboard_ids: ", p), err) }
  return err
}

func (p *OmniSciUnshareDashboardsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groups", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groups: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Groups)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Groups {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groups: ", p), err) }
  return err
}

func (p *OmniSciUnshareDashboardsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("permissions", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:permissions: ", p), err) }
  if err := p.Permissions.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Permissions), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:permissions: ", p), err) }
  return err
}

func (p *OmniSciUnshareDashboardsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciUnshareDashboardsArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciUnshareDashboardsResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciUnshareDashboardsResult() *OmniSciUnshareDashboardsResult {
  return &OmniSciUnshareDashboardsResult{}
}

var OmniSciUnshareDashboardsResult_E_DEFAULT *TOmniSciException
func (p *OmniSciUnshareDashboardsResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciUnshareDashboardsResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciUnshareDashboardsResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciUnshareDashboardsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciUnshareDashboardsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciUnshareDashboardsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unshare_dashboards_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciUnshareDashboardsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciUnshareDashboardsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciUnshareDashboardsResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DashboardID
type OmniSciGetDashboardGranteesArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  DashboardID int32 `thrift:"dashboard_id,2" db:"dashboard_id" json:"dashboard_id"`
}

func NewOmniSciGetDashboardGranteesArgs() *OmniSciGetDashboardGranteesArgs {
  return &OmniSciGetDashboardGranteesArgs{}
}


func (p *OmniSciGetDashboardGranteesArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciGetDashboardGranteesArgs) GetDashboardID() int32 {
  return p.DashboardID
}
func (p *OmniSciGetDashboardGranteesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetDashboardGranteesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetDashboardGranteesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DashboardID = v
}
  return nil
}

func (p *OmniSciGetDashboardGranteesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_dashboard_grantees_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetDashboardGranteesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetDashboardGranteesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dashboard_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dashboard_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.DashboardID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dashboard_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dashboard_id: ", p), err) }
  return err
}

func (p *OmniSciGetDashboardGranteesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetDashboardGranteesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetDashboardGranteesResult struct {
  Success []*TDashboardGrantees `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetDashboardGranteesResult() *OmniSciGetDashboardGranteesResult {
  return &OmniSciGetDashboardGranteesResult{}
}

var OmniSciGetDashboardGranteesResult_Success_DEFAULT []*TDashboardGrantees

func (p *OmniSciGetDashboardGranteesResult) GetSuccess() []*TDashboardGrantees {
  return p.Success
}
var OmniSciGetDashboardGranteesResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetDashboardGranteesResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetDashboardGranteesResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetDashboardGranteesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetDashboardGranteesResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetDashboardGranteesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetDashboardGranteesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDashboardGrantees, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem239 := &TDashboardGrantees{}
    if err := _elem239.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem239), err)
    }
    p.Success = append(p.Success, _elem239)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciGetDashboardGranteesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetDashboardGranteesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_dashboard_grantees_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetDashboardGranteesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetDashboardGranteesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetDashboardGranteesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetDashboardGranteesResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Link
type OmniSciGetLinkViewArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  Link string `thrift:"link,2" db:"link" json:"link"`
}

func NewOmniSciGetLinkViewArgs() *OmniSciGetLinkViewArgs {
  return &OmniSciGetLinkViewArgs{}
}


func (p *OmniSciGetLinkViewArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciGetLinkViewArgs) GetLink() string {
  return p.Link
}
func (p *OmniSciGetLinkViewArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetLinkViewArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetLinkViewArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Link = v
}
  return nil
}

func (p *OmniSciGetLinkViewArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_link_view_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetLinkViewArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetLinkViewArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("link", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:link: ", p), err) }
  if err := oprot.WriteString(string(p.Link)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.link (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:link: ", p), err) }
  return err
}

func (p *OmniSciGetLinkViewArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetLinkViewArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetLinkViewResult struct {
  Success *TFrontendView `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetLinkViewResult() *OmniSciGetLinkViewResult {
  return &OmniSciGetLinkViewResult{}
}

var OmniSciGetLinkViewResult_Success_DEFAULT *TFrontendView
func (p *OmniSciGetLinkViewResult) GetSuccess() *TFrontendView {
  if !p.IsSetSuccess() {
    return OmniSciGetLinkViewResult_Success_DEFAULT
  }
return p.Success
}
var OmniSciGetLinkViewResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetLinkViewResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetLinkViewResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetLinkViewResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetLinkViewResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetLinkViewResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetLinkViewResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TFrontendView{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OmniSciGetLinkViewResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetLinkViewResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_link_view_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetLinkViewResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetLinkViewResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetLinkViewResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetLinkViewResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - ViewState
//  - ViewMetadata
type OmniSciCreateLinkArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  ViewState string `thrift:"view_state,2" db:"view_state" json:"view_state"`
  ViewMetadata string `thrift:"view_metadata,3" db:"view_metadata" json:"view_metadata"`
}

func NewOmniSciCreateLinkArgs() *OmniSciCreateLinkArgs {
  return &OmniSciCreateLinkArgs{}
}


func (p *OmniSciCreateLinkArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciCreateLinkArgs) GetViewState() string {
  return p.ViewState
}

func (p *OmniSciCreateLinkArgs) GetViewMetadata() string {
  return p.ViewMetadata
}
func (p *OmniSciCreateLinkArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciCreateLinkArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciCreateLinkArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ViewState = v
}
  return nil
}

func (p *OmniSciCreateLinkArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ViewMetadata = v
}
  return nil
}

func (p *OmniSciCreateLinkArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_link_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciCreateLinkArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciCreateLinkArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("view_state", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:view_state: ", p), err) }
  if err := oprot.WriteString(string(p.ViewState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.view_state (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:view_state: ", p), err) }
  return err
}

func (p *OmniSciCreateLinkArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("view_metadata", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:view_metadata: ", p), err) }
  if err := oprot.WriteString(string(p.ViewMetadata)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.view_metadata (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:view_metadata: ", p), err) }
  return err
}

func (p *OmniSciCreateLinkArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciCreateLinkArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciCreateLinkResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciCreateLinkResult() *OmniSciCreateLinkResult {
  return &OmniSciCreateLinkResult{}
}

var OmniSciCreateLinkResult_Success_DEFAULT string
func (p *OmniSciCreateLinkResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return OmniSciCreateLinkResult_Success_DEFAULT
  }
return *p.Success
}
var OmniSciCreateLinkResult_E_DEFAULT *TOmniSciException
func (p *OmniSciCreateLinkResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciCreateLinkResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciCreateLinkResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciCreateLinkResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciCreateLinkResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciCreateLinkResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *OmniSciCreateLinkResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciCreateLinkResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_link_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciCreateLinkResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciCreateLinkResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciCreateLinkResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciCreateLinkResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
//  - Rows
//  - ColumnNames
type OmniSciLoadTableBinaryArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
  Rows []*TRow `thrift:"rows,3" db:"rows" json:"rows"`
  ColumnNames []string `thrift:"column_names,4" db:"column_names" json:"column_names"`
}

func NewOmniSciLoadTableBinaryArgs() *OmniSciLoadTableBinaryArgs {
  return &OmniSciLoadTableBinaryArgs{
ColumnNames: []string{
},
}
}


func (p *OmniSciLoadTableBinaryArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciLoadTableBinaryArgs) GetTableName() string {
  return p.TableName
}

func (p *OmniSciLoadTableBinaryArgs) GetRows() []*TRow {
  return p.Rows
}

func (p *OmniSciLoadTableBinaryArgs) GetColumnNames() []string {
  return p.ColumnNames
}
func (p *OmniSciLoadTableBinaryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciLoadTableBinaryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciLoadTableBinaryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *OmniSciLoadTableBinaryArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TRow, 0, size)
  p.Rows =  tSlice
  for i := 0; i < size; i ++ {
    _elem240 := &TRow{}
    if err := _elem240.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem240), err)
    }
    p.Rows = append(p.Rows, _elem240)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciLoadTableBinaryArgs)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ColumnNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem241 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem241 = v
}
    p.ColumnNames = append(p.ColumnNames, _elem241)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciLoadTableBinaryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("load_table_binary_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciLoadTableBinaryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciLoadTableBinaryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *OmniSciLoadTableBinaryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rows", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rows: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Rows)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Rows {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rows: ", p), err) }
  return err
}

func (p *OmniSciLoadTableBinaryArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("column_names", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:column_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ColumnNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColumnNames {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:column_names: ", p), err) }
  return err
}

func (p *OmniSciLoadTableBinaryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciLoadTableBinaryArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciLoadTableBinaryResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciLoadTableBinaryResult() *OmniSciLoadTableBinaryResult {
  return &OmniSciLoadTableBinaryResult{}
}

var OmniSciLoadTableBinaryResult_E_DEFAULT *TOmniSciException
func (p *OmniSciLoadTableBinaryResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciLoadTableBinaryResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciLoadTableBinaryResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciLoadTableBinaryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciLoadTableBinaryResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciLoadTableBinaryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("load_table_binary_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciLoadTableBinaryResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciLoadTableBinaryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciLoadTableBinaryResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
//  - Cols
//  - ColumnNames
type OmniSciLoadTableBinaryColumnarArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
  Cols []*TColumn `thrift:"cols,3" db:"cols" json:"cols"`
  ColumnNames []string `thrift:"column_names,4" db:"column_names" json:"column_names"`
}

func NewOmniSciLoadTableBinaryColumnarArgs() *OmniSciLoadTableBinaryColumnarArgs {
  return &OmniSciLoadTableBinaryColumnarArgs{
ColumnNames: []string{
},
}
}


func (p *OmniSciLoadTableBinaryColumnarArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciLoadTableBinaryColumnarArgs) GetTableName() string {
  return p.TableName
}

func (p *OmniSciLoadTableBinaryColumnarArgs) GetCols() []*TColumn {
  return p.Cols
}

func (p *OmniSciLoadTableBinaryColumnarArgs) GetColumnNames() []string {
  return p.ColumnNames
}
func (p *OmniSciLoadTableBinaryColumnarArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciLoadTableBinaryColumnarArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciLoadTableBinaryColumnarArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *OmniSciLoadTableBinaryColumnarArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TColumn, 0, size)
  p.Cols =  tSlice
  for i := 0; i < size; i ++ {
    _elem242 := &TColumn{}
    if err := _elem242.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem242), err)
    }
    p.Cols = append(p.Cols, _elem242)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciLoadTableBinaryColumnarArgs)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ColumnNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem243 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem243 = v
}
    p.ColumnNames = append(p.ColumnNames, _elem243)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciLoadTableBinaryColumnarArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("load_table_binary_columnar_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciLoadTableBinaryColumnarArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciLoadTableBinaryColumnarArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *OmniSciLoadTableBinaryColumnarArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cols", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cols: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Cols)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Cols {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cols: ", p), err) }
  return err
}

func (p *OmniSciLoadTableBinaryColumnarArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("column_names", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:column_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ColumnNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColumnNames {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:column_names: ", p), err) }
  return err
}

func (p *OmniSciLoadTableBinaryColumnarArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciLoadTableBinaryColumnarArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciLoadTableBinaryColumnarResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciLoadTableBinaryColumnarResult() *OmniSciLoadTableBinaryColumnarResult {
  return &OmniSciLoadTableBinaryColumnarResult{}
}

var OmniSciLoadTableBinaryColumnarResult_E_DEFAULT *TOmniSciException
func (p *OmniSciLoadTableBinaryColumnarResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciLoadTableBinaryColumnarResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciLoadTableBinaryColumnarResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciLoadTableBinaryColumnarResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciLoadTableBinaryColumnarResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciLoadTableBinaryColumnarResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("load_table_binary_columnar_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciLoadTableBinaryColumnarResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciLoadTableBinaryColumnarResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciLoadTableBinaryColumnarResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
//  - ArrowStream
//  - UseColumnNames
type OmniSciLoadTableBinaryArrowArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
  ArrowStream []byte `thrift:"arrow_stream,3" db:"arrow_stream" json:"arrow_stream"`
  UseColumnNames bool `thrift:"use_column_names,4" db:"use_column_names" json:"use_column_names"`
}

func NewOmniSciLoadTableBinaryArrowArgs() *OmniSciLoadTableBinaryArrowArgs {
  return &OmniSciLoadTableBinaryArrowArgs{}
}


func (p *OmniSciLoadTableBinaryArrowArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciLoadTableBinaryArrowArgs) GetTableName() string {
  return p.TableName
}

func (p *OmniSciLoadTableBinaryArrowArgs) GetArrowStream() []byte {
  return p.ArrowStream
}

func (p *OmniSciLoadTableBinaryArrowArgs) GetUseColumnNames() bool {
  return p.UseColumnNames
}
func (p *OmniSciLoadTableBinaryArrowArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciLoadTableBinaryArrowArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciLoadTableBinaryArrowArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *OmniSciLoadTableBinaryArrowArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ArrowStream = v
}
  return nil
}

func (p *OmniSciLoadTableBinaryArrowArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UseColumnNames = v
}
  return nil
}

func (p *OmniSciLoadTableBinaryArrowArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("load_table_binary_arrow_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciLoadTableBinaryArrowArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciLoadTableBinaryArrowArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *OmniSciLoadTableBinaryArrowArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("arrow_stream", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:arrow_stream: ", p), err) }
  if err := oprot.WriteBinary(p.ArrowStream); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.arrow_stream (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:arrow_stream: ", p), err) }
  return err
}

func (p *OmniSciLoadTableBinaryArrowArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("use_column_names", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:use_column_names: ", p), err) }
  if err := oprot.WriteBool(bool(p.UseColumnNames)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.use_column_names (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:use_column_names: ", p), err) }
  return err
}

func (p *OmniSciLoadTableBinaryArrowArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciLoadTableBinaryArrowArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciLoadTableBinaryArrowResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciLoadTableBinaryArrowResult() *OmniSciLoadTableBinaryArrowResult {
  return &OmniSciLoadTableBinaryArrowResult{}
}

var OmniSciLoadTableBinaryArrowResult_E_DEFAULT *TOmniSciException
func (p *OmniSciLoadTableBinaryArrowResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciLoadTableBinaryArrowResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciLoadTableBinaryArrowResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciLoadTableBinaryArrowResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciLoadTableBinaryArrowResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciLoadTableBinaryArrowResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("load_table_binary_arrow_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciLoadTableBinaryArrowResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciLoadTableBinaryArrowResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciLoadTableBinaryArrowResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
//  - Rows
//  - ColumnNames
type OmniSciLoadTableArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
  Rows []*TStringRow `thrift:"rows,3" db:"rows" json:"rows"`
  ColumnNames []string `thrift:"column_names,4" db:"column_names" json:"column_names"`
}

func NewOmniSciLoadTableArgs() *OmniSciLoadTableArgs {
  return &OmniSciLoadTableArgs{
ColumnNames: []string{
},
}
}


func (p *OmniSciLoadTableArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciLoadTableArgs) GetTableName() string {
  return p.TableName
}

func (p *OmniSciLoadTableArgs) GetRows() []*TStringRow {
  return p.Rows
}

func (p *OmniSciLoadTableArgs) GetColumnNames() []string {
  return p.ColumnNames
}
func (p *OmniSciLoadTableArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciLoadTableArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciLoadTableArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *OmniSciLoadTableArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TStringRow, 0, size)
  p.Rows =  tSlice
  for i := 0; i < size; i ++ {
    _elem244 := &TStringRow{}
    if err := _elem244.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem244), err)
    }
    p.Rows = append(p.Rows, _elem244)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciLoadTableArgs)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ColumnNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem245 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem245 = v
}
    p.ColumnNames = append(p.ColumnNames, _elem245)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciLoadTableArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("load_table_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciLoadTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciLoadTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *OmniSciLoadTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rows", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rows: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Rows)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Rows {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rows: ", p), err) }
  return err
}

func (p *OmniSciLoadTableArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("column_names", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:column_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ColumnNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColumnNames {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:column_names: ", p), err) }
  return err
}

func (p *OmniSciLoadTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciLoadTableArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciLoadTableResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciLoadTableResult() *OmniSciLoadTableResult {
  return &OmniSciLoadTableResult{}
}

var OmniSciLoadTableResult_E_DEFAULT *TOmniSciException
func (p *OmniSciLoadTableResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciLoadTableResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciLoadTableResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciLoadTableResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciLoadTableResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciLoadTableResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("load_table_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciLoadTableResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciLoadTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciLoadTableResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - FileName
//  - CopyParams
type OmniSciDetectColumnTypesArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  FileName string `thrift:"file_name,2" db:"file_name" json:"file_name"`
  CopyParams *TCopyParams `thrift:"copy_params,3" db:"copy_params" json:"copy_params"`
}

func NewOmniSciDetectColumnTypesArgs() *OmniSciDetectColumnTypesArgs {
  return &OmniSciDetectColumnTypesArgs{}
}


func (p *OmniSciDetectColumnTypesArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciDetectColumnTypesArgs) GetFileName() string {
  return p.FileName
}
var OmniSciDetectColumnTypesArgs_CopyParams_DEFAULT *TCopyParams
func (p *OmniSciDetectColumnTypesArgs) GetCopyParams() *TCopyParams {
  if !p.IsSetCopyParams() {
    return OmniSciDetectColumnTypesArgs_CopyParams_DEFAULT
  }
return p.CopyParams
}
func (p *OmniSciDetectColumnTypesArgs) IsSetCopyParams() bool {
  return p.CopyParams != nil
}

func (p *OmniSciDetectColumnTypesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciDetectColumnTypesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciDetectColumnTypesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FileName = v
}
  return nil
}

func (p *OmniSciDetectColumnTypesArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.CopyParams = &TCopyParams{
  HasHeader:   0,

  FileType:   0,

  GeoCoordsEncoding:   6,

  GeoCoordsCompParam: 32,

  GeoCoordsType:   18,

  GeoCoordsSrid: 4326,

  SanitizeColumnNames: true,

  GeoAssignRenderGroups: true,
}
  if err := p.CopyParams.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CopyParams), err)
  }
  return nil
}

func (p *OmniSciDetectColumnTypesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("detect_column_types_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciDetectColumnTypesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciDetectColumnTypesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("file_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:file_name: ", p), err) }
  if err := oprot.WriteString(string(p.FileName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.file_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:file_name: ", p), err) }
  return err
}

func (p *OmniSciDetectColumnTypesArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("copy_params", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:copy_params: ", p), err) }
  if err := p.CopyParams.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CopyParams), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:copy_params: ", p), err) }
  return err
}

func (p *OmniSciDetectColumnTypesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciDetectColumnTypesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciDetectColumnTypesResult struct {
  Success *TDetectResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciDetectColumnTypesResult() *OmniSciDetectColumnTypesResult {
  return &OmniSciDetectColumnTypesResult{}
}

var OmniSciDetectColumnTypesResult_Success_DEFAULT *TDetectResult_
func (p *OmniSciDetectColumnTypesResult) GetSuccess() *TDetectResult_ {
  if !p.IsSetSuccess() {
    return OmniSciDetectColumnTypesResult_Success_DEFAULT
  }
return p.Success
}
var OmniSciDetectColumnTypesResult_E_DEFAULT *TOmniSciException
func (p *OmniSciDetectColumnTypesResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciDetectColumnTypesResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciDetectColumnTypesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciDetectColumnTypesResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciDetectColumnTypesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciDetectColumnTypesResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDetectResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OmniSciDetectColumnTypesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciDetectColumnTypesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("detect_column_types_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciDetectColumnTypesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciDetectColumnTypesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciDetectColumnTypesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciDetectColumnTypesResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
//  - RowDesc
//  - FileType
//  - CreateParams
type OmniSciCreateTableArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
  RowDesc TRowDescriptor `thrift:"row_desc,3" db:"row_desc" json:"row_desc"`
  FileType TFileType `thrift:"file_type,4" db:"file_type" json:"file_type"`
  CreateParams *TCreateParams `thrift:"create_params,5" db:"create_params" json:"create_params"`
}

func NewOmniSciCreateTableArgs() *OmniSciCreateTableArgs {
  return &OmniSciCreateTableArgs{
FileType: 0,
}
}


func (p *OmniSciCreateTableArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciCreateTableArgs) GetTableName() string {
  return p.TableName
}

func (p *OmniSciCreateTableArgs) GetRowDesc() TRowDescriptor {
  return p.RowDesc
}

func (p *OmniSciCreateTableArgs) GetFileType() TFileType {
  return p.FileType
}
var OmniSciCreateTableArgs_CreateParams_DEFAULT *TCreateParams
func (p *OmniSciCreateTableArgs) GetCreateParams() *TCreateParams {
  if !p.IsSetCreateParams() {
    return OmniSciCreateTableArgs_CreateParams_DEFAULT
  }
return p.CreateParams
}
func (p *OmniSciCreateTableArgs) IsSetCreateParams() bool {
  return p.CreateParams != nil
}

func (p *OmniSciCreateTableArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciCreateTableArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciCreateTableArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *OmniSciCreateTableArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make(TRowDescriptor, 0, size)
  p.RowDesc =  tSlice
  for i := 0; i < size; i ++ {
    _elem246 := &TColumnType{}
    if err := _elem246.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem246), err)
    }
    p.RowDesc = append(p.RowDesc, _elem246)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciCreateTableArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TFileType(v)
  p.FileType = temp
}
  return nil
}

func (p *OmniSciCreateTableArgs)  ReadField5(iprot thrift.TProtocol) error {
  p.CreateParams = &TCreateParams{}
  if err := p.CreateParams.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateParams), err)
  }
  return nil
}

func (p *OmniSciCreateTableArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_table_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciCreateTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciCreateTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *OmniSciCreateTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_desc", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:row_desc: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowDesc)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RowDesc {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:row_desc: ", p), err) }
  return err
}

func (p *OmniSciCreateTableArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("file_type", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:file_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.FileType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.file_type (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:file_type: ", p), err) }
  return err
}

func (p *OmniSciCreateTableArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("create_params", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:create_params: ", p), err) }
  if err := p.CreateParams.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateParams), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:create_params: ", p), err) }
  return err
}

func (p *OmniSciCreateTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciCreateTableArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciCreateTableResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciCreateTableResult() *OmniSciCreateTableResult {
  return &OmniSciCreateTableResult{}
}

var OmniSciCreateTableResult_E_DEFAULT *TOmniSciException
func (p *OmniSciCreateTableResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciCreateTableResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciCreateTableResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciCreateTableResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciCreateTableResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciCreateTableResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_table_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciCreateTableResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciCreateTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciCreateTableResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
//  - FileName
//  - CopyParams
type OmniSciImportTableArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
  FileName string `thrift:"file_name,3" db:"file_name" json:"file_name"`
  CopyParams *TCopyParams `thrift:"copy_params,4" db:"copy_params" json:"copy_params"`
}

func NewOmniSciImportTableArgs() *OmniSciImportTableArgs {
  return &OmniSciImportTableArgs{}
}


func (p *OmniSciImportTableArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciImportTableArgs) GetTableName() string {
  return p.TableName
}

func (p *OmniSciImportTableArgs) GetFileName() string {
  return p.FileName
}
var OmniSciImportTableArgs_CopyParams_DEFAULT *TCopyParams
func (p *OmniSciImportTableArgs) GetCopyParams() *TCopyParams {
  if !p.IsSetCopyParams() {
    return OmniSciImportTableArgs_CopyParams_DEFAULT
  }
return p.CopyParams
}
func (p *OmniSciImportTableArgs) IsSetCopyParams() bool {
  return p.CopyParams != nil
}

func (p *OmniSciImportTableArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciImportTableArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciImportTableArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *OmniSciImportTableArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FileName = v
}
  return nil
}

func (p *OmniSciImportTableArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.CopyParams = &TCopyParams{
  HasHeader:   0,

  FileType:   0,

  GeoCoordsEncoding:   6,

  GeoCoordsCompParam: 32,

  GeoCoordsType:   18,

  GeoCoordsSrid: 4326,

  SanitizeColumnNames: true,

  GeoAssignRenderGroups: true,
}
  if err := p.CopyParams.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CopyParams), err)
  }
  return nil
}

func (p *OmniSciImportTableArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("import_table_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciImportTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciImportTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *OmniSciImportTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("file_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:file_name: ", p), err) }
  if err := oprot.WriteString(string(p.FileName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.file_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:file_name: ", p), err) }
  return err
}

func (p *OmniSciImportTableArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("copy_params", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:copy_params: ", p), err) }
  if err := p.CopyParams.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CopyParams), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:copy_params: ", p), err) }
  return err
}

func (p *OmniSciImportTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciImportTableArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciImportTableResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciImportTableResult() *OmniSciImportTableResult {
  return &OmniSciImportTableResult{}
}

var OmniSciImportTableResult_E_DEFAULT *TOmniSciException
func (p *OmniSciImportTableResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciImportTableResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciImportTableResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciImportTableResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciImportTableResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciImportTableResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("import_table_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciImportTableResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciImportTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciImportTableResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
//  - FileName
//  - CopyParams
//  - RowDesc
//  - CreateParams
type OmniSciImportGeoTableArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
  FileName string `thrift:"file_name,3" db:"file_name" json:"file_name"`
  CopyParams *TCopyParams `thrift:"copy_params,4" db:"copy_params" json:"copy_params"`
  RowDesc TRowDescriptor `thrift:"row_desc,5" db:"row_desc" json:"row_desc"`
  CreateParams *TCreateParams `thrift:"create_params,6" db:"create_params" json:"create_params"`
}

func NewOmniSciImportGeoTableArgs() *OmniSciImportGeoTableArgs {
  return &OmniSciImportGeoTableArgs{}
}


func (p *OmniSciImportGeoTableArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciImportGeoTableArgs) GetTableName() string {
  return p.TableName
}

func (p *OmniSciImportGeoTableArgs) GetFileName() string {
  return p.FileName
}
var OmniSciImportGeoTableArgs_CopyParams_DEFAULT *TCopyParams
func (p *OmniSciImportGeoTableArgs) GetCopyParams() *TCopyParams {
  if !p.IsSetCopyParams() {
    return OmniSciImportGeoTableArgs_CopyParams_DEFAULT
  }
return p.CopyParams
}

func (p *OmniSciImportGeoTableArgs) GetRowDesc() TRowDescriptor {
  return p.RowDesc
}
var OmniSciImportGeoTableArgs_CreateParams_DEFAULT *TCreateParams
func (p *OmniSciImportGeoTableArgs) GetCreateParams() *TCreateParams {
  if !p.IsSetCreateParams() {
    return OmniSciImportGeoTableArgs_CreateParams_DEFAULT
  }
return p.CreateParams
}
func (p *OmniSciImportGeoTableArgs) IsSetCopyParams() bool {
  return p.CopyParams != nil
}

func (p *OmniSciImportGeoTableArgs) IsSetCreateParams() bool {
  return p.CreateParams != nil
}

func (p *OmniSciImportGeoTableArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciImportGeoTableArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciImportGeoTableArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *OmniSciImportGeoTableArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FileName = v
}
  return nil
}

func (p *OmniSciImportGeoTableArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.CopyParams = &TCopyParams{
  HasHeader:   0,

  FileType:   0,

  GeoCoordsEncoding:   6,

  GeoCoordsCompParam: 32,

  GeoCoordsType:   18,

  GeoCoordsSrid: 4326,

  SanitizeColumnNames: true,

  GeoAssignRenderGroups: true,
}
  if err := p.CopyParams.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CopyParams), err)
  }
  return nil
}

func (p *OmniSciImportGeoTableArgs)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make(TRowDescriptor, 0, size)
  p.RowDesc =  tSlice
  for i := 0; i < size; i ++ {
    _elem247 := &TColumnType{}
    if err := _elem247.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem247), err)
    }
    p.RowDesc = append(p.RowDesc, _elem247)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciImportGeoTableArgs)  ReadField6(iprot thrift.TProtocol) error {
  p.CreateParams = &TCreateParams{}
  if err := p.CreateParams.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateParams), err)
  }
  return nil
}

func (p *OmniSciImportGeoTableArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("import_geo_table_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciImportGeoTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciImportGeoTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *OmniSciImportGeoTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("file_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:file_name: ", p), err) }
  if err := oprot.WriteString(string(p.FileName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.file_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:file_name: ", p), err) }
  return err
}

func (p *OmniSciImportGeoTableArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("copy_params", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:copy_params: ", p), err) }
  if err := p.CopyParams.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CopyParams), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:copy_params: ", p), err) }
  return err
}

func (p *OmniSciImportGeoTableArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_desc", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:row_desc: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowDesc)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RowDesc {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:row_desc: ", p), err) }
  return err
}

func (p *OmniSciImportGeoTableArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("create_params", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:create_params: ", p), err) }
  if err := p.CreateParams.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateParams), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:create_params: ", p), err) }
  return err
}

func (p *OmniSciImportGeoTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciImportGeoTableArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciImportGeoTableResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciImportGeoTableResult() *OmniSciImportGeoTableResult {
  return &OmniSciImportGeoTableResult{}
}

var OmniSciImportGeoTableResult_E_DEFAULT *TOmniSciException
func (p *OmniSciImportGeoTableResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciImportGeoTableResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciImportGeoTableResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciImportGeoTableResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciImportGeoTableResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciImportGeoTableResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("import_geo_table_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciImportGeoTableResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciImportGeoTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciImportGeoTableResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - ImportID
type OmniSciImportTableStatusArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  ImportID string `thrift:"import_id,2" db:"import_id" json:"import_id"`
}

func NewOmniSciImportTableStatusArgs() *OmniSciImportTableStatusArgs {
  return &OmniSciImportTableStatusArgs{}
}


func (p *OmniSciImportTableStatusArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciImportTableStatusArgs) GetImportID() string {
  return p.ImportID
}
func (p *OmniSciImportTableStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciImportTableStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciImportTableStatusArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ImportID = v
}
  return nil
}

func (p *OmniSciImportTableStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("import_table_status_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciImportTableStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciImportTableStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("import_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:import_id: ", p), err) }
  if err := oprot.WriteString(string(p.ImportID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.import_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:import_id: ", p), err) }
  return err
}

func (p *OmniSciImportTableStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciImportTableStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciImportTableStatusResult struct {
  Success *TImportStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciImportTableStatusResult() *OmniSciImportTableStatusResult {
  return &OmniSciImportTableStatusResult{}
}

var OmniSciImportTableStatusResult_Success_DEFAULT *TImportStatus
func (p *OmniSciImportTableStatusResult) GetSuccess() *TImportStatus {
  if !p.IsSetSuccess() {
    return OmniSciImportTableStatusResult_Success_DEFAULT
  }
return p.Success
}
var OmniSciImportTableStatusResult_E_DEFAULT *TOmniSciException
func (p *OmniSciImportTableStatusResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciImportTableStatusResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciImportTableStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciImportTableStatusResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciImportTableStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciImportTableStatusResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TImportStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OmniSciImportTableStatusResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciImportTableStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("import_table_status_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciImportTableStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciImportTableStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciImportTableStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciImportTableStatusResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - ArchivePath
//  - CopyParams
type OmniSciGetFirstGeoFileInArchiveArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  ArchivePath string `thrift:"archive_path,2" db:"archive_path" json:"archive_path"`
  CopyParams *TCopyParams `thrift:"copy_params,3" db:"copy_params" json:"copy_params"`
}

func NewOmniSciGetFirstGeoFileInArchiveArgs() *OmniSciGetFirstGeoFileInArchiveArgs {
  return &OmniSciGetFirstGeoFileInArchiveArgs{}
}


func (p *OmniSciGetFirstGeoFileInArchiveArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciGetFirstGeoFileInArchiveArgs) GetArchivePath() string {
  return p.ArchivePath
}
var OmniSciGetFirstGeoFileInArchiveArgs_CopyParams_DEFAULT *TCopyParams
func (p *OmniSciGetFirstGeoFileInArchiveArgs) GetCopyParams() *TCopyParams {
  if !p.IsSetCopyParams() {
    return OmniSciGetFirstGeoFileInArchiveArgs_CopyParams_DEFAULT
  }
return p.CopyParams
}
func (p *OmniSciGetFirstGeoFileInArchiveArgs) IsSetCopyParams() bool {
  return p.CopyParams != nil
}

func (p *OmniSciGetFirstGeoFileInArchiveArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetFirstGeoFileInArchiveArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetFirstGeoFileInArchiveArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ArchivePath = v
}
  return nil
}

func (p *OmniSciGetFirstGeoFileInArchiveArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.CopyParams = &TCopyParams{
  HasHeader:   0,

  FileType:   0,

  GeoCoordsEncoding:   6,

  GeoCoordsCompParam: 32,

  GeoCoordsType:   18,

  GeoCoordsSrid: 4326,

  SanitizeColumnNames: true,

  GeoAssignRenderGroups: true,
}
  if err := p.CopyParams.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CopyParams), err)
  }
  return nil
}

func (p *OmniSciGetFirstGeoFileInArchiveArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_first_geo_file_in_archive_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetFirstGeoFileInArchiveArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetFirstGeoFileInArchiveArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("archive_path", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:archive_path: ", p), err) }
  if err := oprot.WriteString(string(p.ArchivePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.archive_path (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:archive_path: ", p), err) }
  return err
}

func (p *OmniSciGetFirstGeoFileInArchiveArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("copy_params", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:copy_params: ", p), err) }
  if err := p.CopyParams.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CopyParams), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:copy_params: ", p), err) }
  return err
}

func (p *OmniSciGetFirstGeoFileInArchiveArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetFirstGeoFileInArchiveArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetFirstGeoFileInArchiveResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetFirstGeoFileInArchiveResult() *OmniSciGetFirstGeoFileInArchiveResult {
  return &OmniSciGetFirstGeoFileInArchiveResult{}
}

var OmniSciGetFirstGeoFileInArchiveResult_Success_DEFAULT string
func (p *OmniSciGetFirstGeoFileInArchiveResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return OmniSciGetFirstGeoFileInArchiveResult_Success_DEFAULT
  }
return *p.Success
}
var OmniSciGetFirstGeoFileInArchiveResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetFirstGeoFileInArchiveResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetFirstGeoFileInArchiveResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetFirstGeoFileInArchiveResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetFirstGeoFileInArchiveResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetFirstGeoFileInArchiveResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetFirstGeoFileInArchiveResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *OmniSciGetFirstGeoFileInArchiveResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetFirstGeoFileInArchiveResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_first_geo_file_in_archive_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetFirstGeoFileInArchiveResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetFirstGeoFileInArchiveResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetFirstGeoFileInArchiveResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetFirstGeoFileInArchiveResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - ArchivePath
//  - CopyParams
type OmniSciGetAllFilesInArchiveArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  ArchivePath string `thrift:"archive_path,2" db:"archive_path" json:"archive_path"`
  CopyParams *TCopyParams `thrift:"copy_params,3" db:"copy_params" json:"copy_params"`
}

func NewOmniSciGetAllFilesInArchiveArgs() *OmniSciGetAllFilesInArchiveArgs {
  return &OmniSciGetAllFilesInArchiveArgs{}
}


func (p *OmniSciGetAllFilesInArchiveArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciGetAllFilesInArchiveArgs) GetArchivePath() string {
  return p.ArchivePath
}
var OmniSciGetAllFilesInArchiveArgs_CopyParams_DEFAULT *TCopyParams
func (p *OmniSciGetAllFilesInArchiveArgs) GetCopyParams() *TCopyParams {
  if !p.IsSetCopyParams() {
    return OmniSciGetAllFilesInArchiveArgs_CopyParams_DEFAULT
  }
return p.CopyParams
}
func (p *OmniSciGetAllFilesInArchiveArgs) IsSetCopyParams() bool {
  return p.CopyParams != nil
}

func (p *OmniSciGetAllFilesInArchiveArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetAllFilesInArchiveArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetAllFilesInArchiveArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ArchivePath = v
}
  return nil
}

func (p *OmniSciGetAllFilesInArchiveArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.CopyParams = &TCopyParams{
  HasHeader:   0,

  FileType:   0,

  GeoCoordsEncoding:   6,

  GeoCoordsCompParam: 32,

  GeoCoordsType:   18,

  GeoCoordsSrid: 4326,

  SanitizeColumnNames: true,

  GeoAssignRenderGroups: true,
}
  if err := p.CopyParams.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CopyParams), err)
  }
  return nil
}

func (p *OmniSciGetAllFilesInArchiveArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_all_files_in_archive_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetAllFilesInArchiveArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetAllFilesInArchiveArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("archive_path", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:archive_path: ", p), err) }
  if err := oprot.WriteString(string(p.ArchivePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.archive_path (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:archive_path: ", p), err) }
  return err
}

func (p *OmniSciGetAllFilesInArchiveArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("copy_params", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:copy_params: ", p), err) }
  if err := p.CopyParams.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CopyParams), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:copy_params: ", p), err) }
  return err
}

func (p *OmniSciGetAllFilesInArchiveArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetAllFilesInArchiveArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetAllFilesInArchiveResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetAllFilesInArchiveResult() *OmniSciGetAllFilesInArchiveResult {
  return &OmniSciGetAllFilesInArchiveResult{}
}

var OmniSciGetAllFilesInArchiveResult_Success_DEFAULT []string

func (p *OmniSciGetAllFilesInArchiveResult) GetSuccess() []string {
  return p.Success
}
var OmniSciGetAllFilesInArchiveResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetAllFilesInArchiveResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetAllFilesInArchiveResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetAllFilesInArchiveResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetAllFilesInArchiveResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetAllFilesInArchiveResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetAllFilesInArchiveResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem248 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem248 = v
}
    p.Success = append(p.Success, _elem248)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciGetAllFilesInArchiveResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetAllFilesInArchiveResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_all_files_in_archive_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetAllFilesInArchiveResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetAllFilesInArchiveResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetAllFilesInArchiveResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetAllFilesInArchiveResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - FileName
//  - CopyParams
type OmniSciGetLayersInGeoFileArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  FileName string `thrift:"file_name,2" db:"file_name" json:"file_name"`
  CopyParams *TCopyParams `thrift:"copy_params,3" db:"copy_params" json:"copy_params"`
}

func NewOmniSciGetLayersInGeoFileArgs() *OmniSciGetLayersInGeoFileArgs {
  return &OmniSciGetLayersInGeoFileArgs{}
}


func (p *OmniSciGetLayersInGeoFileArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciGetLayersInGeoFileArgs) GetFileName() string {
  return p.FileName
}
var OmniSciGetLayersInGeoFileArgs_CopyParams_DEFAULT *TCopyParams
func (p *OmniSciGetLayersInGeoFileArgs) GetCopyParams() *TCopyParams {
  if !p.IsSetCopyParams() {
    return OmniSciGetLayersInGeoFileArgs_CopyParams_DEFAULT
  }
return p.CopyParams
}
func (p *OmniSciGetLayersInGeoFileArgs) IsSetCopyParams() bool {
  return p.CopyParams != nil
}

func (p *OmniSciGetLayersInGeoFileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetLayersInGeoFileArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetLayersInGeoFileArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FileName = v
}
  return nil
}

func (p *OmniSciGetLayersInGeoFileArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.CopyParams = &TCopyParams{
  HasHeader:   0,

  FileType:   0,

  GeoCoordsEncoding:   6,

  GeoCoordsCompParam: 32,

  GeoCoordsType:   18,

  GeoCoordsSrid: 4326,

  SanitizeColumnNames: true,

  GeoAssignRenderGroups: true,
}
  if err := p.CopyParams.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CopyParams), err)
  }
  return nil
}

func (p *OmniSciGetLayersInGeoFileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_layers_in_geo_file_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetLayersInGeoFileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetLayersInGeoFileArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("file_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:file_name: ", p), err) }
  if err := oprot.WriteString(string(p.FileName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.file_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:file_name: ", p), err) }
  return err
}

func (p *OmniSciGetLayersInGeoFileArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("copy_params", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:copy_params: ", p), err) }
  if err := p.CopyParams.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CopyParams), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:copy_params: ", p), err) }
  return err
}

func (p *OmniSciGetLayersInGeoFileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetLayersInGeoFileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetLayersInGeoFileResult struct {
  Success []*TGeoFileLayerInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetLayersInGeoFileResult() *OmniSciGetLayersInGeoFileResult {
  return &OmniSciGetLayersInGeoFileResult{}
}

var OmniSciGetLayersInGeoFileResult_Success_DEFAULT []*TGeoFileLayerInfo

func (p *OmniSciGetLayersInGeoFileResult) GetSuccess() []*TGeoFileLayerInfo {
  return p.Success
}
var OmniSciGetLayersInGeoFileResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetLayersInGeoFileResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetLayersInGeoFileResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetLayersInGeoFileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetLayersInGeoFileResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetLayersInGeoFileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetLayersInGeoFileResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TGeoFileLayerInfo, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem249 := &TGeoFileLayerInfo{}
    if err := _elem249.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem249), err)
    }
    p.Success = append(p.Success, _elem249)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciGetLayersInGeoFileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetLayersInGeoFileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_layers_in_geo_file_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetLayersInGeoFileResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetLayersInGeoFileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetLayersInGeoFileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetLayersInGeoFileResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Query
type OmniSciQueryGetOuterFragmentCountArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  Query string `thrift:"query,2" db:"query" json:"query"`
}

func NewOmniSciQueryGetOuterFragmentCountArgs() *OmniSciQueryGetOuterFragmentCountArgs {
  return &OmniSciQueryGetOuterFragmentCountArgs{}
}


func (p *OmniSciQueryGetOuterFragmentCountArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciQueryGetOuterFragmentCountArgs) GetQuery() string {
  return p.Query
}
func (p *OmniSciQueryGetOuterFragmentCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciQueryGetOuterFragmentCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciQueryGetOuterFragmentCountArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Query = v
}
  return nil
}

func (p *OmniSciQueryGetOuterFragmentCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("query_get_outer_fragment_count_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciQueryGetOuterFragmentCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciQueryGetOuterFragmentCountArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query: ", p), err) }
  if err := oprot.WriteString(string(p.Query)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query: ", p), err) }
  return err
}

func (p *OmniSciQueryGetOuterFragmentCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciQueryGetOuterFragmentCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciQueryGetOuterFragmentCountResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciQueryGetOuterFragmentCountResult() *OmniSciQueryGetOuterFragmentCountResult {
  return &OmniSciQueryGetOuterFragmentCountResult{}
}

var OmniSciQueryGetOuterFragmentCountResult_Success_DEFAULT int64
func (p *OmniSciQueryGetOuterFragmentCountResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return OmniSciQueryGetOuterFragmentCountResult_Success_DEFAULT
  }
return *p.Success
}
var OmniSciQueryGetOuterFragmentCountResult_E_DEFAULT *TOmniSciException
func (p *OmniSciQueryGetOuterFragmentCountResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciQueryGetOuterFragmentCountResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciQueryGetOuterFragmentCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciQueryGetOuterFragmentCountResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciQueryGetOuterFragmentCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciQueryGetOuterFragmentCountResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *OmniSciQueryGetOuterFragmentCountResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciQueryGetOuterFragmentCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("query_get_outer_fragment_count_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciQueryGetOuterFragmentCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciQueryGetOuterFragmentCountResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciQueryGetOuterFragmentCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciQueryGetOuterFragmentCountResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableID
type OmniSciCheckTableConsistencyArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  TableID int32 `thrift:"table_id,2" db:"table_id" json:"table_id"`
}

func NewOmniSciCheckTableConsistencyArgs() *OmniSciCheckTableConsistencyArgs {
  return &OmniSciCheckTableConsistencyArgs{}
}


func (p *OmniSciCheckTableConsistencyArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciCheckTableConsistencyArgs) GetTableID() int32 {
  return p.TableID
}
func (p *OmniSciCheckTableConsistencyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciCheckTableConsistencyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciCheckTableConsistencyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableID = v
}
  return nil
}

func (p *OmniSciCheckTableConsistencyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("check_table_consistency_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciCheckTableConsistencyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciCheckTableConsistencyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TableID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_id: ", p), err) }
  return err
}

func (p *OmniSciCheckTableConsistencyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciCheckTableConsistencyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciCheckTableConsistencyResult struct {
  Success *TTableMeta `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciCheckTableConsistencyResult() *OmniSciCheckTableConsistencyResult {
  return &OmniSciCheckTableConsistencyResult{}
}

var OmniSciCheckTableConsistencyResult_Success_DEFAULT *TTableMeta
func (p *OmniSciCheckTableConsistencyResult) GetSuccess() *TTableMeta {
  if !p.IsSetSuccess() {
    return OmniSciCheckTableConsistencyResult_Success_DEFAULT
  }
return p.Success
}
var OmniSciCheckTableConsistencyResult_E_DEFAULT *TOmniSciException
func (p *OmniSciCheckTableConsistencyResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciCheckTableConsistencyResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciCheckTableConsistencyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciCheckTableConsistencyResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciCheckTableConsistencyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciCheckTableConsistencyResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TTableMeta{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OmniSciCheckTableConsistencyResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciCheckTableConsistencyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("check_table_consistency_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciCheckTableConsistencyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciCheckTableConsistencyResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciCheckTableConsistencyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciCheckTableConsistencyResult(%+v)", *p)
}

// Attributes:
//  - LeafSession
//  - ParentSession
//  - QueryRa
//  - StartTimeStr
//  - JustExplain
//  - OuterFragmentIndices
type OmniSciStartQueryArgs struct {
  LeafSession TSessionId `thrift:"leaf_session,1" db:"leaf_session" json:"leaf_session"`
  ParentSession TSessionId `thrift:"parent_session,2" db:"parent_session" json:"parent_session"`
  QueryRa string `thrift:"query_ra,3" db:"query_ra" json:"query_ra"`
  StartTimeStr string `thrift:"start_time_str,4" db:"start_time_str" json:"start_time_str"`
  JustExplain bool `thrift:"just_explain,5" db:"just_explain" json:"just_explain"`
  OuterFragmentIndices []int64 `thrift:"outer_fragment_indices,6" db:"outer_fragment_indices" json:"outer_fragment_indices"`
}

func NewOmniSciStartQueryArgs() *OmniSciStartQueryArgs {
  return &OmniSciStartQueryArgs{}
}


func (p *OmniSciStartQueryArgs) GetLeafSession() TSessionId {
  return p.LeafSession
}

func (p *OmniSciStartQueryArgs) GetParentSession() TSessionId {
  return p.ParentSession
}

func (p *OmniSciStartQueryArgs) GetQueryRa() string {
  return p.QueryRa
}

func (p *OmniSciStartQueryArgs) GetStartTimeStr() string {
  return p.StartTimeStr
}

func (p *OmniSciStartQueryArgs) GetJustExplain() bool {
  return p.JustExplain
}

func (p *OmniSciStartQueryArgs) GetOuterFragmentIndices() []int64 {
  return p.OuterFragmentIndices
}
func (p *OmniSciStartQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciStartQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.LeafSession = temp
}
  return nil
}

func (p *OmniSciStartQueryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TSessionId(v)
  p.ParentSession = temp
}
  return nil
}

func (p *OmniSciStartQueryArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.QueryRa = v
}
  return nil
}

func (p *OmniSciStartQueryArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.StartTimeStr = v
}
  return nil
}

func (p *OmniSciStartQueryArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.JustExplain = v
}
  return nil
}

func (p *OmniSciStartQueryArgs)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.OuterFragmentIndices =  tSlice
  for i := 0; i < size; i ++ {
var _elem250 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem250 = v
}
    p.OuterFragmentIndices = append(p.OuterFragmentIndices, _elem250)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciStartQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("start_query_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciStartQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("leaf_session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:leaf_session: ", p), err) }
  if err := oprot.WriteString(string(p.LeafSession)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leaf_session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:leaf_session: ", p), err) }
  return err
}

func (p *OmniSciStartQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parent_session", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parent_session: ", p), err) }
  if err := oprot.WriteString(string(p.ParentSession)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parent_session (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parent_session: ", p), err) }
  return err
}

func (p *OmniSciStartQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query_ra", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:query_ra: ", p), err) }
  if err := oprot.WriteString(string(p.QueryRa)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query_ra (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:query_ra: ", p), err) }
  return err
}

func (p *OmniSciStartQueryArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("start_time_str", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:start_time_str: ", p), err) }
  if err := oprot.WriteString(string(p.StartTimeStr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time_str (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:start_time_str: ", p), err) }
  return err
}

func (p *OmniSciStartQueryArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("just_explain", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:just_explain: ", p), err) }
  if err := oprot.WriteBool(bool(p.JustExplain)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.just_explain (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:just_explain: ", p), err) }
  return err
}

func (p *OmniSciStartQueryArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("outer_fragment_indices", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:outer_fragment_indices: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.OuterFragmentIndices)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.OuterFragmentIndices {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:outer_fragment_indices: ", p), err) }
  return err
}

func (p *OmniSciStartQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciStartQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciStartQueryResult struct {
  Success *TPendingQuery `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciStartQueryResult() *OmniSciStartQueryResult {
  return &OmniSciStartQueryResult{}
}

var OmniSciStartQueryResult_Success_DEFAULT *TPendingQuery
func (p *OmniSciStartQueryResult) GetSuccess() *TPendingQuery {
  if !p.IsSetSuccess() {
    return OmniSciStartQueryResult_Success_DEFAULT
  }
return p.Success
}
var OmniSciStartQueryResult_E_DEFAULT *TOmniSciException
func (p *OmniSciStartQueryResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciStartQueryResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciStartQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciStartQueryResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciStartQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciStartQueryResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TPendingQuery{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OmniSciStartQueryResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciStartQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("start_query_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciStartQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciStartQueryResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciStartQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciStartQueryResult(%+v)", *p)
}

// Attributes:
//  - PendingQuery
//  - SubqueryID
//  - StartTimeStr
type OmniSciExecuteQueryStepArgs struct {
  PendingQuery *TPendingQuery `thrift:"pending_query,1" db:"pending_query" json:"pending_query"`
  SubqueryID TSubqueryId `thrift:"subquery_id,2" db:"subquery_id" json:"subquery_id"`
  StartTimeStr string `thrift:"start_time_str,3" db:"start_time_str" json:"start_time_str"`
}

func NewOmniSciExecuteQueryStepArgs() *OmniSciExecuteQueryStepArgs {
  return &OmniSciExecuteQueryStepArgs{}
}

var OmniSciExecuteQueryStepArgs_PendingQuery_DEFAULT *TPendingQuery
func (p *OmniSciExecuteQueryStepArgs) GetPendingQuery() *TPendingQuery {
  if !p.IsSetPendingQuery() {
    return OmniSciExecuteQueryStepArgs_PendingQuery_DEFAULT
  }
return p.PendingQuery
}

func (p *OmniSciExecuteQueryStepArgs) GetSubqueryID() TSubqueryId {
  return p.SubqueryID
}

func (p *OmniSciExecuteQueryStepArgs) GetStartTimeStr() string {
  return p.StartTimeStr
}
func (p *OmniSciExecuteQueryStepArgs) IsSetPendingQuery() bool {
  return p.PendingQuery != nil
}

func (p *OmniSciExecuteQueryStepArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciExecuteQueryStepArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.PendingQuery = &TPendingQuery{}
  if err := p.PendingQuery.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PendingQuery), err)
  }
  return nil
}

func (p *OmniSciExecuteQueryStepArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TSubqueryId(v)
  p.SubqueryID = temp
}
  return nil
}

func (p *OmniSciExecuteQueryStepArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartTimeStr = v
}
  return nil
}

func (p *OmniSciExecuteQueryStepArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("execute_query_step_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciExecuteQueryStepArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pending_query", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pending_query: ", p), err) }
  if err := p.PendingQuery.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PendingQuery), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pending_query: ", p), err) }
  return err
}

func (p *OmniSciExecuteQueryStepArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("subquery_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:subquery_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.SubqueryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.subquery_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:subquery_id: ", p), err) }
  return err
}

func (p *OmniSciExecuteQueryStepArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("start_time_str", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:start_time_str: ", p), err) }
  if err := oprot.WriteString(string(p.StartTimeStr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time_str (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:start_time_str: ", p), err) }
  return err
}

func (p *OmniSciExecuteQueryStepArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciExecuteQueryStepArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciExecuteQueryStepResult struct {
  Success *TStepResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciExecuteQueryStepResult() *OmniSciExecuteQueryStepResult {
  return &OmniSciExecuteQueryStepResult{}
}

var OmniSciExecuteQueryStepResult_Success_DEFAULT *TStepResult_
func (p *OmniSciExecuteQueryStepResult) GetSuccess() *TStepResult_ {
  if !p.IsSetSuccess() {
    return OmniSciExecuteQueryStepResult_Success_DEFAULT
  }
return p.Success
}
var OmniSciExecuteQueryStepResult_E_DEFAULT *TOmniSciException
func (p *OmniSciExecuteQueryStepResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciExecuteQueryStepResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciExecuteQueryStepResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciExecuteQueryStepResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciExecuteQueryStepResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciExecuteQueryStepResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TStepResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OmniSciExecuteQueryStepResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciExecuteQueryStepResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("execute_query_step_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciExecuteQueryStepResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciExecuteQueryStepResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciExecuteQueryStepResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciExecuteQueryStepResult(%+v)", *p)
}

// Attributes:
//  - SerializedRows
//  - RowDesc
//  - QueryID
//  - SubqueryID
//  - IsFinalSubqueryResult_
type OmniSciBroadcastSerializedRowsArgs struct {
  SerializedRows *serialized_result_set.TSerializedRows `thrift:"serialized_rows,1" db:"serialized_rows" json:"serialized_rows"`
  RowDesc TRowDescriptor `thrift:"row_desc,2" db:"row_desc" json:"row_desc"`
  QueryID TQueryId `thrift:"query_id,3" db:"query_id" json:"query_id"`
  SubqueryID TSubqueryId `thrift:"subquery_id,4" db:"subquery_id" json:"subquery_id"`
  IsFinalSubqueryResult_ bool `thrift:"is_final_subquery_result,5" db:"is_final_subquery_result" json:"is_final_subquery_result"`
}

func NewOmniSciBroadcastSerializedRowsArgs() *OmniSciBroadcastSerializedRowsArgs {
  return &OmniSciBroadcastSerializedRowsArgs{}
}

var OmniSciBroadcastSerializedRowsArgs_SerializedRows_DEFAULT *serialized_result_set.TSerializedRows
func (p *OmniSciBroadcastSerializedRowsArgs) GetSerializedRows() *serialized_result_set.TSerializedRows {
  if !p.IsSetSerializedRows() {
    return OmniSciBroadcastSerializedRowsArgs_SerializedRows_DEFAULT
  }
return p.SerializedRows
}

func (p *OmniSciBroadcastSerializedRowsArgs) GetRowDesc() TRowDescriptor {
  return p.RowDesc
}

func (p *OmniSciBroadcastSerializedRowsArgs) GetQueryID() TQueryId {
  return p.QueryID
}

func (p *OmniSciBroadcastSerializedRowsArgs) GetSubqueryID() TSubqueryId {
  return p.SubqueryID
}

func (p *OmniSciBroadcastSerializedRowsArgs) GetIsFinalSubqueryResult_() bool {
  return p.IsFinalSubqueryResult_
}
func (p *OmniSciBroadcastSerializedRowsArgs) IsSetSerializedRows() bool {
  return p.SerializedRows != nil
}

func (p *OmniSciBroadcastSerializedRowsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciBroadcastSerializedRowsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.SerializedRows = &serialized_result_set.TSerializedRows{}
  if err := p.SerializedRows.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SerializedRows), err)
  }
  return nil
}

func (p *OmniSciBroadcastSerializedRowsArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make(TRowDescriptor, 0, size)
  p.RowDesc =  tSlice
  for i := 0; i < size; i ++ {
    _elem251 := &TColumnType{}
    if err := _elem251.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem251), err)
    }
    p.RowDesc = append(p.RowDesc, _elem251)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciBroadcastSerializedRowsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TQueryId(v)
  p.QueryID = temp
}
  return nil
}

func (p *OmniSciBroadcastSerializedRowsArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TSubqueryId(v)
  p.SubqueryID = temp
}
  return nil
}

func (p *OmniSciBroadcastSerializedRowsArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IsFinalSubqueryResult_ = v
}
  return nil
}

func (p *OmniSciBroadcastSerializedRowsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("broadcast_serialized_rows_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciBroadcastSerializedRowsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serialized_rows", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serialized_rows: ", p), err) }
  if err := p.SerializedRows.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SerializedRows), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serialized_rows: ", p), err) }
  return err
}

func (p *OmniSciBroadcastSerializedRowsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row_desc", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row_desc: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowDesc)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RowDesc {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row_desc: ", p), err) }
  return err
}

func (p *OmniSciBroadcastSerializedRowsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:query_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.QueryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:query_id: ", p), err) }
  return err
}

func (p *OmniSciBroadcastSerializedRowsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("subquery_id", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:subquery_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.SubqueryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.subquery_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:subquery_id: ", p), err) }
  return err
}

func (p *OmniSciBroadcastSerializedRowsArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_final_subquery_result", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:is_final_subquery_result: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsFinalSubqueryResult_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_final_subquery_result (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:is_final_subquery_result: ", p), err) }
  return err
}

func (p *OmniSciBroadcastSerializedRowsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciBroadcastSerializedRowsArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciBroadcastSerializedRowsResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciBroadcastSerializedRowsResult() *OmniSciBroadcastSerializedRowsResult {
  return &OmniSciBroadcastSerializedRowsResult{}
}

var OmniSciBroadcastSerializedRowsResult_E_DEFAULT *TOmniSciException
func (p *OmniSciBroadcastSerializedRowsResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciBroadcastSerializedRowsResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciBroadcastSerializedRowsResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciBroadcastSerializedRowsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciBroadcastSerializedRowsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciBroadcastSerializedRowsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("broadcast_serialized_rows_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciBroadcastSerializedRowsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciBroadcastSerializedRowsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciBroadcastSerializedRowsResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - WidgetID
//  - NodeIdx
//  - VegaJSON
type OmniSciStartRenderQueryArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  WidgetID int64 `thrift:"widget_id,2" db:"widget_id" json:"widget_id"`
  NodeIdx int16 `thrift:"node_idx,3" db:"node_idx" json:"node_idx"`
  VegaJSON string `thrift:"vega_json,4" db:"vega_json" json:"vega_json"`
}

func NewOmniSciStartRenderQueryArgs() *OmniSciStartRenderQueryArgs {
  return &OmniSciStartRenderQueryArgs{}
}


func (p *OmniSciStartRenderQueryArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciStartRenderQueryArgs) GetWidgetID() int64 {
  return p.WidgetID
}

func (p *OmniSciStartRenderQueryArgs) GetNodeIdx() int16 {
  return p.NodeIdx
}

func (p *OmniSciStartRenderQueryArgs) GetVegaJSON() string {
  return p.VegaJSON
}
func (p *OmniSciStartRenderQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciStartRenderQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciStartRenderQueryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WidgetID = v
}
  return nil
}

func (p *OmniSciStartRenderQueryArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NodeIdx = v
}
  return nil
}

func (p *OmniSciStartRenderQueryArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VegaJSON = v
}
  return nil
}

func (p *OmniSciStartRenderQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("start_render_query_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciStartRenderQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciStartRenderQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("widget_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:widget_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.WidgetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.widget_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:widget_id: ", p), err) }
  return err
}

func (p *OmniSciStartRenderQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("node_idx", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:node_idx: ", p), err) }
  if err := oprot.WriteI16(int16(p.NodeIdx)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.node_idx (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:node_idx: ", p), err) }
  return err
}

func (p *OmniSciStartRenderQueryArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vega_json", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:vega_json: ", p), err) }
  if err := oprot.WriteString(string(p.VegaJSON)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vega_json (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:vega_json: ", p), err) }
  return err
}

func (p *OmniSciStartRenderQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciStartRenderQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciStartRenderQueryResult struct {
  Success *TPendingRenderQuery `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciStartRenderQueryResult() *OmniSciStartRenderQueryResult {
  return &OmniSciStartRenderQueryResult{}
}

var OmniSciStartRenderQueryResult_Success_DEFAULT *TPendingRenderQuery
func (p *OmniSciStartRenderQueryResult) GetSuccess() *TPendingRenderQuery {
  if !p.IsSetSuccess() {
    return OmniSciStartRenderQueryResult_Success_DEFAULT
  }
return p.Success
}
var OmniSciStartRenderQueryResult_E_DEFAULT *TOmniSciException
func (p *OmniSciStartRenderQueryResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciStartRenderQueryResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciStartRenderQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciStartRenderQueryResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciStartRenderQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciStartRenderQueryResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TPendingRenderQuery{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OmniSciStartRenderQueryResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciStartRenderQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("start_render_query_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciStartRenderQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciStartRenderQueryResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciStartRenderQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciStartRenderQueryResult(%+v)", *p)
}

// Attributes:
//  - PendingRender
//  - MergedData
type OmniSciExecuteNextRenderStepArgs struct {
  PendingRender *TPendingRenderQuery `thrift:"pending_render,1" db:"pending_render" json:"pending_render"`
  MergedData TRenderAggDataMap `thrift:"merged_data,2" db:"merged_data" json:"merged_data"`
}

func NewOmniSciExecuteNextRenderStepArgs() *OmniSciExecuteNextRenderStepArgs {
  return &OmniSciExecuteNextRenderStepArgs{}
}

var OmniSciExecuteNextRenderStepArgs_PendingRender_DEFAULT *TPendingRenderQuery
func (p *OmniSciExecuteNextRenderStepArgs) GetPendingRender() *TPendingRenderQuery {
  if !p.IsSetPendingRender() {
    return OmniSciExecuteNextRenderStepArgs_PendingRender_DEFAULT
  }
return p.PendingRender
}

func (p *OmniSciExecuteNextRenderStepArgs) GetMergedData() TRenderAggDataMap {
  return p.MergedData
}
func (p *OmniSciExecuteNextRenderStepArgs) IsSetPendingRender() bool {
  return p.PendingRender != nil
}

func (p *OmniSciExecuteNextRenderStepArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciExecuteNextRenderStepArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.PendingRender = &TPendingRenderQuery{}
  if err := p.PendingRender.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PendingRender), err)
  }
  return nil
}

func (p *OmniSciExecuteNextRenderStepArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(TRenderAggDataMap, size)
  p.MergedData =  tMap
  for i := 0; i < size; i ++ {
var _key252 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key252 = v
}
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]map[string]map[string][]*TRenderDatum, size)
    _val253 :=  tMap
    for i := 0; i < size; i ++ {
var _key254 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _key254 = v
}
      _, _, size, err := iprot.ReadMapBegin()
      if err != nil {
        return thrift.PrependError("error reading map begin: ", err)
      }
      tMap := make(map[string]map[string][]*TRenderDatum, size)
      _val255 :=  tMap
      for i := 0; i < size; i ++ {
var _key256 string
        if v, err := iprot.ReadString(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
} else {
        _key256 = v
}
        _, _, size, err := iprot.ReadMapBegin()
        if err != nil {
          return thrift.PrependError("error reading map begin: ", err)
        }
        tMap := make(map[string][]*TRenderDatum, size)
        _val257 :=  tMap
        for i := 0; i < size; i ++ {
var _key258 string
          if v, err := iprot.ReadString(); err != nil {
          return thrift.PrependError("error reading field 0: ", err)
} else {
          _key258 = v
}
          _, size, err := iprot.ReadListBegin()
          if err != nil {
            return thrift.PrependError("error reading list begin: ", err)
          }
          tSlice := make([]*TRenderDatum, 0, size)
          _val259 :=  tSlice
          for i := 0; i < size; i ++ {
            _elem260 := &TRenderDatum{}
            if err := _elem260.Read(iprot); err != nil {
              return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem260), err)
            }
            _val259 = append(_val259, _elem260)
          }
          if err := iprot.ReadListEnd(); err != nil {
            return thrift.PrependError("error reading list end: ", err)
          }
          _val257[_key258] = _val259
        }
        if err := iprot.ReadMapEnd(); err != nil {
          return thrift.PrependError("error reading map end: ", err)
        }
        _val255[_key256] = _val257
      }
      if err := iprot.ReadMapEnd(); err != nil {
        return thrift.PrependError("error reading map end: ", err)
      }
      _val253[_key254] = _val255
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.MergedData[_key252] = _val253
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *OmniSciExecuteNextRenderStepArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("execute_next_render_step_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciExecuteNextRenderStepArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pending_render", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pending_render: ", p), err) }
  if err := p.PendingRender.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PendingRender), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pending_render: ", p), err) }
  return err
}

func (p *OmniSciExecuteNextRenderStepArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("merged_data", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:merged_data: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.MergedData)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MergedData {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(v)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range v {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(v)); err != nil {
        return thrift.PrependError("error writing map begin: ", err)
      }
      for k, v := range v {
        if err := oprot.WriteString(string(k)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
        if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(v)); err != nil {
          return thrift.PrependError("error writing map begin: ", err)
        }
        for k, v := range v {
          if err := oprot.WriteString(string(k)); err != nil {
          return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
          if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
            return thrift.PrependError("error writing list begin: ", err)
          }
          for _, v := range v {
            if err := v.Write(oprot); err != nil {
              return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
            }
          }
          if err := oprot.WriteListEnd(); err != nil {
            return thrift.PrependError("error writing list end: ", err)
          }
        }
        if err := oprot.WriteMapEnd(); err != nil {
          return thrift.PrependError("error writing map end: ", err)
        }
      }
      if err := oprot.WriteMapEnd(); err != nil {
        return thrift.PrependError("error writing map end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:merged_data: ", p), err) }
  return err
}

func (p *OmniSciExecuteNextRenderStepArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciExecuteNextRenderStepArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciExecuteNextRenderStepResult struct {
  Success *TRenderStepResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciExecuteNextRenderStepResult() *OmniSciExecuteNextRenderStepResult {
  return &OmniSciExecuteNextRenderStepResult{}
}

var OmniSciExecuteNextRenderStepResult_Success_DEFAULT *TRenderStepResult_
func (p *OmniSciExecuteNextRenderStepResult) GetSuccess() *TRenderStepResult_ {
  if !p.IsSetSuccess() {
    return OmniSciExecuteNextRenderStepResult_Success_DEFAULT
  }
return p.Success
}
var OmniSciExecuteNextRenderStepResult_E_DEFAULT *TOmniSciException
func (p *OmniSciExecuteNextRenderStepResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciExecuteNextRenderStepResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciExecuteNextRenderStepResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciExecuteNextRenderStepResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciExecuteNextRenderStepResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciExecuteNextRenderStepResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TRenderStepResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OmniSciExecuteNextRenderStepResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciExecuteNextRenderStepResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("execute_next_render_step_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciExecuteNextRenderStepResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciExecuteNextRenderStepResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciExecuteNextRenderStepResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciExecuteNextRenderStepResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - InsertData
type OmniSciInsertDataArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  InsertData *TInsertData `thrift:"insert_data,2" db:"insert_data" json:"insert_data"`
}

func NewOmniSciInsertDataArgs() *OmniSciInsertDataArgs {
  return &OmniSciInsertDataArgs{}
}


func (p *OmniSciInsertDataArgs) GetSession() TSessionId {
  return p.Session
}
var OmniSciInsertDataArgs_InsertData_DEFAULT *TInsertData
func (p *OmniSciInsertDataArgs) GetInsertData() *TInsertData {
  if !p.IsSetInsertData() {
    return OmniSciInsertDataArgs_InsertData_DEFAULT
  }
return p.InsertData
}
func (p *OmniSciInsertDataArgs) IsSetInsertData() bool {
  return p.InsertData != nil
}

func (p *OmniSciInsertDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciInsertDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciInsertDataArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.InsertData = &TInsertData{}
  if err := p.InsertData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InsertData), err)
  }
  return nil
}

func (p *OmniSciInsertDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("insert_data_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciInsertDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciInsertDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("insert_data", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:insert_data: ", p), err) }
  if err := p.InsertData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InsertData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:insert_data: ", p), err) }
  return err
}

func (p *OmniSciInsertDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciInsertDataArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciInsertDataResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciInsertDataResult() *OmniSciInsertDataResult {
  return &OmniSciInsertDataResult{}
}

var OmniSciInsertDataResult_E_DEFAULT *TOmniSciException
func (p *OmniSciInsertDataResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciInsertDataResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciInsertDataResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciInsertDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciInsertDataResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciInsertDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("insert_data_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciInsertDataResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciInsertDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciInsertDataResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableID
type OmniSciCheckpointArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  TableID int32 `thrift:"table_id,2" db:"table_id" json:"table_id"`
}

func NewOmniSciCheckpointArgs() *OmniSciCheckpointArgs {
  return &OmniSciCheckpointArgs{}
}


func (p *OmniSciCheckpointArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciCheckpointArgs) GetTableID() int32 {
  return p.TableID
}
func (p *OmniSciCheckpointArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciCheckpointArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciCheckpointArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableID = v
}
  return nil
}

func (p *OmniSciCheckpointArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkpoint_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciCheckpointArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciCheckpointArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TableID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_id: ", p), err) }
  return err
}

func (p *OmniSciCheckpointArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciCheckpointArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciCheckpointResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciCheckpointResult() *OmniSciCheckpointResult {
  return &OmniSciCheckpointResult{}
}

var OmniSciCheckpointResult_E_DEFAULT *TOmniSciException
func (p *OmniSciCheckpointResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciCheckpointResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciCheckpointResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciCheckpointResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciCheckpointResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciCheckpointResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkpoint_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciCheckpointResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciCheckpointResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciCheckpointResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetRolesArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewOmniSciGetRolesArgs() *OmniSciGetRolesArgs {
  return &OmniSciGetRolesArgs{}
}


func (p *OmniSciGetRolesArgs) GetSession() TSessionId {
  return p.Session
}
func (p *OmniSciGetRolesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetRolesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetRolesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_roles_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetRolesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetRolesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetRolesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetRolesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetRolesResult() *OmniSciGetRolesResult {
  return &OmniSciGetRolesResult{}
}

var OmniSciGetRolesResult_Success_DEFAULT []string

func (p *OmniSciGetRolesResult) GetSuccess() []string {
  return p.Success
}
var OmniSciGetRolesResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetRolesResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetRolesResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetRolesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetRolesResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetRolesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetRolesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem261 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem261 = v
}
    p.Success = append(p.Success, _elem261)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciGetRolesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetRolesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_roles_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetRolesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetRolesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetRolesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetRolesResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - RoleName
type OmniSciGetDbObjectsForGranteeArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  RoleName string `thrift:"roleName,2" db:"roleName" json:"roleName"`
}

func NewOmniSciGetDbObjectsForGranteeArgs() *OmniSciGetDbObjectsForGranteeArgs {
  return &OmniSciGetDbObjectsForGranteeArgs{}
}


func (p *OmniSciGetDbObjectsForGranteeArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciGetDbObjectsForGranteeArgs) GetRoleName() string {
  return p.RoleName
}
func (p *OmniSciGetDbObjectsForGranteeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetDbObjectsForGranteeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetDbObjectsForGranteeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *OmniSciGetDbObjectsForGranteeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_db_objects_for_grantee_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetDbObjectsForGranteeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetDbObjectsForGranteeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roleName: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roleName: ", p), err) }
  return err
}

func (p *OmniSciGetDbObjectsForGranteeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetDbObjectsForGranteeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetDbObjectsForGranteeResult struct {
  Success []*TDBObject `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetDbObjectsForGranteeResult() *OmniSciGetDbObjectsForGranteeResult {
  return &OmniSciGetDbObjectsForGranteeResult{}
}

var OmniSciGetDbObjectsForGranteeResult_Success_DEFAULT []*TDBObject

func (p *OmniSciGetDbObjectsForGranteeResult) GetSuccess() []*TDBObject {
  return p.Success
}
var OmniSciGetDbObjectsForGranteeResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetDbObjectsForGranteeResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetDbObjectsForGranteeResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetDbObjectsForGranteeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetDbObjectsForGranteeResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetDbObjectsForGranteeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetDbObjectsForGranteeResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDBObject, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem262 := &TDBObject{}
    if err := _elem262.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem262), err)
    }
    p.Success = append(p.Success, _elem262)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciGetDbObjectsForGranteeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetDbObjectsForGranteeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_db_objects_for_grantee_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetDbObjectsForGranteeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetDbObjectsForGranteeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetDbObjectsForGranteeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetDbObjectsForGranteeResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - ObjectName
//  - Type
type OmniSciGetDbObjectPrivsArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  ObjectName string `thrift:"objectName,2" db:"objectName" json:"objectName"`
  Type TDBObjectType `thrift:"type,3" db:"type" json:"type"`
}

func NewOmniSciGetDbObjectPrivsArgs() *OmniSciGetDbObjectPrivsArgs {
  return &OmniSciGetDbObjectPrivsArgs{}
}


func (p *OmniSciGetDbObjectPrivsArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciGetDbObjectPrivsArgs) GetObjectName() string {
  return p.ObjectName
}

func (p *OmniSciGetDbObjectPrivsArgs) GetType() TDBObjectType {
  return p.Type
}
func (p *OmniSciGetDbObjectPrivsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetDbObjectPrivsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetDbObjectPrivsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ObjectName = v
}
  return nil
}

func (p *OmniSciGetDbObjectPrivsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TDBObjectType(v)
  p.Type = temp
}
  return nil
}

func (p *OmniSciGetDbObjectPrivsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_db_object_privs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetDbObjectPrivsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetDbObjectPrivsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("objectName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:objectName: ", p), err) }
  if err := oprot.WriteString(string(p.ObjectName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.objectName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:objectName: ", p), err) }
  return err
}

func (p *OmniSciGetDbObjectPrivsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *OmniSciGetDbObjectPrivsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetDbObjectPrivsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetDbObjectPrivsResult struct {
  Success []*TDBObject `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetDbObjectPrivsResult() *OmniSciGetDbObjectPrivsResult {
  return &OmniSciGetDbObjectPrivsResult{}
}

var OmniSciGetDbObjectPrivsResult_Success_DEFAULT []*TDBObject

func (p *OmniSciGetDbObjectPrivsResult) GetSuccess() []*TDBObject {
  return p.Success
}
var OmniSciGetDbObjectPrivsResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetDbObjectPrivsResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetDbObjectPrivsResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetDbObjectPrivsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetDbObjectPrivsResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetDbObjectPrivsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetDbObjectPrivsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDBObject, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem263 := &TDBObject{}
    if err := _elem263.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem263), err)
    }
    p.Success = append(p.Success, _elem263)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciGetDbObjectPrivsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetDbObjectPrivsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_db_object_privs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetDbObjectPrivsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetDbObjectPrivsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetDbObjectPrivsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetDbObjectPrivsResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - UserName
type OmniSciGetAllRolesForUserArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  UserName string `thrift:"userName,2" db:"userName" json:"userName"`
}

func NewOmniSciGetAllRolesForUserArgs() *OmniSciGetAllRolesForUserArgs {
  return &OmniSciGetAllRolesForUserArgs{}
}


func (p *OmniSciGetAllRolesForUserArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciGetAllRolesForUserArgs) GetUserName() string {
  return p.UserName
}
func (p *OmniSciGetAllRolesForUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetAllRolesForUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetAllRolesForUserArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *OmniSciGetAllRolesForUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_all_roles_for_user_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetAllRolesForUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetAllRolesForUserArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userName: ", p), err) }
  return err
}

func (p *OmniSciGetAllRolesForUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetAllRolesForUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetAllRolesForUserResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetAllRolesForUserResult() *OmniSciGetAllRolesForUserResult {
  return &OmniSciGetAllRolesForUserResult{}
}

var OmniSciGetAllRolesForUserResult_Success_DEFAULT []string

func (p *OmniSciGetAllRolesForUserResult) GetSuccess() []string {
  return p.Success
}
var OmniSciGetAllRolesForUserResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetAllRolesForUserResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetAllRolesForUserResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetAllRolesForUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetAllRolesForUserResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetAllRolesForUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetAllRolesForUserResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem264 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem264 = v
}
    p.Success = append(p.Success, _elem264)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciGetAllRolesForUserResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetAllRolesForUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_all_roles_for_user_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetAllRolesForUserResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetAllRolesForUserResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetAllRolesForUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetAllRolesForUserResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - GranteeName
//  - RoleName
type OmniSciHasRoleArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  GranteeName string `thrift:"granteeName,2" db:"granteeName" json:"granteeName"`
  RoleName string `thrift:"roleName,3" db:"roleName" json:"roleName"`
}

func NewOmniSciHasRoleArgs() *OmniSciHasRoleArgs {
  return &OmniSciHasRoleArgs{}
}


func (p *OmniSciHasRoleArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciHasRoleArgs) GetGranteeName() string {
  return p.GranteeName
}

func (p *OmniSciHasRoleArgs) GetRoleName() string {
  return p.RoleName
}
func (p *OmniSciHasRoleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciHasRoleArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciHasRoleArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GranteeName = v
}
  return nil
}

func (p *OmniSciHasRoleArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *OmniSciHasRoleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("has_role_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciHasRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciHasRoleArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("granteeName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:granteeName: ", p), err) }
  if err := oprot.WriteString(string(p.GranteeName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.granteeName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:granteeName: ", p), err) }
  return err
}

func (p *OmniSciHasRoleArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err) }
  return err
}

func (p *OmniSciHasRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciHasRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciHasRoleResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciHasRoleResult() *OmniSciHasRoleResult {
  return &OmniSciHasRoleResult{}
}

var OmniSciHasRoleResult_Success_DEFAULT bool
func (p *OmniSciHasRoleResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return OmniSciHasRoleResult_Success_DEFAULT
  }
return *p.Success
}
var OmniSciHasRoleResult_E_DEFAULT *TOmniSciException
func (p *OmniSciHasRoleResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciHasRoleResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciHasRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciHasRoleResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciHasRoleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciHasRoleResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *OmniSciHasRoleResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciHasRoleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("has_role_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciHasRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciHasRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciHasRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciHasRoleResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - GranteeName
//  - ObjectName
//  - ObjectType
//  - Permissions
type OmniSciHasObjectPrivilegeArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  GranteeName string `thrift:"granteeName,2" db:"granteeName" json:"granteeName"`
  ObjectName string `thrift:"ObjectName,3" db:"ObjectName" json:"ObjectName"`
  ObjectType TDBObjectType `thrift:"objectType,4" db:"objectType" json:"objectType"`
  Permissions *TDBObjectPermissions `thrift:"permissions,5" db:"permissions" json:"permissions"`
}

func NewOmniSciHasObjectPrivilegeArgs() *OmniSciHasObjectPrivilegeArgs {
  return &OmniSciHasObjectPrivilegeArgs{}
}


func (p *OmniSciHasObjectPrivilegeArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciHasObjectPrivilegeArgs) GetGranteeName() string {
  return p.GranteeName
}

func (p *OmniSciHasObjectPrivilegeArgs) GetObjectName() string {
  return p.ObjectName
}

func (p *OmniSciHasObjectPrivilegeArgs) GetObjectType() TDBObjectType {
  return p.ObjectType
}
var OmniSciHasObjectPrivilegeArgs_Permissions_DEFAULT *TDBObjectPermissions
func (p *OmniSciHasObjectPrivilegeArgs) GetPermissions() *TDBObjectPermissions {
  if !p.IsSetPermissions() {
    return OmniSciHasObjectPrivilegeArgs_Permissions_DEFAULT
  }
return p.Permissions
}
func (p *OmniSciHasObjectPrivilegeArgs) IsSetPermissions() bool {
  return p.Permissions != nil
}

func (p *OmniSciHasObjectPrivilegeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciHasObjectPrivilegeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciHasObjectPrivilegeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GranteeName = v
}
  return nil
}

func (p *OmniSciHasObjectPrivilegeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ObjectName = v
}
  return nil
}

func (p *OmniSciHasObjectPrivilegeArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TDBObjectType(v)
  p.ObjectType = temp
}
  return nil
}

func (p *OmniSciHasObjectPrivilegeArgs)  ReadField5(iprot thrift.TProtocol) error {
  p.Permissions = &TDBObjectPermissions{}
  if err := p.Permissions.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Permissions), err)
  }
  return nil
}

func (p *OmniSciHasObjectPrivilegeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("has_object_privilege_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciHasObjectPrivilegeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciHasObjectPrivilegeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("granteeName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:granteeName: ", p), err) }
  if err := oprot.WriteString(string(p.GranteeName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.granteeName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:granteeName: ", p), err) }
  return err
}

func (p *OmniSciHasObjectPrivilegeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ObjectName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ObjectName: ", p), err) }
  if err := oprot.WriteString(string(p.ObjectName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ObjectName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ObjectName: ", p), err) }
  return err
}

func (p *OmniSciHasObjectPrivilegeArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("objectType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:objectType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ObjectType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.objectType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:objectType: ", p), err) }
  return err
}

func (p *OmniSciHasObjectPrivilegeArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("permissions", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:permissions: ", p), err) }
  if err := p.Permissions.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Permissions), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:permissions: ", p), err) }
  return err
}

func (p *OmniSciHasObjectPrivilegeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciHasObjectPrivilegeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciHasObjectPrivilegeResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciHasObjectPrivilegeResult() *OmniSciHasObjectPrivilegeResult {
  return &OmniSciHasObjectPrivilegeResult{}
}

var OmniSciHasObjectPrivilegeResult_Success_DEFAULT bool
func (p *OmniSciHasObjectPrivilegeResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return OmniSciHasObjectPrivilegeResult_Success_DEFAULT
  }
return *p.Success
}
var OmniSciHasObjectPrivilegeResult_E_DEFAULT *TOmniSciException
func (p *OmniSciHasObjectPrivilegeResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciHasObjectPrivilegeResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciHasObjectPrivilegeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciHasObjectPrivilegeResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciHasObjectPrivilegeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciHasObjectPrivilegeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *OmniSciHasObjectPrivilegeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciHasObjectPrivilegeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("has_object_privilege_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciHasObjectPrivilegeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciHasObjectPrivilegeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciHasObjectPrivilegeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciHasObjectPrivilegeResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Key
//  - Nonce
type OmniSciSetLicenseKeyArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  Key string `thrift:"key,2" db:"key" json:"key"`
  Nonce string `thrift:"nonce,3" db:"nonce" json:"nonce"`
}

func NewOmniSciSetLicenseKeyArgs() *OmniSciSetLicenseKeyArgs {
  return &OmniSciSetLicenseKeyArgs{}
}


func (p *OmniSciSetLicenseKeyArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciSetLicenseKeyArgs) GetKey() string {
  return p.Key
}

func (p *OmniSciSetLicenseKeyArgs) GetNonce() string {
  return p.Nonce
}
func (p *OmniSciSetLicenseKeyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciSetLicenseKeyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciSetLicenseKeyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *OmniSciSetLicenseKeyArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *OmniSciSetLicenseKeyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_license_key_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciSetLicenseKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciSetLicenseKeyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *OmniSciSetLicenseKeyArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nonce: ", p), err) }
  if err := oprot.WriteString(string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nonce: ", p), err) }
  return err
}

func (p *OmniSciSetLicenseKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciSetLicenseKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciSetLicenseKeyResult struct {
  Success *TLicenseInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciSetLicenseKeyResult() *OmniSciSetLicenseKeyResult {
  return &OmniSciSetLicenseKeyResult{}
}

var OmniSciSetLicenseKeyResult_Success_DEFAULT *TLicenseInfo
func (p *OmniSciSetLicenseKeyResult) GetSuccess() *TLicenseInfo {
  if !p.IsSetSuccess() {
    return OmniSciSetLicenseKeyResult_Success_DEFAULT
  }
return p.Success
}
var OmniSciSetLicenseKeyResult_E_DEFAULT *TOmniSciException
func (p *OmniSciSetLicenseKeyResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciSetLicenseKeyResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciSetLicenseKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciSetLicenseKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciSetLicenseKeyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciSetLicenseKeyResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TLicenseInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OmniSciSetLicenseKeyResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciSetLicenseKeyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_license_key_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciSetLicenseKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciSetLicenseKeyResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciSetLicenseKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciSetLicenseKeyResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Nonce
type OmniSciGetLicenseClaimsArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  Nonce string `thrift:"nonce,2" db:"nonce" json:"nonce"`
}

func NewOmniSciGetLicenseClaimsArgs() *OmniSciGetLicenseClaimsArgs {
  return &OmniSciGetLicenseClaimsArgs{}
}


func (p *OmniSciGetLicenseClaimsArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciGetLicenseClaimsArgs) GetNonce() string {
  return p.Nonce
}
func (p *OmniSciGetLicenseClaimsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetLicenseClaimsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetLicenseClaimsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *OmniSciGetLicenseClaimsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_license_claims_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetLicenseClaimsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetLicenseClaimsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nonce: ", p), err) }
  if err := oprot.WriteString(string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nonce: ", p), err) }
  return err
}

func (p *OmniSciGetLicenseClaimsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetLicenseClaimsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetLicenseClaimsResult struct {
  Success *TLicenseInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetLicenseClaimsResult() *OmniSciGetLicenseClaimsResult {
  return &OmniSciGetLicenseClaimsResult{}
}

var OmniSciGetLicenseClaimsResult_Success_DEFAULT *TLicenseInfo
func (p *OmniSciGetLicenseClaimsResult) GetSuccess() *TLicenseInfo {
  if !p.IsSetSuccess() {
    return OmniSciGetLicenseClaimsResult_Success_DEFAULT
  }
return p.Success
}
var OmniSciGetLicenseClaimsResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetLicenseClaimsResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetLicenseClaimsResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetLicenseClaimsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetLicenseClaimsResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetLicenseClaimsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetLicenseClaimsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TLicenseInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OmniSciGetLicenseClaimsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetLicenseClaimsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_license_claims_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetLicenseClaimsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetLicenseClaimsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetLicenseClaimsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetLicenseClaimsResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetDeviceParametersArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
}

func NewOmniSciGetDeviceParametersArgs() *OmniSciGetDeviceParametersArgs {
  return &OmniSciGetDeviceParametersArgs{}
}


func (p *OmniSciGetDeviceParametersArgs) GetSession() TSessionId {
  return p.Session
}
func (p *OmniSciGetDeviceParametersArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetDeviceParametersArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciGetDeviceParametersArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_device_parameters_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetDeviceParametersArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciGetDeviceParametersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetDeviceParametersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetDeviceParametersResult struct {
  Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciGetDeviceParametersResult() *OmniSciGetDeviceParametersResult {
  return &OmniSciGetDeviceParametersResult{}
}

var OmniSciGetDeviceParametersResult_Success_DEFAULT map[string]string

func (p *OmniSciGetDeviceParametersResult) GetSuccess() map[string]string {
  return p.Success
}
var OmniSciGetDeviceParametersResult_E_DEFAULT *TOmniSciException
func (p *OmniSciGetDeviceParametersResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciGetDeviceParametersResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciGetDeviceParametersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OmniSciGetDeviceParametersResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciGetDeviceParametersResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciGetDeviceParametersResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key265 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key265 = v
}
var _val266 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val266 = v
}
    p.Success[_key265] = _val266
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *OmniSciGetDeviceParametersResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciGetDeviceParametersResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_device_parameters_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciGetDeviceParametersResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OmniSciGetDeviceParametersResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciGetDeviceParametersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciGetDeviceParametersResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Udfs
//  - Udtfs
//  - DeviceIrMap
type OmniSciRegisterRuntimeExtensionFunctionsArgs struct {
  Session TSessionId `thrift:"session,1" db:"session" json:"session"`
  Udfs []*extension_functions.TUserDefinedFunction `thrift:"udfs,2" db:"udfs" json:"udfs"`
  Udtfs []*extension_functions.TUserDefinedTableFunction `thrift:"udtfs,3" db:"udtfs" json:"udtfs"`
  DeviceIrMap map[string]string `thrift:"device_ir_map,4" db:"device_ir_map" json:"device_ir_map"`
}

func NewOmniSciRegisterRuntimeExtensionFunctionsArgs() *OmniSciRegisterRuntimeExtensionFunctionsArgs {
  return &OmniSciRegisterRuntimeExtensionFunctionsArgs{}
}


func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) GetSession() TSessionId {
  return p.Session
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) GetUdfs() []*extension_functions.TUserDefinedFunction {
  return p.Udfs
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) GetUdtfs() []*extension_functions.TUserDefinedTableFunction {
  return p.Udtfs
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) GetDeviceIrMap() map[string]string {
  return p.DeviceIrMap
}
func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionId(v)
  p.Session = temp
}
  return nil
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*extension_functions.TUserDefinedFunction, 0, size)
  p.Udfs =  tSlice
  for i := 0; i < size; i ++ {
    _elem267 := &extension_functions.TUserDefinedFunction{}
    if err := _elem267.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem267), err)
    }
    p.Udfs = append(p.Udfs, _elem267)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*extension_functions.TUserDefinedTableFunction, 0, size)
  p.Udtfs =  tSlice
  for i := 0; i < size; i ++ {
    _elem268 := &extension_functions.TUserDefinedTableFunction{}
    if err := _elem268.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem268), err)
    }
    p.Udtfs = append(p.Udtfs, _elem268)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.DeviceIrMap =  tMap
  for i := 0; i < size; i ++ {
var _key269 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key269 = v
}
var _val270 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val270 = v
}
    p.DeviceIrMap[_key269] = _val270
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("register_runtime_extension_functions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err) }
  if err := oprot.WriteString(string(p.Session)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err) }
  return err
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("udfs", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:udfs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Udfs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Udfs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:udfs: ", p), err) }
  return err
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("udtfs", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:udtfs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Udtfs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Udtfs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:udtfs: ", p), err) }
  return err
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("device_ir_map", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:device_ir_map: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.DeviceIrMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.DeviceIrMap {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:device_ir_map: ", p), err) }
  return err
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciRegisterRuntimeExtensionFunctionsArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciRegisterRuntimeExtensionFunctionsResult struct {
  E *TOmniSciException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewOmniSciRegisterRuntimeExtensionFunctionsResult() *OmniSciRegisterRuntimeExtensionFunctionsResult {
  return &OmniSciRegisterRuntimeExtensionFunctionsResult{}
}

var OmniSciRegisterRuntimeExtensionFunctionsResult_E_DEFAULT *TOmniSciException
func (p *OmniSciRegisterRuntimeExtensionFunctionsResult) GetE() *TOmniSciException {
  if !p.IsSetE() {
    return OmniSciRegisterRuntimeExtensionFunctionsResult_E_DEFAULT
  }
return p.E
}
func (p *OmniSciRegisterRuntimeExtensionFunctionsResult) IsSetE() bool {
  return p.E != nil
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TOmniSciException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("register_runtime_extension_functions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OmniSciRegisterRuntimeExtensionFunctionsResult(%+v)", *p)
}


