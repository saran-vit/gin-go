// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package omnisci

import (
	"bytes"
	"common"
	"completion_hints"
	"extension_functions"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"serialized_result_set"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = completion_hints.GoUnusedProtection__
var _ = serialized_result_set.GoUnusedProtection__
var _ = extension_functions.GoUnusedProtection__

type OmniSci interface {
	// Parameters:
	//  - User
	//  - Passwd
	//  - Dbname
	Connect(user string, passwd string, dbname string) (r TSessionId, err error)
	// Parameters:
	//  - InputToken
	//  - Dbname
	Krb5Connect(inputToken string, dbname string) (r *TKrb5Session, err error)
	// Parameters:
	//  - Session
	Disconnect(session TSessionId) (err error)
	// Parameters:
	//  - Session
	//  - Dbname
	SwitchDatabase(session TSessionId, dbname string) (err error)
	// Parameters:
	//  - Session
	CloneSession(session TSessionId) (r TSessionId, err error)
	// Parameters:
	//  - Session
	GetServerStatus(session TSessionId) (r *TServerStatus, err error)
	// Parameters:
	//  - Session
	GetStatus(session TSessionId) (r []*TServerStatus, err error)
	// Parameters:
	//  - Session
	GetHardwareInfo(session TSessionId) (r *TClusterHardwareInfo, err error)
	// Parameters:
	//  - Session
	GetTables(session TSessionId) (r []string, err error)
	// Parameters:
	//  - Session
	GetPhysicalTables(session TSessionId) (r []string, err error)
	// Parameters:
	//  - Session
	GetViews(session TSessionId) (r []string, err error)
	// Parameters:
	//  - Session
	GetTablesMeta(session TSessionId) (r []*TTableMeta, err error)
	// Parameters:
	//  - Session
	//  - TableName
	GetTableDetails(session TSessionId, table_name string) (r *TTableDetails, err error)
	// Parameters:
	//  - Session
	//  - TableName
	GetInternalTableDetails(session TSessionId, table_name string) (r *TTableDetails, err error)
	// Parameters:
	//  - Session
	GetUsers(session TSessionId) (r []string, err error)
	// Parameters:
	//  - Session
	GetDatabases(session TSessionId) (r []*TDBInfo, err error)
	GetVersion() (r string, err error)
	// Parameters:
	//  - Session
	StartHeapProfile(session TSessionId) (err error)
	// Parameters:
	//  - Session
	StopHeapProfile(session TSessionId) (err error)
	// Parameters:
	//  - Session
	GetHeapProfile(session TSessionId) (r string, err error)
	// Parameters:
	//  - Session
	//  - MemoryLevel
	GetMemory(session TSessionId, memory_level string) (r []*TNodeMemoryInfo, err error)
	// Parameters:
	//  - Session
	ClearCPUMemory(session TSessionId) (err error)
	// Parameters:
	//  - Session
	ClearGpuMemory(session TSessionId) (err error)
	// Parameters:
	//  - ParentSession
	//  - LeafSession
	//  - StartTimeStr
	//  - Label
	SetCurSession(parent_session TSessionId, leaf_session TSessionId, start_time_str string, label string) (err error)
	// Parameters:
	//  - ParentSession
	//  - LeafSession
	//  - StartTimeStr
	//  - Label
	InvalidateCurSession(parent_session TSessionId, leaf_session TSessionId, start_time_str string, label string) (err error)
	// Parameters:
	//  - Session
	//  - DbID
	//  - TableID
	//  - NewEpoch_
	SetTableEpoch(session TSessionId, db_id int32, table_id int32, new_epoch int32) (err error)
	// Parameters:
	//  - Session
	//  - TableName
	//  - NewEpoch_
	SetTableEpochByName(session TSessionId, table_name string, new_epoch int32) (err error)
	// Parameters:
	//  - Session
	//  - DbID
	//  - TableID
	GetTableEpoch(session TSessionId, db_id int32, table_id int32) (r int32, err error)
	// Parameters:
	//  - Session
	//  - TableName
	GetTableEpochByName(session TSessionId, table_name string) (r int32, err error)
	// Parameters:
	//  - Session
	//  - DbID
	//  - TableID
	GetTableEpochs(session TSessionId, db_id int32, table_id int32) (r []*TTableEpochInfo, err error)
	// Parameters:
	//  - Session
	//  - DbID
	//  - TableEpochs
	SetTableEpochs(session TSessionId, db_id int32, table_epochs []*TTableEpochInfo) (err error)
	// Parameters:
	//  - Session
	GetSessionInfo(session TSessionId) (r *TSessionInfo, err error)
	// Parameters:
	//  - Session
	//  - Query
	//  - ColumnFormat
	//  - Nonce
	//  - FirstN
	//  - AtMostN
	SqlExecute(session TSessionId, query string, column_format bool, nonce string, first_n int32, at_most_n int32) (r *TQueryResult_, err error)
	// Parameters:
	//  - Session
	//  - Query
	//  - DeviceType
	//  - DeviceID
	//  - FirstN
	//  - TransportMethod
	SqlExecuteDf(session TSessionId, query string, device_type common.TDeviceType, device_id int32, first_n int32, transport_method TArrowTransport) (r *TDataFrame, err error)
	// Parameters:
	//  - Session
	//  - Query
	//  - DeviceID
	//  - FirstN
	SqlExecuteGdf(session TSessionId, query string, device_id int32, first_n int32) (r *TDataFrame, err error)
	// Parameters:
	//  - Session
	//  - Df
	//  - DeviceType
	//  - DeviceID
	DeallocateDf(session TSessionId, df *TDataFrame, device_type common.TDeviceType, device_id int32) (err error)
	// Parameters:
	//  - QuerySession
	//  - InterruptSession
	Interrupt(query_session TSessionId, interrupt_session TSessionId) (err error)
	// Parameters:
	//  - Session
	//  - Query
	SqlValidate(session TSessionId, query string) (r TRowDescriptor, err error)
	// Parameters:
	//  - Session
	//  - Sql
	//  - Cursor
	GetCompletionHints(session TSessionId, sql string, cursor int32) (r []*completion_hints.TCompletionHint, err error)
	// Parameters:
	//  - Session
	//  - Mode
	SetExecutionMode(session TSessionId, mode TExecuteMode) (err error)
	// Parameters:
	//  - Session
	//  - WidgetID
	//  - VegaJSON
	//  - CompressionLevel
	//  - Nonce
	RenderVega(session TSessionId, widget_id int64, vega_json string, compression_level int32, nonce string) (r *TRenderResult_, err error)
	// Parameters:
	//  - Session
	//  - WidgetID
	//  - Pixel
	//  - TableColNames
	//  - ColumnFormat
	//  - PixelRadius
	//  - Nonce
	GetResultRowForPixel(session TSessionId, widget_id int64, pixel *TPixel, table_col_names map[string][]string, column_format bool, pixelRadius int32, nonce string) (r *TPixelTableRowResult_, err error)
	// Parameters:
	//  - Session
	//  - DashboardID
	GetDashboard(session TSessionId, dashboard_id int32) (r *TDashboard, err error)
	// Parameters:
	//  - Session
	GetDashboards(session TSessionId) (r []*TDashboard, err error)
	// Parameters:
	//  - Session
	//  - DashboardName
	//  - DashboardState
	//  - ImageHash
	//  - DashboardMetadata
	CreateDashboard(session TSessionId, dashboard_name string, dashboard_state string, image_hash string, dashboard_metadata string) (r int32, err error)
	// Parameters:
	//  - Session
	//  - DashboardID
	//  - DashboardName
	//  - DashboardOwner
	//  - DashboardState
	//  - ImageHash
	//  - DashboardMetadata
	ReplaceDashboard(session TSessionId, dashboard_id int32, dashboard_name string, dashboard_owner string, dashboard_state string, image_hash string, dashboard_metadata string) (err error)
	// Parameters:
	//  - Session
	//  - DashboardID
	DeleteDashboard(session TSessionId, dashboard_id int32) (err error)
	// Parameters:
	//  - Session
	//  - DashboardIds
	//  - Groups
	//  - Permissions
	ShareDashboards(session TSessionId, dashboard_ids []int32, groups []string, permissions *TDashboardPermissions) (err error)
	// Parameters:
	//  - Session
	//  - DashboardIds
	DeleteDashboards(session TSessionId, dashboard_ids []int32) (err error)
	// Parameters:
	//  - Session
	//  - DashboardID
	//  - Groups
	//  - Objects
	//  - Permissions
	//  - GrantRole
	ShareDashboard(session TSessionId, dashboard_id int32, groups []string, objects []string, permissions *TDashboardPermissions, grant_role bool) (err error)
	// Parameters:
	//  - Session
	//  - DashboardID
	//  - Groups
	//  - Objects
	//  - Permissions
	UnshareDashboard(session TSessionId, dashboard_id int32, groups []string, objects []string, permissions *TDashboardPermissions) (err error)
	// Parameters:
	//  - Session
	//  - DashboardIds
	//  - Groups
	//  - Permissions
	UnshareDashboards(session TSessionId, dashboard_ids []int32, groups []string, permissions *TDashboardPermissions) (err error)
	// Parameters:
	//  - Session
	//  - DashboardID
	GetDashboardGrantees(session TSessionId, dashboard_id int32) (r []*TDashboardGrantees, err error)
	// Parameters:
	//  - Session
	//  - Link
	GetLinkView(session TSessionId, link string) (r *TFrontendView, err error)
	// Parameters:
	//  - Session
	//  - ViewState
	//  - ViewMetadata
	CreateLink(session TSessionId, view_state string, view_metadata string) (r string, err error)
	// Parameters:
	//  - Session
	//  - TableName
	//  - Rows
	//  - ColumnNames
	LoadTableBinary(session TSessionId, table_name string, rows []*TRow, column_names []string) (err error)
	// Parameters:
	//  - Session
	//  - TableName
	//  - Cols
	//  - ColumnNames
	LoadTableBinaryColumnar(session TSessionId, table_name string, cols []*TColumn, column_names []string) (err error)
	// Parameters:
	//  - Session
	//  - TableName
	//  - ArrowStream
	//  - UseColumnNames
	LoadTableBinaryArrow(session TSessionId, table_name string, arrow_stream []byte, use_column_names bool) (err error)
	// Parameters:
	//  - Session
	//  - TableName
	//  - Rows
	//  - ColumnNames
	LoadTable(session TSessionId, table_name string, rows []*TStringRow, column_names []string) (err error)
	// Parameters:
	//  - Session
	//  - FileName
	//  - CopyParams
	DetectColumnTypes(session TSessionId, file_name string, copy_params *TCopyParams) (r *TDetectResult_, err error)
	// Parameters:
	//  - Session
	//  - TableName
	//  - RowDesc
	//  - FileType
	//  - CreateParams
	CreateTable(session TSessionId, table_name string, row_desc TRowDescriptor, file_type TFileType, create_params *TCreateParams) (err error)
	// Parameters:
	//  - Session
	//  - TableName
	//  - FileName
	//  - CopyParams
	ImportTable(session TSessionId, table_name string, file_name string, copy_params *TCopyParams) (err error)
	// Parameters:
	//  - Session
	//  - TableName
	//  - FileName
	//  - CopyParams
	//  - RowDesc
	//  - CreateParams
	ImportGeoTable(session TSessionId, table_name string, file_name string, copy_params *TCopyParams, row_desc TRowDescriptor, create_params *TCreateParams) (err error)
	// Parameters:
	//  - Session
	//  - ImportID
	ImportTableStatus(session TSessionId, import_id string) (r *TImportStatus, err error)
	// Parameters:
	//  - Session
	//  - ArchivePath
	//  - CopyParams
	GetFirstGeoFileInArchive(session TSessionId, archive_path string, copy_params *TCopyParams) (r string, err error)
	// Parameters:
	//  - Session
	//  - ArchivePath
	//  - CopyParams
	GetAllFilesInArchive(session TSessionId, archive_path string, copy_params *TCopyParams) (r []string, err error)
	// Parameters:
	//  - Session
	//  - FileName
	//  - CopyParams
	GetLayersInGeoFile(session TSessionId, file_name string, copy_params *TCopyParams) (r []*TGeoFileLayerInfo, err error)
	// Parameters:
	//  - Session
	//  - Query
	QueryGetOuterFragmentCount(session TSessionId, query string) (r int64, err error)
	// Parameters:
	//  - Session
	//  - TableID
	CheckTableConsistency(session TSessionId, table_id int32) (r *TTableMeta, err error)
	// Parameters:
	//  - LeafSession
	//  - ParentSession
	//  - QueryRa
	//  - StartTimeStr
	//  - JustExplain
	//  - OuterFragmentIndices
	StartQuery(leaf_session TSessionId, parent_session TSessionId, query_ra string, start_time_str string, just_explain bool, outer_fragment_indices []int64) (r *TPendingQuery, err error)
	// Parameters:
	//  - PendingQuery
	//  - SubqueryID
	//  - StartTimeStr
	ExecuteQueryStep(pending_query *TPendingQuery, subquery_id TSubqueryId, start_time_str string) (r *TStepResult_, err error)
	// Parameters:
	//  - SerializedRows
	//  - RowDesc
	//  - QueryID
	//  - SubqueryID
	//  - IsFinalSubqueryResult_
	BroadcastSerializedRows(serialized_rows *serialized_result_set.TSerializedRows, row_desc TRowDescriptor, query_id TQueryId, subquery_id TSubqueryId, is_final_subquery_result bool) (err error)
	// Parameters:
	//  - Session
	//  - WidgetID
	//  - NodeIdx
	//  - VegaJSON
	StartRenderQuery(session TSessionId, widget_id int64, node_idx int16, vega_json string) (r *TPendingRenderQuery, err error)
	// Parameters:
	//  - PendingRender
	//  - MergedData
	ExecuteNextRenderStep(pending_render *TPendingRenderQuery, merged_data TRenderAggDataMap) (r *TRenderStepResult_, err error)
	// Parameters:
	//  - Session
	//  - InsertData
	InsertData(session TSessionId, insert_data *TInsertData) (err error)
	// Parameters:
	//  - Session
	//  - TableID
	Checkpoint(session TSessionId, table_id int32) (err error)
	// Parameters:
	//  - Session
	GetRoles(session TSessionId) (r []string, err error)
	// Parameters:
	//  - Session
	//  - RoleName
	GetDbObjectsForGrantee(session TSessionId, roleName string) (r []*TDBObject, err error)
	// Parameters:
	//  - Session
	//  - ObjectName
	//  - Type
	GetDbObjectPrivs(session TSessionId, objectName string, type_a1 TDBObjectType) (r []*TDBObject, err error)
	// Parameters:
	//  - Session
	//  - UserName
	GetAllRolesForUser(session TSessionId, userName string) (r []string, err error)
	// Parameters:
	//  - Session
	//  - GranteeName
	//  - RoleName
	HasRole(session TSessionId, granteeName string, roleName string) (r bool, err error)
	// Parameters:
	//  - Session
	//  - GranteeName
	//  - ObjectName
	//  - ObjectType
	//  - Permissions
	HasObjectPrivilege(session TSessionId, granteeName string, ObjectName string, objectType TDBObjectType, permissions *TDBObjectPermissions) (r bool, err error)
	// Parameters:
	//  - Session
	//  - Key
	//  - Nonce
	SetLicenseKey(session TSessionId, key string, nonce string) (r *TLicenseInfo, err error)
	// Parameters:
	//  - Session
	//  - Nonce
	GetLicenseClaims(session TSessionId, nonce string) (r *TLicenseInfo, err error)
	// Parameters:
	//  - Session
	GetDeviceParameters(session TSessionId) (r map[string]string, err error)
	// Parameters:
	//  - Session
	//  - Udfs
	//  - Udtfs
	//  - DeviceIrMap
	RegisterRuntimeExtensionFunctions(session TSessionId, udfs []*extension_functions.TUserDefinedFunction, udtfs []*extension_functions.TUserDefinedTableFunction, device_ir_map map[string]string) (err error)
}

type OmniSciClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewOmniSciClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *OmniSciClient {
	return &OmniSciClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewOmniSciClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *OmniSciClient {
	return &OmniSciClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - User
//  - Passwd
//  - Dbname
func (p *OmniSciClient) Connect(user string, passwd string, dbname string) (r TSessionId, err error) {
	if err = p.sendConnect(user, passwd, dbname); err != nil {
		return
	}
	return p.recvConnect()
}

func (p *OmniSciClient) sendConnect(user string, passwd string, dbname string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("connect", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciConnectArgs{
		User:   user,
		Passwd: passwd,
		Dbname: dbname,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvConnect() (value TSessionId, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "connect" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "connect failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "connect failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error41 error
		error41, err = error40.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error41
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "connect failed: invalid message type")
		return
	}
	result := OmniSciConnectResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - InputToken
//  - Dbname
func (p *OmniSciClient) Krb5Connect(inputToken string, dbname string) (r *TKrb5Session, err error) {
	if err = p.sendKrb5Connect(inputToken, dbname); err != nil {
		return
	}
	return p.recvKrb5Connect()
}

func (p *OmniSciClient) sendKrb5Connect(inputToken string, dbname string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("krb5_connect", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciKrb5ConnectArgs{
		InputToken: inputToken,
		Dbname:     dbname,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvKrb5Connect() (value *TKrb5Session, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "krb5_connect" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "krb5_connect failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "krb5_connect failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error43 error
		error43, err = error42.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error43
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "krb5_connect failed: invalid message type")
		return
	}
	result := OmniSciKrb5ConnectResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
func (p *OmniSciClient) Disconnect(session TSessionId) (err error) {
	if err = p.sendDisconnect(session); err != nil {
		return
	}
	return p.recvDisconnect()
}

func (p *OmniSciClient) sendDisconnect(session TSessionId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("disconnect", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciDisconnectArgs{
		Session: session,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvDisconnect() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "disconnect" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "disconnect failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "disconnect failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error44 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error45 error
		error45, err = error44.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error45
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "disconnect failed: invalid message type")
		return
	}
	result := OmniSciDisconnectResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
//  - Dbname
func (p *OmniSciClient) SwitchDatabase(session TSessionId, dbname string) (err error) {
	if err = p.sendSwitchDatabase(session, dbname); err != nil {
		return
	}
	return p.recvSwitchDatabase()
}

func (p *OmniSciClient) sendSwitchDatabase(session TSessionId, dbname string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("switch_database", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciSwitchDatabaseArgs{
		Session: session,
		Dbname:  dbname,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvSwitchDatabase() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "switch_database" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "switch_database failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "switch_database failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error46 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error47 error
		error47, err = error46.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error47
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "switch_database failed: invalid message type")
		return
	}
	result := OmniSciSwitchDatabaseResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
func (p *OmniSciClient) CloneSession(session TSessionId) (r TSessionId, err error) {
	if err = p.sendCloneSession(session); err != nil {
		return
	}
	return p.recvCloneSession()
}

func (p *OmniSciClient) sendCloneSession(session TSessionId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("clone_session", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciCloneSessionArgs{
		Session: session,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvCloneSession() (value TSessionId, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "clone_session" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "clone_session failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "clone_session failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error48 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error49 error
		error49, err = error48.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error49
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "clone_session failed: invalid message type")
		return
	}
	result := OmniSciCloneSessionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetServerStatus(session TSessionId) (r *TServerStatus, err error) {
	if err = p.sendGetServerStatus(session); err != nil {
		return
	}
	return p.recvGetServerStatus()
}

func (p *OmniSciClient) sendGetServerStatus(session TSessionId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_server_status", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetServerStatusArgs{
		Session: session,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetServerStatus() (value *TServerStatus, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_server_status" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_server_status failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_server_status failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error50 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error51 error
		error51, err = error50.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error51
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_server_status failed: invalid message type")
		return
	}
	result := OmniSciGetServerStatusResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetStatus(session TSessionId) (r []*TServerStatus, err error) {
	if err = p.sendGetStatus(session); err != nil {
		return
	}
	return p.recvGetStatus()
}

func (p *OmniSciClient) sendGetStatus(session TSessionId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_status", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetStatusArgs{
		Session: session,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetStatus() (value []*TServerStatus, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_status" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_status failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_status failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error52 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error53 error
		error53, err = error52.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error53
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_status failed: invalid message type")
		return
	}
	result := OmniSciGetStatusResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetHardwareInfo(session TSessionId) (r *TClusterHardwareInfo, err error) {
	if err = p.sendGetHardwareInfo(session); err != nil {
		return
	}
	return p.recvGetHardwareInfo()
}

func (p *OmniSciClient) sendGetHardwareInfo(session TSessionId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_hardware_info", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetHardwareInfoArgs{
		Session: session,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetHardwareInfo() (value *TClusterHardwareInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_hardware_info" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_hardware_info failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_hardware_info failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error54 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error55 error
		error55, err = error54.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error55
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_hardware_info failed: invalid message type")
		return
	}
	result := OmniSciGetHardwareInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetTables(session TSessionId) (r []string, err error) {
	if err = p.sendGetTables(session); err != nil {
		return
	}
	return p.recvGetTables()
}

func (p *OmniSciClient) sendGetTables(session TSessionId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_tables", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetTablesArgs{
		Session: session,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetTables() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_tables" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_tables failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_tables failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error56 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error57 error
		error57, err = error56.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error57
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_tables failed: invalid message type")
		return
	}
	result := OmniSciGetTablesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetPhysicalTables(session TSessionId) (r []string, err error) {
	if err = p.sendGetPhysicalTables(session); err != nil {
		return
	}
	return p.recvGetPhysicalTables()
}

func (p *OmniSciClient) sendGetPhysicalTables(session TSessionId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_physical_tables", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetPhysicalTablesArgs{
		Session: session,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetPhysicalTables() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_physical_tables" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_physical_tables failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_physical_tables failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error58 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error59 error
		error59, err = error58.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error59
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_physical_tables failed: invalid message type")
		return
	}
	result := OmniSciGetPhysicalTablesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetViews(session TSessionId) (r []string, err error) {
	if err = p.sendGetViews(session); err != nil {
		return
	}
	return p.recvGetViews()
}

func (p *OmniSciClient) sendGetViews(session TSessionId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_views", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetViewsArgs{
		Session: session,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetViews() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_views" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_views failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_views failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error60 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error61 error
		error61, err = error60.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error61
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_views failed: invalid message type")
		return
	}
	result := OmniSciGetViewsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetTablesMeta(session TSessionId) (r []*TTableMeta, err error) {
	if err = p.sendGetTablesMeta(session); err != nil {
		return
	}
	return p.recvGetTablesMeta()
}

func (p *OmniSciClient) sendGetTablesMeta(session TSessionId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_tables_meta", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetTablesMetaArgs{
		Session: session,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetTablesMeta() (value []*TTableMeta, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_tables_meta" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_tables_meta failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_tables_meta failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error62 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error63 error
		error63, err = error62.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error63
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_tables_meta failed: invalid message type")
		return
	}
	result := OmniSciGetTablesMetaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - TableName
func (p *OmniSciClient) GetTableDetails(session TSessionId, table_name string) (r *TTableDetails, err error) {
	if err = p.sendGetTableDetails(session, table_name); err != nil {
		return
	}
	return p.recvGetTableDetails()
}

func (p *OmniSciClient) sendGetTableDetails(session TSessionId, table_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_table_details", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetTableDetailsArgs{
		Session:   session,
		TableName: table_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetTableDetails() (value *TTableDetails, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_table_details" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_table_details failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_table_details failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error64 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error65 error
		error65, err = error64.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error65
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_table_details failed: invalid message type")
		return
	}
	result := OmniSciGetTableDetailsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - TableName
func (p *OmniSciClient) GetInternalTableDetails(session TSessionId, table_name string) (r *TTableDetails, err error) {
	if err = p.sendGetInternalTableDetails(session, table_name); err != nil {
		return
	}
	return p.recvGetInternalTableDetails()
}

func (p *OmniSciClient) sendGetInternalTableDetails(session TSessionId, table_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_internal_table_details", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetInternalTableDetailsArgs{
		Session:   session,
		TableName: table_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetInternalTableDetails() (value *TTableDetails, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_internal_table_details" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_internal_table_details failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_internal_table_details failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error66 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error67 error
		error67, err = error66.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error67
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_internal_table_details failed: invalid message type")
		return
	}
	result := OmniSciGetInternalTableDetailsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetUsers(session TSessionId) (r []string, err error) {
	if err = p.sendGetUsers(session); err != nil {
		return
	}
	return p.recvGetUsers()
}

func (p *OmniSciClient) sendGetUsers(session TSessionId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_users", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetUsersArgs{
		Session: session,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetUsers() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_users" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_users failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_users failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error68 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error69 error
		error69, err = error68.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error69
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_users failed: invalid message type")
		return
	}
	result := OmniSciGetUsersResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetDatabases(session TSessionId) (r []*TDBInfo, err error) {
	if err = p.sendGetDatabases(session); err != nil {
		return
	}
	return p.recvGetDatabases()
}

func (p *OmniSciClient) sendGetDatabases(session TSessionId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_databases", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetDatabasesArgs{
		Session: session,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetDatabases() (value []*TDBInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_databases" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_databases failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_databases failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error70 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error71 error
		error71, err = error70.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error71
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_databases failed: invalid message type")
		return
	}
	result := OmniSciGetDatabasesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *OmniSciClient) GetVersion() (r string, err error) {
	if err = p.sendGetVersion(); err != nil {
		return
	}
	return p.recvGetVersion()
}

func (p *OmniSciClient) sendGetVersion() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_version", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetVersionArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetVersion() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_version" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_version failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_version failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error72 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error73 error
		error73, err = error72.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error73
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_version failed: invalid message type")
		return
	}
	result := OmniSciGetVersionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
func (p *OmniSciClient) StartHeapProfile(session TSessionId) (err error) {
	if err = p.sendStartHeapProfile(session); err != nil {
		return
	}
	return p.recvStartHeapProfile()
}

func (p *OmniSciClient) sendStartHeapProfile(session TSessionId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("start_heap_profile", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciStartHeapProfileArgs{
		Session: session,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvStartHeapProfile() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "start_heap_profile" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "start_heap_profile failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "start_heap_profile failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error74 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error75 error
		error75, err = error74.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error75
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "start_heap_profile failed: invalid message type")
		return
	}
	result := OmniSciStartHeapProfileResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
func (p *OmniSciClient) StopHeapProfile(session TSessionId) (err error) {
	if err = p.sendStopHeapProfile(session); err != nil {
		return
	}
	return p.recvStopHeapProfile()
}

func (p *OmniSciClient) sendStopHeapProfile(session TSessionId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("stop_heap_profile", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciStopHeapProfileArgs{
		Session: session,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvStopHeapProfile() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "stop_heap_profile" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "stop_heap_profile failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "stop_heap_profile failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error76 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error77 error
		error77, err = error76.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error77
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "stop_heap_profile failed: invalid message type")
		return
	}
	result := OmniSciStopHeapProfileResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetHeapProfile(session TSessionId) (r string, err error) {
	if err = p.sendGetHeapProfile(session); err != nil {
		return
	}
	return p.recvGetHeapProfile()
}

func (p *OmniSciClient) sendGetHeapProfile(session TSessionId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_heap_profile", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetHeapProfileArgs{
		Session: session,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetHeapProfile() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_heap_profile" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_heap_profile failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_heap_profile failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error78 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error79 error
		error79, err = error78.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error79
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_heap_profile failed: invalid message type")
		return
	}
	result := OmniSciGetHeapProfileResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - MemoryLevel
func (p *OmniSciClient) GetMemory(session TSessionId, memory_level string) (r []*TNodeMemoryInfo, err error) {
	if err = p.sendGetMemory(session, memory_level); err != nil {
		return
	}
	return p.recvGetMemory()
}

func (p *OmniSciClient) sendGetMemory(session TSessionId, memory_level string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_memory", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetMemoryArgs{
		Session:     session,
		MemoryLevel: memory_level,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetMemory() (value []*TNodeMemoryInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_memory" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_memory failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_memory failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error80 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error81 error
		error81, err = error80.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error81
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_memory failed: invalid message type")
		return
	}
	result := OmniSciGetMemoryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
func (p *OmniSciClient) ClearCPUMemory(session TSessionId) (err error) {
	if err = p.sendClearCPUMemory(session); err != nil {
		return
	}
	return p.recvClearCPUMemory()
}

func (p *OmniSciClient) sendClearCPUMemory(session TSessionId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("clear_cpu_memory", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciClearCPUMemoryArgs{
		Session: session,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvClearCPUMemory() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "clear_cpu_memory" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "clear_cpu_memory failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "clear_cpu_memory failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error82 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error83 error
		error83, err = error82.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error83
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "clear_cpu_memory failed: invalid message type")
		return
	}
	result := OmniSciClearCPUMemoryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
func (p *OmniSciClient) ClearGpuMemory(session TSessionId) (err error) {
	if err = p.sendClearGpuMemory(session); err != nil {
		return
	}
	return p.recvClearGpuMemory()
}

func (p *OmniSciClient) sendClearGpuMemory(session TSessionId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("clear_gpu_memory", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciClearGpuMemoryArgs{
		Session: session,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvClearGpuMemory() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "clear_gpu_memory" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "clear_gpu_memory failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "clear_gpu_memory failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error84 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error85 error
		error85, err = error84.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error85
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "clear_gpu_memory failed: invalid message type")
		return
	}
	result := OmniSciClearGpuMemoryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ParentSession
//  - LeafSession
//  - StartTimeStr
//  - Label
func (p *OmniSciClient) SetCurSession(parent_session TSessionId, leaf_session TSessionId, start_time_str string, label string) (err error) {
	if err = p.sendSetCurSession(parent_session, leaf_session, start_time_str, label); err != nil {
		return
	}
	return p.recvSetCurSession()
}

func (p *OmniSciClient) sendSetCurSession(parent_session TSessionId, leaf_session TSessionId, start_time_str string, label string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("set_cur_session", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciSetCurSessionArgs{
		ParentSession: parent_session,
		LeafSession:   leaf_session,
		StartTimeStr:  start_time_str,
		Label:         label,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvSetCurSession() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "set_cur_session" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "set_cur_session failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "set_cur_session failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error86 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error87 error
		error87, err = error86.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error87
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "set_cur_session failed: invalid message type")
		return
	}
	result := OmniSciSetCurSessionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ParentSession
//  - LeafSession
//  - StartTimeStr
//  - Label
func (p *OmniSciClient) InvalidateCurSession(parent_session TSessionId, leaf_session TSessionId, start_time_str string, label string) (err error) {
	if err = p.sendInvalidateCurSession(parent_session, leaf_session, start_time_str, label); err != nil {
		return
	}
	return p.recvInvalidateCurSession()
}

func (p *OmniSciClient) sendInvalidateCurSession(parent_session TSessionId, leaf_session TSessionId, start_time_str string, label string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("invalidate_cur_session", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciInvalidateCurSessionArgs{
		ParentSession: parent_session,
		LeafSession:   leaf_session,
		StartTimeStr:  start_time_str,
		Label:         label,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvInvalidateCurSession() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "invalidate_cur_session" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "invalidate_cur_session failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "invalidate_cur_session failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error88 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error89 error
		error89, err = error88.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error89
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "invalidate_cur_session failed: invalid message type")
		return
	}
	result := OmniSciInvalidateCurSessionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
//  - DbID
//  - TableID
//  - NewEpoch_
func (p *OmniSciClient) SetTableEpoch(session TSessionId, db_id int32, table_id int32, new_epoch int32) (err error) {
	if err = p.sendSetTableEpoch(session, db_id, table_id, new_epoch); err != nil {
		return
	}
	return p.recvSetTableEpoch()
}

func (p *OmniSciClient) sendSetTableEpoch(session TSessionId, db_id int32, table_id int32, new_epoch int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("set_table_epoch", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciSetTableEpochArgs{
		Session:   session,
		DbID:      db_id,
		TableID:   table_id,
		NewEpoch_: new_epoch,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvSetTableEpoch() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "set_table_epoch" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "set_table_epoch failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "set_table_epoch failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error90 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error91 error
		error91, err = error90.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error91
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "set_table_epoch failed: invalid message type")
		return
	}
	result := OmniSciSetTableEpochResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
//  - TableName
//  - NewEpoch_
func (p *OmniSciClient) SetTableEpochByName(session TSessionId, table_name string, new_epoch int32) (err error) {
	if err = p.sendSetTableEpochByName(session, table_name, new_epoch); err != nil {
		return
	}
	return p.recvSetTableEpochByName()
}

func (p *OmniSciClient) sendSetTableEpochByName(session TSessionId, table_name string, new_epoch int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("set_table_epoch_by_name", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciSetTableEpochByNameArgs{
		Session:   session,
		TableName: table_name,
		NewEpoch_: new_epoch,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvSetTableEpochByName() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "set_table_epoch_by_name" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "set_table_epoch_by_name failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "set_table_epoch_by_name failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error92 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error93 error
		error93, err = error92.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error93
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "set_table_epoch_by_name failed: invalid message type")
		return
	}
	result := OmniSciSetTableEpochByNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
//  - DbID
//  - TableID
func (p *OmniSciClient) GetTableEpoch(session TSessionId, db_id int32, table_id int32) (r int32, err error) {
	if err = p.sendGetTableEpoch(session, db_id, table_id); err != nil {
		return
	}
	return p.recvGetTableEpoch()
}

func (p *OmniSciClient) sendGetTableEpoch(session TSessionId, db_id int32, table_id int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_table_epoch", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetTableEpochArgs{
		Session: session,
		DbID:    db_id,
		TableID: table_id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetTableEpoch() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_table_epoch" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_table_epoch failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_table_epoch failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error94 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error95 error
		error95, err = error94.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error95
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_table_epoch failed: invalid message type")
		return
	}
	result := OmniSciGetTableEpochResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - TableName
func (p *OmniSciClient) GetTableEpochByName(session TSessionId, table_name string) (r int32, err error) {
	if err = p.sendGetTableEpochByName(session, table_name); err != nil {
		return
	}
	return p.recvGetTableEpochByName()
}

func (p *OmniSciClient) sendGetTableEpochByName(session TSessionId, table_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_table_epoch_by_name", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetTableEpochByNameArgs{
		Session:   session,
		TableName: table_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetTableEpochByName() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_table_epoch_by_name" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_table_epoch_by_name failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_table_epoch_by_name failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error96 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error97 error
		error97, err = error96.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error97
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_table_epoch_by_name failed: invalid message type")
		return
	}
	result := OmniSciGetTableEpochByNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - DbID
//  - TableID
func (p *OmniSciClient) GetTableEpochs(session TSessionId, db_id int32, table_id int32) (r []*TTableEpochInfo, err error) {
	if err = p.sendGetTableEpochs(session, db_id, table_id); err != nil {
		return
	}
	return p.recvGetTableEpochs()
}

func (p *OmniSciClient) sendGetTableEpochs(session TSessionId, db_id int32, table_id int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_table_epochs", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetTableEpochsArgs{
		Session: session,
		DbID:    db_id,
		TableID: table_id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetTableEpochs() (value []*TTableEpochInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_table_epochs" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_table_epochs failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_table_epochs failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error98 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error99 error
		error99, err = error98.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error99
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_table_epochs failed: invalid message type")
		return
	}
	result := OmniSciGetTableEpochsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - DbID
//  - TableEpochs
func (p *OmniSciClient) SetTableEpochs(session TSessionId, db_id int32, table_epochs []*TTableEpochInfo) (err error) {
	if err = p.sendSetTableEpochs(session, db_id, table_epochs); err != nil {
		return
	}
	return p.recvSetTableEpochs()
}

func (p *OmniSciClient) sendSetTableEpochs(session TSessionId, db_id int32, table_epochs []*TTableEpochInfo) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("set_table_epochs", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciSetTableEpochsArgs{
		Session:     session,
		DbID:        db_id,
		TableEpochs: table_epochs,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvSetTableEpochs() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "set_table_epochs" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "set_table_epochs failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "set_table_epochs failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error100 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error101 error
		error101, err = error100.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error101
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "set_table_epochs failed: invalid message type")
		return
	}
	result := OmniSciSetTableEpochsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetSessionInfo(session TSessionId) (r *TSessionInfo, err error) {
	if err = p.sendGetSessionInfo(session); err != nil {
		return
	}
	return p.recvGetSessionInfo()
}

func (p *OmniSciClient) sendGetSessionInfo(session TSessionId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_session_info", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetSessionInfoArgs{
		Session: session,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetSessionInfo() (value *TSessionInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_session_info" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_session_info failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_session_info failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error102 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error103 error
		error103, err = error102.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error103
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_session_info failed: invalid message type")
		return
	}
	result := OmniSciGetSessionInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - Query
//  - ColumnFormat
//  - Nonce
//  - FirstN
//  - AtMostN
func (p *OmniSciClient) SqlExecute(session TSessionId, query string, column_format bool, nonce string, first_n int32, at_most_n int32) (r *TQueryResult_, err error) {
	if err = p.sendSqlExecute(session, query, column_format, nonce, first_n, at_most_n); err != nil {
		return
	}
	return p.recvSqlExecute()
}

func (p *OmniSciClient) sendSqlExecute(session TSessionId, query string, column_format bool, nonce string, first_n int32, at_most_n int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sql_execute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciSqlExecuteArgs{
		Session:      session,
		Query:        query,
		ColumnFormat: column_format,
		Nonce:        nonce,
		FirstN:       first_n,
		AtMostN:      at_most_n,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvSqlExecute() (value *TQueryResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sql_execute" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sql_execute failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sql_execute failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error104 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error105 error
		error105, err = error104.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error105
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sql_execute failed: invalid message type")
		return
	}
	result := OmniSciSqlExecuteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - Query
//  - DeviceType
//  - DeviceID
//  - FirstN
//  - TransportMethod
func (p *OmniSciClient) SqlExecuteDf(session TSessionId, query string, device_type common.TDeviceType, device_id int32, first_n int32, transport_method TArrowTransport) (r *TDataFrame, err error) {
	if err = p.sendSqlExecuteDf(session, query, device_type, device_id, first_n, transport_method); err != nil {
		return
	}
	return p.recvSqlExecuteDf()
}

func (p *OmniSciClient) sendSqlExecuteDf(session TSessionId, query string, device_type common.TDeviceType, device_id int32, first_n int32, transport_method TArrowTransport) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sql_execute_df", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciSqlExecuteDfArgs{
		Session:         session,
		Query:           query,
		DeviceType:      device_type,
		DeviceID:        device_id,
		FirstN:          first_n,
		TransportMethod: transport_method,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvSqlExecuteDf() (value *TDataFrame, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sql_execute_df" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sql_execute_df failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sql_execute_df failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error106 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error107 error
		error107, err = error106.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error107
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sql_execute_df failed: invalid message type")
		return
	}
	result := OmniSciSqlExecuteDfResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - Query
//  - DeviceID
//  - FirstN
func (p *OmniSciClient) SqlExecuteGdf(session TSessionId, query string, device_id int32, first_n int32) (r *TDataFrame, err error) {
	if err = p.sendSqlExecuteGdf(session, query, device_id, first_n); err != nil {
		return
	}
	return p.recvSqlExecuteGdf()
}

func (p *OmniSciClient) sendSqlExecuteGdf(session TSessionId, query string, device_id int32, first_n int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sql_execute_gdf", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciSqlExecuteGdfArgs{
		Session:  session,
		Query:    query,
		DeviceID: device_id,
		FirstN:   first_n,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvSqlExecuteGdf() (value *TDataFrame, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sql_execute_gdf" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sql_execute_gdf failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sql_execute_gdf failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error108 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error109 error
		error109, err = error108.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error109
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sql_execute_gdf failed: invalid message type")
		return
	}
	result := OmniSciSqlExecuteGdfResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - Df
//  - DeviceType
//  - DeviceID
func (p *OmniSciClient) DeallocateDf(session TSessionId, df *TDataFrame, device_type common.TDeviceType, device_id int32) (err error) {
	if err = p.sendDeallocateDf(session, df, device_type, device_id); err != nil {
		return
	}
	return p.recvDeallocateDf()
}

func (p *OmniSciClient) sendDeallocateDf(session TSessionId, df *TDataFrame, device_type common.TDeviceType, device_id int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deallocate_df", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciDeallocateDfArgs{
		Session:    session,
		Df:         df,
		DeviceType: device_type,
		DeviceID:   device_id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvDeallocateDf() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deallocate_df" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deallocate_df failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deallocate_df failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error110 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error111 error
		error111, err = error110.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error111
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deallocate_df failed: invalid message type")
		return
	}
	result := OmniSciDeallocateDfResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - QuerySession
//  - InterruptSession
func (p *OmniSciClient) Interrupt(query_session TSessionId, interrupt_session TSessionId) (err error) {
	if err = p.sendInterrupt(query_session, interrupt_session); err != nil {
		return
	}
	return p.recvInterrupt()
}

func (p *OmniSciClient) sendInterrupt(query_session TSessionId, interrupt_session TSessionId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("interrupt", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciInterruptArgs{
		QuerySession:     query_session,
		InterruptSession: interrupt_session,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvInterrupt() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "interrupt" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "interrupt failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "interrupt failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error112 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error113 error
		error113, err = error112.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error113
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "interrupt failed: invalid message type")
		return
	}
	result := OmniSciInterruptResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
//  - Query
func (p *OmniSciClient) SqlValidate(session TSessionId, query string) (r TRowDescriptor, err error) {
	if err = p.sendSqlValidate(session, query); err != nil {
		return
	}
	return p.recvSqlValidate()
}

func (p *OmniSciClient) sendSqlValidate(session TSessionId, query string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sql_validate", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciSqlValidateArgs{
		Session: session,
		Query:   query,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvSqlValidate() (value TRowDescriptor, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sql_validate" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sql_validate failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sql_validate failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error114 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error115 error
		error115, err = error114.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error115
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sql_validate failed: invalid message type")
		return
	}
	result := OmniSciSqlValidateResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - Sql
//  - Cursor
func (p *OmniSciClient) GetCompletionHints(session TSessionId, sql string, cursor int32) (r []*completion_hints.TCompletionHint, err error) {
	if err = p.sendGetCompletionHints(session, sql, cursor); err != nil {
		return
	}
	return p.recvGetCompletionHints()
}

func (p *OmniSciClient) sendGetCompletionHints(session TSessionId, sql string, cursor int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_completion_hints", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetCompletionHintsArgs{
		Session: session,
		Sql:     sql,
		Cursor:  cursor,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetCompletionHints() (value []*completion_hints.TCompletionHint, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_completion_hints" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_completion_hints failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_completion_hints failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error116 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error117 error
		error117, err = error116.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error117
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_completion_hints failed: invalid message type")
		return
	}
	result := OmniSciGetCompletionHintsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - Mode
func (p *OmniSciClient) SetExecutionMode(session TSessionId, mode TExecuteMode) (err error) {
	if err = p.sendSetExecutionMode(session, mode); err != nil {
		return
	}
	return p.recvSetExecutionMode()
}

func (p *OmniSciClient) sendSetExecutionMode(session TSessionId, mode TExecuteMode) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("set_execution_mode", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciSetExecutionModeArgs{
		Session: session,
		Mode:    mode,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvSetExecutionMode() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "set_execution_mode" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "set_execution_mode failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "set_execution_mode failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error118 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error119 error
		error119, err = error118.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error119
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "set_execution_mode failed: invalid message type")
		return
	}
	result := OmniSciSetExecutionModeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
//  - WidgetID
//  - VegaJSON
//  - CompressionLevel
//  - Nonce
func (p *OmniSciClient) RenderVega(session TSessionId, widget_id int64, vega_json string, compression_level int32, nonce string) (r *TRenderResult_, err error) {
	if err = p.sendRenderVega(session, widget_id, vega_json, compression_level, nonce); err != nil {
		return
	}
	return p.recvRenderVega()
}

func (p *OmniSciClient) sendRenderVega(session TSessionId, widget_id int64, vega_json string, compression_level int32, nonce string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("render_vega", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciRenderVegaArgs{
		Session:          session,
		WidgetID:         widget_id,
		VegaJSON:         vega_json,
		CompressionLevel: compression_level,
		Nonce:            nonce,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvRenderVega() (value *TRenderResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "render_vega" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "render_vega failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "render_vega failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error120 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error121 error
		error121, err = error120.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error121
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "render_vega failed: invalid message type")
		return
	}
	result := OmniSciRenderVegaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - WidgetID
//  - Pixel
//  - TableColNames
//  - ColumnFormat
//  - PixelRadius
//  - Nonce
func (p *OmniSciClient) GetResultRowForPixel(session TSessionId, widget_id int64, pixel *TPixel, table_col_names map[string][]string, column_format bool, pixelRadius int32, nonce string) (r *TPixelTableRowResult_, err error) {
	if err = p.sendGetResultRowForPixel(session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce); err != nil {
		return
	}
	return p.recvGetResultRowForPixel()
}

func (p *OmniSciClient) sendGetResultRowForPixel(session TSessionId, widget_id int64, pixel *TPixel, table_col_names map[string][]string, column_format bool, pixelRadius int32, nonce string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_result_row_for_pixel", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetResultRowForPixelArgs{
		Session:       session,
		WidgetID:      widget_id,
		Pixel:         pixel,
		TableColNames: table_col_names,
		ColumnFormat:  column_format,
		PixelRadius:   pixelRadius,
		Nonce:         nonce,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetResultRowForPixel() (value *TPixelTableRowResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_result_row_for_pixel" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_result_row_for_pixel failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_result_row_for_pixel failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error122 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error123 error
		error123, err = error122.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error123
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_result_row_for_pixel failed: invalid message type")
		return
	}
	result := OmniSciGetResultRowForPixelResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - DashboardID
func (p *OmniSciClient) GetDashboard(session TSessionId, dashboard_id int32) (r *TDashboard, err error) {
	if err = p.sendGetDashboard(session, dashboard_id); err != nil {
		return
	}
	return p.recvGetDashboard()
}

func (p *OmniSciClient) sendGetDashboard(session TSessionId, dashboard_id int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_dashboard", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetDashboardArgs{
		Session:     session,
		DashboardID: dashboard_id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetDashboard() (value *TDashboard, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_dashboard" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_dashboard failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_dashboard failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error124 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error125 error
		error125, err = error124.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error125
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_dashboard failed: invalid message type")
		return
	}
	result := OmniSciGetDashboardResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetDashboards(session TSessionId) (r []*TDashboard, err error) {
	if err = p.sendGetDashboards(session); err != nil {
		return
	}
	return p.recvGetDashboards()
}

func (p *OmniSciClient) sendGetDashboards(session TSessionId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_dashboards", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetDashboardsArgs{
		Session: session,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetDashboards() (value []*TDashboard, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_dashboards" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_dashboards failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_dashboards failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error126 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error127 error
		error127, err = error126.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error127
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_dashboards failed: invalid message type")
		return
	}
	result := OmniSciGetDashboardsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - DashboardName
//  - DashboardState
//  - ImageHash
//  - DashboardMetadata
func (p *OmniSciClient) CreateDashboard(session TSessionId, dashboard_name string, dashboard_state string, image_hash string, dashboard_metadata string) (r int32, err error) {
	if err = p.sendCreateDashboard(session, dashboard_name, dashboard_state, image_hash, dashboard_metadata); err != nil {
		return
	}
	return p.recvCreateDashboard()
}

func (p *OmniSciClient) sendCreateDashboard(session TSessionId, dashboard_name string, dashboard_state string, image_hash string, dashboard_metadata string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("create_dashboard", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciCreateDashboardArgs{
		Session:           session,
		DashboardName:     dashboard_name,
		DashboardState:    dashboard_state,
		ImageHash:         image_hash,
		DashboardMetadata: dashboard_metadata,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvCreateDashboard() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "create_dashboard" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "create_dashboard failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_dashboard failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error128 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error129 error
		error129, err = error128.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error129
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "create_dashboard failed: invalid message type")
		return
	}
	result := OmniSciCreateDashboardResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - DashboardID
//  - DashboardName
//  - DashboardOwner
//  - DashboardState
//  - ImageHash
//  - DashboardMetadata
func (p *OmniSciClient) ReplaceDashboard(session TSessionId, dashboard_id int32, dashboard_name string, dashboard_owner string, dashboard_state string, image_hash string, dashboard_metadata string) (err error) {
	if err = p.sendReplaceDashboard(session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata); err != nil {
		return
	}
	return p.recvReplaceDashboard()
}

func (p *OmniSciClient) sendReplaceDashboard(session TSessionId, dashboard_id int32, dashboard_name string, dashboard_owner string, dashboard_state string, image_hash string, dashboard_metadata string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("replace_dashboard", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciReplaceDashboardArgs{
		Session:           session,
		DashboardID:       dashboard_id,
		DashboardName:     dashboard_name,
		DashboardOwner:    dashboard_owner,
		DashboardState:    dashboard_state,
		ImageHash:         image_hash,
		DashboardMetadata: dashboard_metadata,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvReplaceDashboard() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "replace_dashboard" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "replace_dashboard failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "replace_dashboard failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error130 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error131 error
		error131, err = error130.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error131
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "replace_dashboard failed: invalid message type")
		return
	}
	result := OmniSciReplaceDashboardResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
//  - DashboardID
func (p *OmniSciClient) DeleteDashboard(session TSessionId, dashboard_id int32) (err error) {
	if err = p.sendDeleteDashboard(session, dashboard_id); err != nil {
		return
	}
	return p.recvDeleteDashboard()
}

func (p *OmniSciClient) sendDeleteDashboard(session TSessionId, dashboard_id int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("delete_dashboard", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciDeleteDashboardArgs{
		Session:     session,
		DashboardID: dashboard_id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvDeleteDashboard() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "delete_dashboard" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "delete_dashboard failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "delete_dashboard failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error132 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error133 error
		error133, err = error132.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error133
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "delete_dashboard failed: invalid message type")
		return
	}
	result := OmniSciDeleteDashboardResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
//  - DashboardIds
//  - Groups
//  - Permissions
func (p *OmniSciClient) ShareDashboards(session TSessionId, dashboard_ids []int32, groups []string, permissions *TDashboardPermissions) (err error) {
	if err = p.sendShareDashboards(session, dashboard_ids, groups, permissions); err != nil {
		return
	}
	return p.recvShareDashboards()
}

func (p *OmniSciClient) sendShareDashboards(session TSessionId, dashboard_ids []int32, groups []string, permissions *TDashboardPermissions) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("share_dashboards", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciShareDashboardsArgs{
		Session:      session,
		DashboardIds: dashboard_ids,
		Groups:       groups,
		Permissions:  permissions,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvShareDashboards() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "share_dashboards" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "share_dashboards failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "share_dashboards failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error134 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error135 error
		error135, err = error134.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error135
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "share_dashboards failed: invalid message type")
		return
	}
	result := OmniSciShareDashboardsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
//  - DashboardIds
func (p *OmniSciClient) DeleteDashboards(session TSessionId, dashboard_ids []int32) (err error) {
	if err = p.sendDeleteDashboards(session, dashboard_ids); err != nil {
		return
	}
	return p.recvDeleteDashboards()
}

func (p *OmniSciClient) sendDeleteDashboards(session TSessionId, dashboard_ids []int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("delete_dashboards", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciDeleteDashboardsArgs{
		Session:      session,
		DashboardIds: dashboard_ids,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvDeleteDashboards() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "delete_dashboards" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "delete_dashboards failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "delete_dashboards failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error136 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error137 error
		error137, err = error136.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error137
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "delete_dashboards failed: invalid message type")
		return
	}
	result := OmniSciDeleteDashboardsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
//  - DashboardID
//  - Groups
//  - Objects
//  - Permissions
//  - GrantRole
func (p *OmniSciClient) ShareDashboard(session TSessionId, dashboard_id int32, groups []string, objects []string, permissions *TDashboardPermissions, grant_role bool) (err error) {
	if err = p.sendShareDashboard(session, dashboard_id, groups, objects, permissions, grant_role); err != nil {
		return
	}
	return p.recvShareDashboard()
}

func (p *OmniSciClient) sendShareDashboard(session TSessionId, dashboard_id int32, groups []string, objects []string, permissions *TDashboardPermissions, grant_role bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("share_dashboard", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciShareDashboardArgs{
		Session:     session,
		DashboardID: dashboard_id,
		Groups:      groups,
		Objects:     objects,
		Permissions: permissions,
		GrantRole:   grant_role,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvShareDashboard() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "share_dashboard" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "share_dashboard failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "share_dashboard failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error138 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error139 error
		error139, err = error138.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error139
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "share_dashboard failed: invalid message type")
		return
	}
	result := OmniSciShareDashboardResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
//  - DashboardID
//  - Groups
//  - Objects
//  - Permissions
func (p *OmniSciClient) UnshareDashboard(session TSessionId, dashboard_id int32, groups []string, objects []string, permissions *TDashboardPermissions) (err error) {
	if err = p.sendUnshareDashboard(session, dashboard_id, groups, objects, permissions); err != nil {
		return
	}
	return p.recvUnshareDashboard()
}

func (p *OmniSciClient) sendUnshareDashboard(session TSessionId, dashboard_id int32, groups []string, objects []string, permissions *TDashboardPermissions) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("unshare_dashboard", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciUnshareDashboardArgs{
		Session:     session,
		DashboardID: dashboard_id,
		Groups:      groups,
		Objects:     objects,
		Permissions: permissions,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvUnshareDashboard() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "unshare_dashboard" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "unshare_dashboard failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "unshare_dashboard failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error140 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error141 error
		error141, err = error140.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error141
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "unshare_dashboard failed: invalid message type")
		return
	}
	result := OmniSciUnshareDashboardResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
//  - DashboardIds
//  - Groups
//  - Permissions
func (p *OmniSciClient) UnshareDashboards(session TSessionId, dashboard_ids []int32, groups []string, permissions *TDashboardPermissions) (err error) {
	if err = p.sendUnshareDashboards(session, dashboard_ids, groups, permissions); err != nil {
		return
	}
	return p.recvUnshareDashboards()
}

func (p *OmniSciClient) sendUnshareDashboards(session TSessionId, dashboard_ids []int32, groups []string, permissions *TDashboardPermissions) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("unshare_dashboards", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciUnshareDashboardsArgs{
		Session:      session,
		DashboardIds: dashboard_ids,
		Groups:       groups,
		Permissions:  permissions,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvUnshareDashboards() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "unshare_dashboards" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "unshare_dashboards failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "unshare_dashboards failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error142 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error143 error
		error143, err = error142.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error143
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "unshare_dashboards failed: invalid message type")
		return
	}
	result := OmniSciUnshareDashboardsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
//  - DashboardID
func (p *OmniSciClient) GetDashboardGrantees(session TSessionId, dashboard_id int32) (r []*TDashboardGrantees, err error) {
	if err = p.sendGetDashboardGrantees(session, dashboard_id); err != nil {
		return
	}
	return p.recvGetDashboardGrantees()
}

func (p *OmniSciClient) sendGetDashboardGrantees(session TSessionId, dashboard_id int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_dashboard_grantees", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetDashboardGranteesArgs{
		Session:     session,
		DashboardID: dashboard_id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetDashboardGrantees() (value []*TDashboardGrantees, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_dashboard_grantees" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_dashboard_grantees failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_dashboard_grantees failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error144 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error145 error
		error145, err = error144.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error145
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_dashboard_grantees failed: invalid message type")
		return
	}
	result := OmniSciGetDashboardGranteesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - Link
func (p *OmniSciClient) GetLinkView(session TSessionId, link string) (r *TFrontendView, err error) {
	if err = p.sendGetLinkView(session, link); err != nil {
		return
	}
	return p.recvGetLinkView()
}

func (p *OmniSciClient) sendGetLinkView(session TSessionId, link string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_link_view", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetLinkViewArgs{
		Session: session,
		Link:    link,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetLinkView() (value *TFrontendView, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_link_view" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_link_view failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_link_view failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error146 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error147 error
		error147, err = error146.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error147
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_link_view failed: invalid message type")
		return
	}
	result := OmniSciGetLinkViewResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - ViewState
//  - ViewMetadata
func (p *OmniSciClient) CreateLink(session TSessionId, view_state string, view_metadata string) (r string, err error) {
	if err = p.sendCreateLink(session, view_state, view_metadata); err != nil {
		return
	}
	return p.recvCreateLink()
}

func (p *OmniSciClient) sendCreateLink(session TSessionId, view_state string, view_metadata string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("create_link", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciCreateLinkArgs{
		Session:      session,
		ViewState:    view_state,
		ViewMetadata: view_metadata,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvCreateLink() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "create_link" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "create_link failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_link failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error148 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error149 error
		error149, err = error148.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error149
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "create_link failed: invalid message type")
		return
	}
	result := OmniSciCreateLinkResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - TableName
//  - Rows
//  - ColumnNames
func (p *OmniSciClient) LoadTableBinary(session TSessionId, table_name string, rows []*TRow, column_names []string) (err error) {
	if err = p.sendLoadTableBinary(session, table_name, rows, column_names); err != nil {
		return
	}
	return p.recvLoadTableBinary()
}

func (p *OmniSciClient) sendLoadTableBinary(session TSessionId, table_name string, rows []*TRow, column_names []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("load_table_binary", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciLoadTableBinaryArgs{
		Session:     session,
		TableName:   table_name,
		Rows:        rows,
		ColumnNames: column_names,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvLoadTableBinary() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "load_table_binary" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "load_table_binary failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "load_table_binary failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error150 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error151 error
		error151, err = error150.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error151
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "load_table_binary failed: invalid message type")
		return
	}
	result := OmniSciLoadTableBinaryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
//  - TableName
//  - Cols
//  - ColumnNames
func (p *OmniSciClient) LoadTableBinaryColumnar(session TSessionId, table_name string, cols []*TColumn, column_names []string) (err error) {
	if err = p.sendLoadTableBinaryColumnar(session, table_name, cols, column_names); err != nil {
		return
	}
	return p.recvLoadTableBinaryColumnar()
}

func (p *OmniSciClient) sendLoadTableBinaryColumnar(session TSessionId, table_name string, cols []*TColumn, column_names []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("load_table_binary_columnar", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciLoadTableBinaryColumnarArgs{
		Session:     session,
		TableName:   table_name,
		Cols:        cols,
		ColumnNames: column_names,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvLoadTableBinaryColumnar() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "load_table_binary_columnar" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "load_table_binary_columnar failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "load_table_binary_columnar failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error152 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error153 error
		error153, err = error152.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error153
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "load_table_binary_columnar failed: invalid message type")
		return
	}
	result := OmniSciLoadTableBinaryColumnarResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
//  - TableName
//  - ArrowStream
//  - UseColumnNames
func (p *OmniSciClient) LoadTableBinaryArrow(session TSessionId, table_name string, arrow_stream []byte, use_column_names bool) (err error) {
	if err = p.sendLoadTableBinaryArrow(session, table_name, arrow_stream, use_column_names); err != nil {
		return
	}
	return p.recvLoadTableBinaryArrow()
}

func (p *OmniSciClient) sendLoadTableBinaryArrow(session TSessionId, table_name string, arrow_stream []byte, use_column_names bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("load_table_binary_arrow", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciLoadTableBinaryArrowArgs{
		Session:        session,
		TableName:      table_name,
		ArrowStream:    arrow_stream,
		UseColumnNames: use_column_names,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvLoadTableBinaryArrow() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "load_table_binary_arrow" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "load_table_binary_arrow failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "load_table_binary_arrow failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error154 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error155 error
		error155, err = error154.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error155
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "load_table_binary_arrow failed: invalid message type")
		return
	}
	result := OmniSciLoadTableBinaryArrowResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
//  - TableName
//  - Rows
//  - ColumnNames
func (p *OmniSciClient) LoadTable(session TSessionId, table_name string, rows []*TStringRow, column_names []string) (err error) {
	if err = p.sendLoadTable(session, table_name, rows, column_names); err != nil {
		return
	}
	return p.recvLoadTable()
}

func (p *OmniSciClient) sendLoadTable(session TSessionId, table_name string, rows []*TStringRow, column_names []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("load_table", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciLoadTableArgs{
		Session:     session,
		TableName:   table_name,
		Rows:        rows,
		ColumnNames: column_names,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvLoadTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "load_table" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "load_table failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "load_table failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error156 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error157 error
		error157, err = error156.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error157
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "load_table failed: invalid message type")
		return
	}
	result := OmniSciLoadTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
//  - FileName
//  - CopyParams
func (p *OmniSciClient) DetectColumnTypes(session TSessionId, file_name string, copy_params *TCopyParams) (r *TDetectResult_, err error) {
	if err = p.sendDetectColumnTypes(session, file_name, copy_params); err != nil {
		return
	}
	return p.recvDetectColumnTypes()
}

func (p *OmniSciClient) sendDetectColumnTypes(session TSessionId, file_name string, copy_params *TCopyParams) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("detect_column_types", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciDetectColumnTypesArgs{
		Session:    session,
		FileName:   file_name,
		CopyParams: copy_params,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvDetectColumnTypes() (value *TDetectResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "detect_column_types" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "detect_column_types failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "detect_column_types failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error158 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error159 error
		error159, err = error158.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error159
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "detect_column_types failed: invalid message type")
		return
	}
	result := OmniSciDetectColumnTypesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - TableName
//  - RowDesc
//  - FileType
//  - CreateParams
func (p *OmniSciClient) CreateTable(session TSessionId, table_name string, row_desc TRowDescriptor, file_type TFileType, create_params *TCreateParams) (err error) {
	if err = p.sendCreateTable(session, table_name, row_desc, file_type, create_params); err != nil {
		return
	}
	return p.recvCreateTable()
}

func (p *OmniSciClient) sendCreateTable(session TSessionId, table_name string, row_desc TRowDescriptor, file_type TFileType, create_params *TCreateParams) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("create_table", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciCreateTableArgs{
		Session:      session,
		TableName:    table_name,
		RowDesc:      row_desc,
		FileType:     file_type,
		CreateParams: create_params,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvCreateTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "create_table" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "create_table failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_table failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error160 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error161 error
		error161, err = error160.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error161
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "create_table failed: invalid message type")
		return
	}
	result := OmniSciCreateTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
//  - TableName
//  - FileName
//  - CopyParams
func (p *OmniSciClient) ImportTable(session TSessionId, table_name string, file_name string, copy_params *TCopyParams) (err error) {
	if err = p.sendImportTable(session, table_name, file_name, copy_params); err != nil {
		return
	}
	return p.recvImportTable()
}

func (p *OmniSciClient) sendImportTable(session TSessionId, table_name string, file_name string, copy_params *TCopyParams) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("import_table", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciImportTableArgs{
		Session:    session,
		TableName:  table_name,
		FileName:   file_name,
		CopyParams: copy_params,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvImportTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "import_table" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "import_table failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "import_table failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error162 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error163 error
		error163, err = error162.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error163
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "import_table failed: invalid message type")
		return
	}
	result := OmniSciImportTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
//  - TableName
//  - FileName
//  - CopyParams
//  - RowDesc
//  - CreateParams
func (p *OmniSciClient) ImportGeoTable(session TSessionId, table_name string, file_name string, copy_params *TCopyParams, row_desc TRowDescriptor, create_params *TCreateParams) (err error) {
	if err = p.sendImportGeoTable(session, table_name, file_name, copy_params, row_desc, create_params); err != nil {
		return
	}
	return p.recvImportGeoTable()
}

func (p *OmniSciClient) sendImportGeoTable(session TSessionId, table_name string, file_name string, copy_params *TCopyParams, row_desc TRowDescriptor, create_params *TCreateParams) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("import_geo_table", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciImportGeoTableArgs{
		Session:      session,
		TableName:    table_name,
		FileName:     file_name,
		CopyParams:   copy_params,
		RowDesc:      row_desc,
		CreateParams: create_params,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvImportGeoTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "import_geo_table" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "import_geo_table failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "import_geo_table failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error164 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error165 error
		error165, err = error164.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error165
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "import_geo_table failed: invalid message type")
		return
	}
	result := OmniSciImportGeoTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
//  - ImportID
func (p *OmniSciClient) ImportTableStatus(session TSessionId, import_id string) (r *TImportStatus, err error) {
	if err = p.sendImportTableStatus(session, import_id); err != nil {
		return
	}
	return p.recvImportTableStatus()
}

func (p *OmniSciClient) sendImportTableStatus(session TSessionId, import_id string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("import_table_status", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciImportTableStatusArgs{
		Session:  session,
		ImportID: import_id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvImportTableStatus() (value *TImportStatus, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "import_table_status" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "import_table_status failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "import_table_status failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error166 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error167 error
		error167, err = error166.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error167
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "import_table_status failed: invalid message type")
		return
	}
	result := OmniSciImportTableStatusResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - ArchivePath
//  - CopyParams
func (p *OmniSciClient) GetFirstGeoFileInArchive(session TSessionId, archive_path string, copy_params *TCopyParams) (r string, err error) {
	if err = p.sendGetFirstGeoFileInArchive(session, archive_path, copy_params); err != nil {
		return
	}
	return p.recvGetFirstGeoFileInArchive()
}

func (p *OmniSciClient) sendGetFirstGeoFileInArchive(session TSessionId, archive_path string, copy_params *TCopyParams) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_first_geo_file_in_archive", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetFirstGeoFileInArchiveArgs{
		Session:     session,
		ArchivePath: archive_path,
		CopyParams:  copy_params,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetFirstGeoFileInArchive() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_first_geo_file_in_archive" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_first_geo_file_in_archive failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_first_geo_file_in_archive failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error168 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error169 error
		error169, err = error168.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error169
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_first_geo_file_in_archive failed: invalid message type")
		return
	}
	result := OmniSciGetFirstGeoFileInArchiveResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - ArchivePath
//  - CopyParams
func (p *OmniSciClient) GetAllFilesInArchive(session TSessionId, archive_path string, copy_params *TCopyParams) (r []string, err error) {
	if err = p.sendGetAllFilesInArchive(session, archive_path, copy_params); err != nil {
		return
	}
	return p.recvGetAllFilesInArchive()
}

func (p *OmniSciClient) sendGetAllFilesInArchive(session TSessionId, archive_path string, copy_params *TCopyParams) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_all_files_in_archive", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetAllFilesInArchiveArgs{
		Session:     session,
		ArchivePath: archive_path,
		CopyParams:  copy_params,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetAllFilesInArchive() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_all_files_in_archive" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_all_files_in_archive failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_all_files_in_archive failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error170 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error171 error
		error171, err = error170.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error171
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_all_files_in_archive failed: invalid message type")
		return
	}
	result := OmniSciGetAllFilesInArchiveResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - FileName
//  - CopyParams
func (p *OmniSciClient) GetLayersInGeoFile(session TSessionId, file_name string, copy_params *TCopyParams) (r []*TGeoFileLayerInfo, err error) {
	if err = p.sendGetLayersInGeoFile(session, file_name, copy_params); err != nil {
		return
	}
	return p.recvGetLayersInGeoFile()
}

func (p *OmniSciClient) sendGetLayersInGeoFile(session TSessionId, file_name string, copy_params *TCopyParams) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_layers_in_geo_file", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetLayersInGeoFileArgs{
		Session:    session,
		FileName:   file_name,
		CopyParams: copy_params,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetLayersInGeoFile() (value []*TGeoFileLayerInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_layers_in_geo_file" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_layers_in_geo_file failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_layers_in_geo_file failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error172 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error173 error
		error173, err = error172.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error173
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_layers_in_geo_file failed: invalid message type")
		return
	}
	result := OmniSciGetLayersInGeoFileResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - Query
func (p *OmniSciClient) QueryGetOuterFragmentCount(session TSessionId, query string) (r int64, err error) {
	if err = p.sendQueryGetOuterFragmentCount(session, query); err != nil {
		return
	}
	return p.recvQueryGetOuterFragmentCount()
}

func (p *OmniSciClient) sendQueryGetOuterFragmentCount(session TSessionId, query string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("query_get_outer_fragment_count", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciQueryGetOuterFragmentCountArgs{
		Session: session,
		Query:   query,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvQueryGetOuterFragmentCount() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "query_get_outer_fragment_count" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "query_get_outer_fragment_count failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "query_get_outer_fragment_count failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error174 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error175 error
		error175, err = error174.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error175
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "query_get_outer_fragment_count failed: invalid message type")
		return
	}
	result := OmniSciQueryGetOuterFragmentCountResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - TableID
func (p *OmniSciClient) CheckTableConsistency(session TSessionId, table_id int32) (r *TTableMeta, err error) {
	if err = p.sendCheckTableConsistency(session, table_id); err != nil {
		return
	}
	return p.recvCheckTableConsistency()
}

func (p *OmniSciClient) sendCheckTableConsistency(session TSessionId, table_id int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("check_table_consistency", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciCheckTableConsistencyArgs{
		Session: session,
		TableID: table_id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvCheckTableConsistency() (value *TTableMeta, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "check_table_consistency" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "check_table_consistency failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "check_table_consistency failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error176 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error177 error
		error177, err = error176.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error177
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "check_table_consistency failed: invalid message type")
		return
	}
	result := OmniSciCheckTableConsistencyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - LeafSession
//  - ParentSession
//  - QueryRa
//  - StartTimeStr
//  - JustExplain
//  - OuterFragmentIndices
func (p *OmniSciClient) StartQuery(leaf_session TSessionId, parent_session TSessionId, query_ra string, start_time_str string, just_explain bool, outer_fragment_indices []int64) (r *TPendingQuery, err error) {
	if err = p.sendStartQuery(leaf_session, parent_session, query_ra, start_time_str, just_explain, outer_fragment_indices); err != nil {
		return
	}
	return p.recvStartQuery()
}

func (p *OmniSciClient) sendStartQuery(leaf_session TSessionId, parent_session TSessionId, query_ra string, start_time_str string, just_explain bool, outer_fragment_indices []int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("start_query", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciStartQueryArgs{
		LeafSession:          leaf_session,
		ParentSession:        parent_session,
		QueryRa:              query_ra,
		StartTimeStr:         start_time_str,
		JustExplain:          just_explain,
		OuterFragmentIndices: outer_fragment_indices,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvStartQuery() (value *TPendingQuery, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "start_query" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "start_query failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "start_query failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error178 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error179 error
		error179, err = error178.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error179
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "start_query failed: invalid message type")
		return
	}
	result := OmniSciStartQueryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PendingQuery
//  - SubqueryID
//  - StartTimeStr
func (p *OmniSciClient) ExecuteQueryStep(pending_query *TPendingQuery, subquery_id TSubqueryId, start_time_str string) (r *TStepResult_, err error) {
	if err = p.sendExecuteQueryStep(pending_query, subquery_id, start_time_str); err != nil {
		return
	}
	return p.recvExecuteQueryStep()
}

func (p *OmniSciClient) sendExecuteQueryStep(pending_query *TPendingQuery, subquery_id TSubqueryId, start_time_str string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("execute_query_step", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciExecuteQueryStepArgs{
		PendingQuery: pending_query,
		SubqueryID:   subquery_id,
		StartTimeStr: start_time_str,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvExecuteQueryStep() (value *TStepResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "execute_query_step" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "execute_query_step failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "execute_query_step failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error180 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error181 error
		error181, err = error180.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error181
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "execute_query_step failed: invalid message type")
		return
	}
	result := OmniSciExecuteQueryStepResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SerializedRows
//  - RowDesc
//  - QueryID
//  - SubqueryID
//  - IsFinalSubqueryResult_
func (p *OmniSciClient) BroadcastSerializedRows(serialized_rows *serialized_result_set.TSerializedRows, row_desc TRowDescriptor, query_id TQueryId, subquery_id TSubqueryId, is_final_subquery_result bool) (err error) {
	if err = p.sendBroadcastSerializedRows(serialized_rows, row_desc, query_id, subquery_id, is_final_subquery_result); err != nil {
		return
	}
	return p.recvBroadcastSerializedRows()
}

func (p *OmniSciClient) sendBroadcastSerializedRows(serialized_rows *serialized_result_set.TSerializedRows, row_desc TRowDescriptor, query_id TQueryId, subquery_id TSubqueryId, is_final_subquery_result bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("broadcast_serialized_rows", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciBroadcastSerializedRowsArgs{
		SerializedRows:         serialized_rows,
		RowDesc:                row_desc,
		QueryID:                query_id,
		SubqueryID:             subquery_id,
		IsFinalSubqueryResult_: is_final_subquery_result,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvBroadcastSerializedRows() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "broadcast_serialized_rows" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "broadcast_serialized_rows failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "broadcast_serialized_rows failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error182 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error183 error
		error183, err = error182.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error183
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "broadcast_serialized_rows failed: invalid message type")
		return
	}
	result := OmniSciBroadcastSerializedRowsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
//  - WidgetID
//  - NodeIdx
//  - VegaJSON
func (p *OmniSciClient) StartRenderQuery(session TSessionId, widget_id int64, node_idx int16, vega_json string) (r *TPendingRenderQuery, err error) {
	if err = p.sendStartRenderQuery(session, widget_id, node_idx, vega_json); err != nil {
		return
	}
	return p.recvStartRenderQuery()
}

func (p *OmniSciClient) sendStartRenderQuery(session TSessionId, widget_id int64, node_idx int16, vega_json string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("start_render_query", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciStartRenderQueryArgs{
		Session:  session,
		WidgetID: widget_id,
		NodeIdx:  node_idx,
		VegaJSON: vega_json,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvStartRenderQuery() (value *TPendingRenderQuery, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "start_render_query" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "start_render_query failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "start_render_query failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error184 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error185 error
		error185, err = error184.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error185
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "start_render_query failed: invalid message type")
		return
	}
	result := OmniSciStartRenderQueryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PendingRender
//  - MergedData
func (p *OmniSciClient) ExecuteNextRenderStep(pending_render *TPendingRenderQuery, merged_data TRenderAggDataMap) (r *TRenderStepResult_, err error) {
	if err = p.sendExecuteNextRenderStep(pending_render, merged_data); err != nil {
		return
	}
	return p.recvExecuteNextRenderStep()
}

func (p *OmniSciClient) sendExecuteNextRenderStep(pending_render *TPendingRenderQuery, merged_data TRenderAggDataMap) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("execute_next_render_step", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciExecuteNextRenderStepArgs{
		PendingRender: pending_render,
		MergedData:    merged_data,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvExecuteNextRenderStep() (value *TRenderStepResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "execute_next_render_step" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "execute_next_render_step failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "execute_next_render_step failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error186 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error187 error
		error187, err = error186.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error187
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "execute_next_render_step failed: invalid message type")
		return
	}
	result := OmniSciExecuteNextRenderStepResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - InsertData
func (p *OmniSciClient) InsertData(session TSessionId, insert_data *TInsertData) (err error) {
	if err = p.sendInsertData(session, insert_data); err != nil {
		return
	}
	return p.recvInsertData()
}

func (p *OmniSciClient) sendInsertData(session TSessionId, insert_data *TInsertData) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("insert_data", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciInsertDataArgs{
		Session:    session,
		InsertData: insert_data,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvInsertData() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "insert_data" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "insert_data failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "insert_data failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error188 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error189 error
		error189, err = error188.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error189
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "insert_data failed: invalid message type")
		return
	}
	result := OmniSciInsertDataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
//  - TableID
func (p *OmniSciClient) Checkpoint(session TSessionId, table_id int32) (err error) {
	if err = p.sendCheckpoint(session, table_id); err != nil {
		return
	}
	return p.recvCheckpoint()
}

func (p *OmniSciClient) sendCheckpoint(session TSessionId, table_id int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("checkpoint", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciCheckpointArgs{
		Session: session,
		TableID: table_id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvCheckpoint() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "checkpoint" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "checkpoint failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "checkpoint failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error190 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error191 error
		error191, err = error190.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error191
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "checkpoint failed: invalid message type")
		return
	}
	result := OmniSciCheckpointResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetRoles(session TSessionId) (r []string, err error) {
	if err = p.sendGetRoles(session); err != nil {
		return
	}
	return p.recvGetRoles()
}

func (p *OmniSciClient) sendGetRoles(session TSessionId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_roles", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetRolesArgs{
		Session: session,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetRoles() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_roles" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_roles failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_roles failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error192 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error193 error
		error193, err = error192.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error193
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_roles failed: invalid message type")
		return
	}
	result := OmniSciGetRolesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - RoleName
func (p *OmniSciClient) GetDbObjectsForGrantee(session TSessionId, roleName string) (r []*TDBObject, err error) {
	if err = p.sendGetDbObjectsForGrantee(session, roleName); err != nil {
		return
	}
	return p.recvGetDbObjectsForGrantee()
}

func (p *OmniSciClient) sendGetDbObjectsForGrantee(session TSessionId, roleName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_db_objects_for_grantee", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetDbObjectsForGranteeArgs{
		Session:  session,
		RoleName: roleName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetDbObjectsForGrantee() (value []*TDBObject, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_db_objects_for_grantee" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_db_objects_for_grantee failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_db_objects_for_grantee failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error194 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error195 error
		error195, err = error194.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error195
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_db_objects_for_grantee failed: invalid message type")
		return
	}
	result := OmniSciGetDbObjectsForGranteeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - ObjectName
//  - Type
func (p *OmniSciClient) GetDbObjectPrivs(session TSessionId, objectName string, type_a1 TDBObjectType) (r []*TDBObject, err error) {
	if err = p.sendGetDbObjectPrivs(session, objectName, type_a1); err != nil {
		return
	}
	return p.recvGetDbObjectPrivs()
}

func (p *OmniSciClient) sendGetDbObjectPrivs(session TSessionId, objectName string, type_a1 TDBObjectType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_db_object_privs", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetDbObjectPrivsArgs{
		Session:    session,
		ObjectName: objectName,
		Type:       type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetDbObjectPrivs() (value []*TDBObject, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_db_object_privs" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_db_object_privs failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_db_object_privs failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error196 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error197 error
		error197, err = error196.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error197
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_db_object_privs failed: invalid message type")
		return
	}
	result := OmniSciGetDbObjectPrivsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - UserName
func (p *OmniSciClient) GetAllRolesForUser(session TSessionId, userName string) (r []string, err error) {
	if err = p.sendGetAllRolesForUser(session, userName); err != nil {
		return
	}
	return p.recvGetAllRolesForUser()
}

func (p *OmniSciClient) sendGetAllRolesForUser(session TSessionId, userName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_all_roles_for_user", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetAllRolesForUserArgs{
		Session:  session,
		UserName: userName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetAllRolesForUser() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_all_roles_for_user" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_all_roles_for_user failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_all_roles_for_user failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error198 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error199 error
		error199, err = error198.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error199
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_all_roles_for_user failed: invalid message type")
		return
	}
	result := OmniSciGetAllRolesForUserResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - GranteeName
//  - RoleName
func (p *OmniSciClient) HasRole(session TSessionId, granteeName string, roleName string) (r bool, err error) {
	if err = p.sendHasRole(session, granteeName, roleName); err != nil {
		return
	}
	return p.recvHasRole()
}

func (p *OmniSciClient) sendHasRole(session TSessionId, granteeName string, roleName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("has_role", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciHasRoleArgs{
		Session:     session,
		GranteeName: granteeName,
		RoleName:    roleName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvHasRole() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "has_role" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "has_role failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "has_role failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error200 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error201 error
		error201, err = error200.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error201
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "has_role failed: invalid message type")
		return
	}
	result := OmniSciHasRoleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - GranteeName
//  - ObjectName
//  - ObjectType
//  - Permissions
func (p *OmniSciClient) HasObjectPrivilege(session TSessionId, granteeName string, ObjectName string, objectType TDBObjectType, permissions *TDBObjectPermissions) (r bool, err error) {
	if err = p.sendHasObjectPrivilege(session, granteeName, ObjectName, objectType, permissions); err != nil {
		return
	}
	return p.recvHasObjectPrivilege()
}

func (p *OmniSciClient) sendHasObjectPrivilege(session TSessionId, granteeName string, ObjectName string, objectType TDBObjectType, permissions *TDBObjectPermissions) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("has_object_privilege", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciHasObjectPrivilegeArgs{
		Session:     session,
		GranteeName: granteeName,
		ObjectName:  ObjectName,
		ObjectType:  objectType,
		Permissions: permissions,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvHasObjectPrivilege() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "has_object_privilege" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "has_object_privilege failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "has_object_privilege failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error202 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error203 error
		error203, err = error202.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error203
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "has_object_privilege failed: invalid message type")
		return
	}
	result := OmniSciHasObjectPrivilegeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - Key
//  - Nonce
func (p *OmniSciClient) SetLicenseKey(session TSessionId, key string, nonce string) (r *TLicenseInfo, err error) {
	if err = p.sendSetLicenseKey(session, key, nonce); err != nil {
		return
	}
	return p.recvSetLicenseKey()
}

func (p *OmniSciClient) sendSetLicenseKey(session TSessionId, key string, nonce string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("set_license_key", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciSetLicenseKeyArgs{
		Session: session,
		Key:     key,
		Nonce:   nonce,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvSetLicenseKey() (value *TLicenseInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "set_license_key" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "set_license_key failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "set_license_key failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error204 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error205 error
		error205, err = error204.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error205
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "set_license_key failed: invalid message type")
		return
	}
	result := OmniSciSetLicenseKeyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - Nonce
func (p *OmniSciClient) GetLicenseClaims(session TSessionId, nonce string) (r *TLicenseInfo, err error) {
	if err = p.sendGetLicenseClaims(session, nonce); err != nil {
		return
	}
	return p.recvGetLicenseClaims()
}

func (p *OmniSciClient) sendGetLicenseClaims(session TSessionId, nonce string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_license_claims", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetLicenseClaimsArgs{
		Session: session,
		Nonce:   nonce,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetLicenseClaims() (value *TLicenseInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_license_claims" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_license_claims failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_license_claims failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error206 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error207 error
		error207, err = error206.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error207
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_license_claims failed: invalid message type")
		return
	}
	result := OmniSciGetLicenseClaimsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
func (p *OmniSciClient) GetDeviceParameters(session TSessionId) (r map[string]string, err error) {
	if err = p.sendGetDeviceParameters(session); err != nil {
		return
	}
	return p.recvGetDeviceParameters()
}

func (p *OmniSciClient) sendGetDeviceParameters(session TSessionId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_device_parameters", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciGetDeviceParametersArgs{
		Session: session,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvGetDeviceParameters() (value map[string]string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_device_parameters" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_device_parameters failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_device_parameters failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error208 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error209 error
		error209, err = error208.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error209
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_device_parameters failed: invalid message type")
		return
	}
	result := OmniSciGetDeviceParametersResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Session
//  - Udfs
//  - Udtfs
//  - DeviceIrMap
func (p *OmniSciClient) RegisterRuntimeExtensionFunctions(session TSessionId, udfs []*extension_functions.TUserDefinedFunction, udtfs []*extension_functions.TUserDefinedTableFunction, device_ir_map map[string]string) (err error) {
	if err = p.sendRegisterRuntimeExtensionFunctions(session, udfs, udtfs, device_ir_map); err != nil {
		return
	}
	return p.recvRegisterRuntimeExtensionFunctions()
}

func (p *OmniSciClient) sendRegisterRuntimeExtensionFunctions(session TSessionId, udfs []*extension_functions.TUserDefinedFunction, udtfs []*extension_functions.TUserDefinedTableFunction, device_ir_map map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("register_runtime_extension_functions", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OmniSciRegisterRuntimeExtensionFunctionsArgs{
		Session:     session,
		Udfs:        udfs,
		Udtfs:       udtfs,
		DeviceIrMap: device_ir_map,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *OmniSciClient) recvRegisterRuntimeExtensionFunctions() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "register_runtime_extension_functions" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "register_runtime_extension_functions failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "register_runtime_extension_functions failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error210 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error211 error
		error211, err = error210.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error211
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "register_runtime_extension_functions failed: invalid message type")
		return
	}
	result := OmniSciRegisterRuntimeExtensionFunctionsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

type OmniSciProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      OmniSci
}

func (p *OmniSciProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *OmniSciProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *OmniSciProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewOmniSciProcessor(handler OmniSci) *OmniSciProcessor {

	self212 := &OmniSciProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self212.processorMap["connect"] = &omniSciProcessorConnect{handler: handler}
	self212.processorMap["krb5_connect"] = &omniSciProcessorKrb5Connect{handler: handler}
	self212.processorMap["disconnect"] = &omniSciProcessorDisconnect{handler: handler}
	self212.processorMap["switch_database"] = &omniSciProcessorSwitchDatabase{handler: handler}
	self212.processorMap["clone_session"] = &omniSciProcessorCloneSession{handler: handler}
	self212.processorMap["get_server_status"] = &omniSciProcessorGetServerStatus{handler: handler}
	self212.processorMap["get_status"] = &omniSciProcessorGetStatus{handler: handler}
	self212.processorMap["get_hardware_info"] = &omniSciProcessorGetHardwareInfo{handler: handler}
	self212.processorMap["get_tables"] = &omniSciProcessorGetTables{handler: handler}
	self212.processorMap["get_physical_tables"] = &omniSciProcessorGetPhysicalTables{handler: handler}
	self212.processorMap["get_views"] = &omniSciProcessorGetViews{handler: handler}
	self212.processorMap["get_tables_meta"] = &omniSciProcessorGetTablesMeta{handler: handler}
	self212.processorMap["get_table_details"] = &omniSciProcessorGetTableDetails{handler: handler}
	self212.processorMap["get_internal_table_details"] = &omniSciProcessorGetInternalTableDetails{handler: handler}
	self212.processorMap["get_users"] = &omniSciProcessorGetUsers{handler: handler}
	self212.processorMap["get_databases"] = &omniSciProcessorGetDatabases{handler: handler}
	self212.processorMap["get_version"] = &omniSciProcessorGetVersion{handler: handler}
	self212.processorMap["start_heap_profile"] = &omniSciProcessorStartHeapProfile{handler: handler}
	self212.processorMap["stop_heap_profile"] = &omniSciProcessorStopHeapProfile{handler: handler}
	self212.processorMap["get_heap_profile"] = &omniSciProcessorGetHeapProfile{handler: handler}
	self212.processorMap["get_memory"] = &omniSciProcessorGetMemory{handler: handler}
	self212.processorMap["clear_cpu_memory"] = &omniSciProcessorClearCPUMemory{handler: handler}
	self212.processorMap["clear_gpu_memory"] = &omniSciProcessorClearGpuMemory{handler: handler}
	self212.processorMap["set_cur_session"] = &omniSciProcessorSetCurSession{handler: handler}
	self212.processorMap["invalidate_cur_session"] = &omniSciProcessorInvalidateCurSession{handler: handler}
	self212.processorMap["set_table_epoch"] = &omniSciProcessorSetTableEpoch{handler: handler}
	self212.processorMap["set_table_epoch_by_name"] = &omniSciProcessorSetTableEpochByName{handler: handler}
	self212.processorMap["get_table_epoch"] = &omniSciProcessorGetTableEpoch{handler: handler}
	self212.processorMap["get_table_epoch_by_name"] = &omniSciProcessorGetTableEpochByName{handler: handler}
	self212.processorMap["get_table_epochs"] = &omniSciProcessorGetTableEpochs{handler: handler}
	self212.processorMap["set_table_epochs"] = &omniSciProcessorSetTableEpochs{handler: handler}
	self212.processorMap["get_session_info"] = &omniSciProcessorGetSessionInfo{handler: handler}
	self212.processorMap["sql_execute"] = &omniSciProcessorSqlExecute{handler: handler}
	self212.processorMap["sql_execute_df"] = &omniSciProcessorSqlExecuteDf{handler: handler}
	self212.processorMap["sql_execute_gdf"] = &omniSciProcessorSqlExecuteGdf{handler: handler}
	self212.processorMap["deallocate_df"] = &omniSciProcessorDeallocateDf{handler: handler}
	self212.processorMap["interrupt"] = &omniSciProcessorInterrupt{handler: handler}
	self212.processorMap["sql_validate"] = &omniSciProcessorSqlValidate{handler: handler}
	self212.processorMap["get_completion_hints"] = &omniSciProcessorGetCompletionHints{handler: handler}
	self212.processorMap["set_execution_mode"] = &omniSciProcessorSetExecutionMode{handler: handler}
	self212.processorMap["render_vega"] = &omniSciProcessorRenderVega{handler: handler}
	self212.processorMap["get_result_row_for_pixel"] = &omniSciProcessorGetResultRowForPixel{handler: handler}
	self212.processorMap["get_dashboard"] = &omniSciProcessorGetDashboard{handler: handler}
	self212.processorMap["get_dashboards"] = &omniSciProcessorGetDashboards{handler: handler}
	self212.processorMap["create_dashboard"] = &omniSciProcessorCreateDashboard{handler: handler}
	self212.processorMap["replace_dashboard"] = &omniSciProcessorReplaceDashboard{handler: handler}
	self212.processorMap["delete_dashboard"] = &omniSciProcessorDeleteDashboard{handler: handler}
	self212.processorMap["share_dashboards"] = &omniSciProcessorShareDashboards{handler: handler}
	self212.processorMap["delete_dashboards"] = &omniSciProcessorDeleteDashboards{handler: handler}
	self212.processorMap["share_dashboard"] = &omniSciProcessorShareDashboard{handler: handler}
	self212.processorMap["unshare_dashboard"] = &omniSciProcessorUnshareDashboard{handler: handler}
	self212.processorMap["unshare_dashboards"] = &omniSciProcessorUnshareDashboards{handler: handler}
	self212.processorMap["get_dashboard_grantees"] = &omniSciProcessorGetDashboardGrantees{handler: handler}
	self212.processorMap["get_link_view"] = &omniSciProcessorGetLinkView{handler: handler}
	self212.processorMap["create_link"] = &omniSciProcessorCreateLink{handler: handler}
	self212.processorMap["load_table_binary"] = &omniSciProcessorLoadTableBinary{handler: handler}
	self212.processorMap["load_table_binary_columnar"] = &omniSciProcessorLoadTableBinaryColumnar{handler: handler}
	self212.processorMap["load_table_binary_arrow"] = &omniSciProcessorLoadTableBinaryArrow{handler: handler}
	self212.processorMap["load_table"] = &omniSciProcessorLoadTable{handler: handler}
	self212.processorMap["detect_column_types"] = &omniSciProcessorDetectColumnTypes{handler: handler}
	self212.processorMap["create_table"] = &omniSciProcessorCreateTable{handler: handler}
	self212.processorMap["import_table"] = &omniSciProcessorImportTable{handler: handler}
	self212.processorMap["import_geo_table"] = &omniSciProcessorImportGeoTable{handler: handler}
	self212.processorMap["import_table_status"] = &omniSciProcessorImportTableStatus{handler: handler}
	self212.processorMap["get_first_geo_file_in_archive"] = &omniSciProcessorGetFirstGeoFileInArchive{handler: handler}
	self212.processorMap["get_all_files_in_archive"] = &omniSciProcessorGetAllFilesInArchive{handler: handler}
	self212.processorMap["get_layers_in_geo_file"] = &omniSciProcessorGetLayersInGeoFile{handler: handler}
	self212.processorMap["query_get_outer_fragment_count"] = &omniSciProcessorQueryGetOuterFragmentCount{handler: handler}
	self212.processorMap["check_table_consistency"] = &omniSciProcessorCheckTableConsistency{handler: handler}
	self212.processorMap["start_query"] = &omniSciProcessorStartQuery{handler: handler}
	self212.processorMap["execute_query_step"] = &omniSciProcessorExecuteQueryStep{handler: handler}
	self212.processorMap["broadcast_serialized_rows"] = &omniSciProcessorBroadcastSerializedRows{handler: handler}
	self212.processorMap["start_render_query"] = &omniSciProcessorStartRenderQuery{handler: handler}
	self212.processorMap["execute_next_render_step"] = &omniSciProcessorExecuteNextRenderStep{handler: handler}
	self212.processorMap["insert_data"] = &omniSciProcessorInsertData{handler: handler}
	self212.processorMap["checkpoint"] = &omniSciProcessorCheckpoint{handler: handler}
	self212.processorMap["get_roles"] = &omniSciProcessorGetRoles{handler: handler}
	self212.processorMap["get_db_objects_for_grantee"] = &omniSciProcessorGetDbObjectsForGrantee{handler: handler}
	self212.processorMap["get_db_object_privs"] = &omniSciProcessorGetDbObjectPrivs{handler: handler}
	self212.processorMap["get_all_roles_for_user"] = &omniSciProcessorGetAllRolesForUser{handler: handler}
	self212.processorMap["has_role"] = &omniSciProcessorHasRole{handler: handler}
	self212.processorMap["has_object_privilege"] = &omniSciProcessorHasObjectPrivilege{handler: handler}
	self212.processorMap["set_license_key"] = &omniSciProcessorSetLicenseKey{handler: handler}
	self212.processorMap["get_license_claims"] = &omniSciProcessorGetLicenseClaims{handler: handler}
	self212.processorMap["get_device_parameters"] = &omniSciProcessorGetDeviceParameters{handler: handler}
	self212.processorMap["register_runtime_extension_functions"] = &omniSciProcessorRegisterRuntimeExtensionFunctions{handler: handler}
	return self212
}

func (p *OmniSciProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x213 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x213.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x213

}

type omniSciProcessorConnect struct {
	handler OmniSci
}

func (p *omniSciProcessorConnect) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciConnectArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("connect", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciConnectResult{}
	var retval TSessionId
	var err2 error
	if retval, err2 = p.handler.Connect(args.User, args.Passwd, args.Dbname); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing connect: "+err2.Error())
			oprot.WriteMessageBegin("connect", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("connect", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorKrb5Connect struct {
	handler OmniSci
}

func (p *omniSciProcessorKrb5Connect) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciKrb5ConnectArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("krb5_connect", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciKrb5ConnectResult{}
	var retval *TKrb5Session
	var err2 error
	if retval, err2 = p.handler.Krb5Connect(args.InputToken, args.Dbname); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing krb5_connect: "+err2.Error())
			oprot.WriteMessageBegin("krb5_connect", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("krb5_connect", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorDisconnect struct {
	handler OmniSci
}

func (p *omniSciProcessorDisconnect) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciDisconnectArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("disconnect", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciDisconnectResult{}
	var err2 error
	if err2 = p.handler.Disconnect(args.Session); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing disconnect: "+err2.Error())
			oprot.WriteMessageBegin("disconnect", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("disconnect", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorSwitchDatabase struct {
	handler OmniSci
}

func (p *omniSciProcessorSwitchDatabase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciSwitchDatabaseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("switch_database", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciSwitchDatabaseResult{}
	var err2 error
	if err2 = p.handler.SwitchDatabase(args.Session, args.Dbname); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing switch_database: "+err2.Error())
			oprot.WriteMessageBegin("switch_database", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("switch_database", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorCloneSession struct {
	handler OmniSci
}

func (p *omniSciProcessorCloneSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciCloneSessionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("clone_session", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciCloneSessionResult{}
	var retval TSessionId
	var err2 error
	if retval, err2 = p.handler.CloneSession(args.Session); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clone_session: "+err2.Error())
			oprot.WriteMessageBegin("clone_session", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("clone_session", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetServerStatus struct {
	handler OmniSci
}

func (p *omniSciProcessorGetServerStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetServerStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_server_status", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetServerStatusResult{}
	var retval *TServerStatus
	var err2 error
	if retval, err2 = p.handler.GetServerStatus(args.Session); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_server_status: "+err2.Error())
			oprot.WriteMessageBegin("get_server_status", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_server_status", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetStatus struct {
	handler OmniSci
}

func (p *omniSciProcessorGetStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_status", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetStatusResult{}
	var retval []*TServerStatus
	var err2 error
	if retval, err2 = p.handler.GetStatus(args.Session); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_status: "+err2.Error())
			oprot.WriteMessageBegin("get_status", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_status", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetHardwareInfo struct {
	handler OmniSci
}

func (p *omniSciProcessorGetHardwareInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetHardwareInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_hardware_info", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetHardwareInfoResult{}
	var retval *TClusterHardwareInfo
	var err2 error
	if retval, err2 = p.handler.GetHardwareInfo(args.Session); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_hardware_info: "+err2.Error())
			oprot.WriteMessageBegin("get_hardware_info", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_hardware_info", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetTables struct {
	handler OmniSci
}

func (p *omniSciProcessorGetTables) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetTablesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_tables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetTablesResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetTables(args.Session); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_tables: "+err2.Error())
			oprot.WriteMessageBegin("get_tables", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_tables", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetPhysicalTables struct {
	handler OmniSci
}

func (p *omniSciProcessorGetPhysicalTables) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetPhysicalTablesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_physical_tables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetPhysicalTablesResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetPhysicalTables(args.Session); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_physical_tables: "+err2.Error())
			oprot.WriteMessageBegin("get_physical_tables", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_physical_tables", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetViews struct {
	handler OmniSci
}

func (p *omniSciProcessorGetViews) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetViewsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_views", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetViewsResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetViews(args.Session); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_views: "+err2.Error())
			oprot.WriteMessageBegin("get_views", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_views", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetTablesMeta struct {
	handler OmniSci
}

func (p *omniSciProcessorGetTablesMeta) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetTablesMetaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_tables_meta", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetTablesMetaResult{}
	var retval []*TTableMeta
	var err2 error
	if retval, err2 = p.handler.GetTablesMeta(args.Session); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_tables_meta: "+err2.Error())
			oprot.WriteMessageBegin("get_tables_meta", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_tables_meta", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetTableDetails struct {
	handler OmniSci
}

func (p *omniSciProcessorGetTableDetails) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetTableDetailsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_table_details", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetTableDetailsResult{}
	var retval *TTableDetails
	var err2 error
	if retval, err2 = p.handler.GetTableDetails(args.Session, args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_details: "+err2.Error())
			oprot.WriteMessageBegin("get_table_details", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_table_details", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetInternalTableDetails struct {
	handler OmniSci
}

func (p *omniSciProcessorGetInternalTableDetails) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetInternalTableDetailsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_internal_table_details", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetInternalTableDetailsResult{}
	var retval *TTableDetails
	var err2 error
	if retval, err2 = p.handler.GetInternalTableDetails(args.Session, args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_internal_table_details: "+err2.Error())
			oprot.WriteMessageBegin("get_internal_table_details", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_internal_table_details", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetUsers struct {
	handler OmniSci
}

func (p *omniSciProcessorGetUsers) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetUsersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_users", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetUsersResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetUsers(args.Session); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_users: "+err2.Error())
			oprot.WriteMessageBegin("get_users", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_users", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetDatabases struct {
	handler OmniSci
}

func (p *omniSciProcessorGetDatabases) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetDatabasesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_databases", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetDatabasesResult{}
	var retval []*TDBInfo
	var err2 error
	if retval, err2 = p.handler.GetDatabases(args.Session); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_databases: "+err2.Error())
			oprot.WriteMessageBegin("get_databases", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_databases", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetVersion struct {
	handler OmniSci
}

func (p *omniSciProcessorGetVersion) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetVersionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_version", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetVersionResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetVersion(); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_version: "+err2.Error())
			oprot.WriteMessageBegin("get_version", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("get_version", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorStartHeapProfile struct {
	handler OmniSci
}

func (p *omniSciProcessorStartHeapProfile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciStartHeapProfileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("start_heap_profile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciStartHeapProfileResult{}
	var err2 error
	if err2 = p.handler.StartHeapProfile(args.Session); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing start_heap_profile: "+err2.Error())
			oprot.WriteMessageBegin("start_heap_profile", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("start_heap_profile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorStopHeapProfile struct {
	handler OmniSci
}

func (p *omniSciProcessorStopHeapProfile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciStopHeapProfileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("stop_heap_profile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciStopHeapProfileResult{}
	var err2 error
	if err2 = p.handler.StopHeapProfile(args.Session); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing stop_heap_profile: "+err2.Error())
			oprot.WriteMessageBegin("stop_heap_profile", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("stop_heap_profile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetHeapProfile struct {
	handler OmniSci
}

func (p *omniSciProcessorGetHeapProfile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetHeapProfileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_heap_profile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetHeapProfileResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetHeapProfile(args.Session); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_heap_profile: "+err2.Error())
			oprot.WriteMessageBegin("get_heap_profile", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("get_heap_profile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetMemory struct {
	handler OmniSci
}

func (p *omniSciProcessorGetMemory) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetMemoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_memory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetMemoryResult{}
	var retval []*TNodeMemoryInfo
	var err2 error
	if retval, err2 = p.handler.GetMemory(args.Session, args.MemoryLevel); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_memory: "+err2.Error())
			oprot.WriteMessageBegin("get_memory", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_memory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorClearCPUMemory struct {
	handler OmniSci
}

func (p *omniSciProcessorClearCPUMemory) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciClearCPUMemoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("clear_cpu_memory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciClearCPUMemoryResult{}
	var err2 error
	if err2 = p.handler.ClearCPUMemory(args.Session); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clear_cpu_memory: "+err2.Error())
			oprot.WriteMessageBegin("clear_cpu_memory", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("clear_cpu_memory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorClearGpuMemory struct {
	handler OmniSci
}

func (p *omniSciProcessorClearGpuMemory) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciClearGpuMemoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("clear_gpu_memory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciClearGpuMemoryResult{}
	var err2 error
	if err2 = p.handler.ClearGpuMemory(args.Session); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clear_gpu_memory: "+err2.Error())
			oprot.WriteMessageBegin("clear_gpu_memory", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("clear_gpu_memory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorSetCurSession struct {
	handler OmniSci
}

func (p *omniSciProcessorSetCurSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciSetCurSessionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("set_cur_session", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciSetCurSessionResult{}
	var err2 error
	if err2 = p.handler.SetCurSession(args.ParentSession, args.LeafSession, args.StartTimeStr, args.Label); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_cur_session: "+err2.Error())
			oprot.WriteMessageBegin("set_cur_session", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("set_cur_session", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorInvalidateCurSession struct {
	handler OmniSci
}

func (p *omniSciProcessorInvalidateCurSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciInvalidateCurSessionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("invalidate_cur_session", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciInvalidateCurSessionResult{}
	var err2 error
	if err2 = p.handler.InvalidateCurSession(args.ParentSession, args.LeafSession, args.StartTimeStr, args.Label); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing invalidate_cur_session: "+err2.Error())
			oprot.WriteMessageBegin("invalidate_cur_session", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("invalidate_cur_session", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorSetTableEpoch struct {
	handler OmniSci
}

func (p *omniSciProcessorSetTableEpoch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciSetTableEpochArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("set_table_epoch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciSetTableEpochResult{}
	var err2 error
	if err2 = p.handler.SetTableEpoch(args.Session, args.DbID, args.TableID, args.NewEpoch_); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_table_epoch: "+err2.Error())
			oprot.WriteMessageBegin("set_table_epoch", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("set_table_epoch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorSetTableEpochByName struct {
	handler OmniSci
}

func (p *omniSciProcessorSetTableEpochByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciSetTableEpochByNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("set_table_epoch_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciSetTableEpochByNameResult{}
	var err2 error
	if err2 = p.handler.SetTableEpochByName(args.Session, args.TableName, args.NewEpoch_); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_table_epoch_by_name: "+err2.Error())
			oprot.WriteMessageBegin("set_table_epoch_by_name", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("set_table_epoch_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetTableEpoch struct {
	handler OmniSci
}

func (p *omniSciProcessorGetTableEpoch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetTableEpochArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_table_epoch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetTableEpochResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.GetTableEpoch(args.Session, args.DbID, args.TableID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_epoch: "+err2.Error())
		oprot.WriteMessageBegin("get_table_epoch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("get_table_epoch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetTableEpochByName struct {
	handler OmniSci
}

func (p *omniSciProcessorGetTableEpochByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetTableEpochByNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_table_epoch_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetTableEpochByNameResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.GetTableEpochByName(args.Session, args.TableName); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_epoch_by_name: "+err2.Error())
		oprot.WriteMessageBegin("get_table_epoch_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("get_table_epoch_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetTableEpochs struct {
	handler OmniSci
}

func (p *omniSciProcessorGetTableEpochs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetTableEpochsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_table_epochs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetTableEpochsResult{}
	var retval []*TTableEpochInfo
	var err2 error
	if retval, err2 = p.handler.GetTableEpochs(args.Session, args.DbID, args.TableID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_epochs: "+err2.Error())
		oprot.WriteMessageBegin("get_table_epochs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_table_epochs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorSetTableEpochs struct {
	handler OmniSci
}

func (p *omniSciProcessorSetTableEpochs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciSetTableEpochsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("set_table_epochs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciSetTableEpochsResult{}
	var err2 error
	if err2 = p.handler.SetTableEpochs(args.Session, args.DbID, args.TableEpochs); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_table_epochs: "+err2.Error())
		oprot.WriteMessageBegin("set_table_epochs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("set_table_epochs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetSessionInfo struct {
	handler OmniSci
}

func (p *omniSciProcessorGetSessionInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetSessionInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_session_info", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetSessionInfoResult{}
	var retval *TSessionInfo
	var err2 error
	if retval, err2 = p.handler.GetSessionInfo(args.Session); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_session_info: "+err2.Error())
			oprot.WriteMessageBegin("get_session_info", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_session_info", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorSqlExecute struct {
	handler OmniSci
}

func (p *omniSciProcessorSqlExecute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciSqlExecuteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sql_execute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciSqlExecuteResult{}
	var retval *TQueryResult_
	var err2 error
	if retval, err2 = p.handler.SqlExecute(args.Session, args.Query, args.ColumnFormat, args.Nonce, args.FirstN, args.AtMostN); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_execute: "+err2.Error())
			oprot.WriteMessageBegin("sql_execute", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("sql_execute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorSqlExecuteDf struct {
	handler OmniSci
}

func (p *omniSciProcessorSqlExecuteDf) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciSqlExecuteDfArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sql_execute_df", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciSqlExecuteDfResult{}
	var retval *TDataFrame
	var err2 error
	if retval, err2 = p.handler.SqlExecuteDf(args.Session, args.Query, args.DeviceType, args.DeviceID, args.FirstN, args.TransportMethod); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_execute_df: "+err2.Error())
			oprot.WriteMessageBegin("sql_execute_df", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("sql_execute_df", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorSqlExecuteGdf struct {
	handler OmniSci
}

func (p *omniSciProcessorSqlExecuteGdf) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciSqlExecuteGdfArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sql_execute_gdf", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciSqlExecuteGdfResult{}
	var retval *TDataFrame
	var err2 error
	if retval, err2 = p.handler.SqlExecuteGdf(args.Session, args.Query, args.DeviceID, args.FirstN); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_execute_gdf: "+err2.Error())
			oprot.WriteMessageBegin("sql_execute_gdf", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("sql_execute_gdf", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorDeallocateDf struct {
	handler OmniSci
}

func (p *omniSciProcessorDeallocateDf) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciDeallocateDfArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deallocate_df", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciDeallocateDfResult{}
	var err2 error
	if err2 = p.handler.DeallocateDf(args.Session, args.Df, args.DeviceType, args.DeviceID); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deallocate_df: "+err2.Error())
			oprot.WriteMessageBegin("deallocate_df", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deallocate_df", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorInterrupt struct {
	handler OmniSci
}

func (p *omniSciProcessorInterrupt) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciInterruptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("interrupt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciInterruptResult{}
	var err2 error
	if err2 = p.handler.Interrupt(args.QuerySession, args.InterruptSession); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing interrupt: "+err2.Error())
			oprot.WriteMessageBegin("interrupt", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("interrupt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorSqlValidate struct {
	handler OmniSci
}

func (p *omniSciProcessorSqlValidate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciSqlValidateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sql_validate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciSqlValidateResult{}
	var retval TRowDescriptor
	var err2 error
	if retval, err2 = p.handler.SqlValidate(args.Session, args.Query); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_validate: "+err2.Error())
			oprot.WriteMessageBegin("sql_validate", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("sql_validate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetCompletionHints struct {
	handler OmniSci
}

func (p *omniSciProcessorGetCompletionHints) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetCompletionHintsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_completion_hints", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetCompletionHintsResult{}
	var retval []*completion_hints.TCompletionHint
	var err2 error
	if retval, err2 = p.handler.GetCompletionHints(args.Session, args.Sql, args.Cursor); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_completion_hints: "+err2.Error())
			oprot.WriteMessageBegin("get_completion_hints", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_completion_hints", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorSetExecutionMode struct {
	handler OmniSci
}

func (p *omniSciProcessorSetExecutionMode) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciSetExecutionModeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("set_execution_mode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciSetExecutionModeResult{}
	var err2 error
	if err2 = p.handler.SetExecutionMode(args.Session, args.Mode); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_execution_mode: "+err2.Error())
			oprot.WriteMessageBegin("set_execution_mode", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("set_execution_mode", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorRenderVega struct {
	handler OmniSci
}

func (p *omniSciProcessorRenderVega) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciRenderVegaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("render_vega", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciRenderVegaResult{}
	var retval *TRenderResult_
	var err2 error
	if retval, err2 = p.handler.RenderVega(args.Session, args.WidgetID, args.VegaJSON, args.CompressionLevel, args.Nonce); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing render_vega: "+err2.Error())
			oprot.WriteMessageBegin("render_vega", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("render_vega", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetResultRowForPixel struct {
	handler OmniSci
}

func (p *omniSciProcessorGetResultRowForPixel) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetResultRowForPixelArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_result_row_for_pixel", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetResultRowForPixelResult{}
	var retval *TPixelTableRowResult_
	var err2 error
	if retval, err2 = p.handler.GetResultRowForPixel(args.Session, args.WidgetID, args.Pixel, args.TableColNames, args.ColumnFormat, args.PixelRadius, args.Nonce); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_result_row_for_pixel: "+err2.Error())
			oprot.WriteMessageBegin("get_result_row_for_pixel", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_result_row_for_pixel", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetDashboard struct {
	handler OmniSci
}

func (p *omniSciProcessorGetDashboard) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetDashboardArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_dashboard", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetDashboardResult{}
	var retval *TDashboard
	var err2 error
	if retval, err2 = p.handler.GetDashboard(args.Session, args.DashboardID); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_dashboard: "+err2.Error())
			oprot.WriteMessageBegin("get_dashboard", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_dashboard", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetDashboards struct {
	handler OmniSci
}

func (p *omniSciProcessorGetDashboards) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetDashboardsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_dashboards", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetDashboardsResult{}
	var retval []*TDashboard
	var err2 error
	if retval, err2 = p.handler.GetDashboards(args.Session); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_dashboards: "+err2.Error())
			oprot.WriteMessageBegin("get_dashboards", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_dashboards", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorCreateDashboard struct {
	handler OmniSci
}

func (p *omniSciProcessorCreateDashboard) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciCreateDashboardArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_dashboard", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciCreateDashboardResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.CreateDashboard(args.Session, args.DashboardName, args.DashboardState, args.ImageHash, args.DashboardMetadata); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_dashboard: "+err2.Error())
			oprot.WriteMessageBegin("create_dashboard", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("create_dashboard", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorReplaceDashboard struct {
	handler OmniSci
}

func (p *omniSciProcessorReplaceDashboard) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciReplaceDashboardArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("replace_dashboard", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciReplaceDashboardResult{}
	var err2 error
	if err2 = p.handler.ReplaceDashboard(args.Session, args.DashboardID, args.DashboardName, args.DashboardOwner, args.DashboardState, args.ImageHash, args.DashboardMetadata); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing replace_dashboard: "+err2.Error())
			oprot.WriteMessageBegin("replace_dashboard", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("replace_dashboard", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorDeleteDashboard struct {
	handler OmniSci
}

func (p *omniSciProcessorDeleteDashboard) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciDeleteDashboardArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("delete_dashboard", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciDeleteDashboardResult{}
	var err2 error
	if err2 = p.handler.DeleteDashboard(args.Session, args.DashboardID); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delete_dashboard: "+err2.Error())
			oprot.WriteMessageBegin("delete_dashboard", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("delete_dashboard", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorShareDashboards struct {
	handler OmniSci
}

func (p *omniSciProcessorShareDashboards) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciShareDashboardsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("share_dashboards", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciShareDashboardsResult{}
	var err2 error
	if err2 = p.handler.ShareDashboards(args.Session, args.DashboardIds, args.Groups, args.Permissions); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing share_dashboards: "+err2.Error())
			oprot.WriteMessageBegin("share_dashboards", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("share_dashboards", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorDeleteDashboards struct {
	handler OmniSci
}

func (p *omniSciProcessorDeleteDashboards) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciDeleteDashboardsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("delete_dashboards", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciDeleteDashboardsResult{}
	var err2 error
	if err2 = p.handler.DeleteDashboards(args.Session, args.DashboardIds); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delete_dashboards: "+err2.Error())
			oprot.WriteMessageBegin("delete_dashboards", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("delete_dashboards", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorShareDashboard struct {
	handler OmniSci
}

func (p *omniSciProcessorShareDashboard) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciShareDashboardArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("share_dashboard", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciShareDashboardResult{}
	var err2 error
	if err2 = p.handler.ShareDashboard(args.Session, args.DashboardID, args.Groups, args.Objects, args.Permissions, args.GrantRole); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing share_dashboard: "+err2.Error())
			oprot.WriteMessageBegin("share_dashboard", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("share_dashboard", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorUnshareDashboard struct {
	handler OmniSci
}

func (p *omniSciProcessorUnshareDashboard) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciUnshareDashboardArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unshare_dashboard", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciUnshareDashboardResult{}
	var err2 error
	if err2 = p.handler.UnshareDashboard(args.Session, args.DashboardID, args.Groups, args.Objects, args.Permissions); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unshare_dashboard: "+err2.Error())
			oprot.WriteMessageBegin("unshare_dashboard", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("unshare_dashboard", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorUnshareDashboards struct {
	handler OmniSci
}

func (p *omniSciProcessorUnshareDashboards) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciUnshareDashboardsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unshare_dashboards", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciUnshareDashboardsResult{}
	var err2 error
	if err2 = p.handler.UnshareDashboards(args.Session, args.DashboardIds, args.Groups, args.Permissions); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unshare_dashboards: "+err2.Error())
			oprot.WriteMessageBegin("unshare_dashboards", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("unshare_dashboards", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetDashboardGrantees struct {
	handler OmniSci
}

func (p *omniSciProcessorGetDashboardGrantees) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetDashboardGranteesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_dashboard_grantees", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetDashboardGranteesResult{}
	var retval []*TDashboardGrantees
	var err2 error
	if retval, err2 = p.handler.GetDashboardGrantees(args.Session, args.DashboardID); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_dashboard_grantees: "+err2.Error())
			oprot.WriteMessageBegin("get_dashboard_grantees", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_dashboard_grantees", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetLinkView struct {
	handler OmniSci
}

func (p *omniSciProcessorGetLinkView) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetLinkViewArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_link_view", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetLinkViewResult{}
	var retval *TFrontendView
	var err2 error
	if retval, err2 = p.handler.GetLinkView(args.Session, args.Link); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_link_view: "+err2.Error())
			oprot.WriteMessageBegin("get_link_view", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_link_view", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorCreateLink struct {
	handler OmniSci
}

func (p *omniSciProcessorCreateLink) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciCreateLinkArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_link", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciCreateLinkResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.CreateLink(args.Session, args.ViewState, args.ViewMetadata); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_link: "+err2.Error())
			oprot.WriteMessageBegin("create_link", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("create_link", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorLoadTableBinary struct {
	handler OmniSci
}

func (p *omniSciProcessorLoadTableBinary) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciLoadTableBinaryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("load_table_binary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciLoadTableBinaryResult{}
	var err2 error
	if err2 = p.handler.LoadTableBinary(args.Session, args.TableName, args.Rows, args.ColumnNames); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing load_table_binary: "+err2.Error())
			oprot.WriteMessageBegin("load_table_binary", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("load_table_binary", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorLoadTableBinaryColumnar struct {
	handler OmniSci
}

func (p *omniSciProcessorLoadTableBinaryColumnar) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciLoadTableBinaryColumnarArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("load_table_binary_columnar", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciLoadTableBinaryColumnarResult{}
	var err2 error
	if err2 = p.handler.LoadTableBinaryColumnar(args.Session, args.TableName, args.Cols, args.ColumnNames); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing load_table_binary_columnar: "+err2.Error())
			oprot.WriteMessageBegin("load_table_binary_columnar", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("load_table_binary_columnar", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorLoadTableBinaryArrow struct {
	handler OmniSci
}

func (p *omniSciProcessorLoadTableBinaryArrow) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciLoadTableBinaryArrowArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("load_table_binary_arrow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciLoadTableBinaryArrowResult{}
	var err2 error
	if err2 = p.handler.LoadTableBinaryArrow(args.Session, args.TableName, args.ArrowStream, args.UseColumnNames); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing load_table_binary_arrow: "+err2.Error())
			oprot.WriteMessageBegin("load_table_binary_arrow", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("load_table_binary_arrow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorLoadTable struct {
	handler OmniSci
}

func (p *omniSciProcessorLoadTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciLoadTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("load_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciLoadTableResult{}
	var err2 error
	if err2 = p.handler.LoadTable(args.Session, args.TableName, args.Rows, args.ColumnNames); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing load_table: "+err2.Error())
			oprot.WriteMessageBegin("load_table", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("load_table", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorDetectColumnTypes struct {
	handler OmniSci
}

func (p *omniSciProcessorDetectColumnTypes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciDetectColumnTypesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("detect_column_types", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciDetectColumnTypesResult{}
	var retval *TDetectResult_
	var err2 error
	if retval, err2 = p.handler.DetectColumnTypes(args.Session, args.FileName, args.CopyParams); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing detect_column_types: "+err2.Error())
			oprot.WriteMessageBegin("detect_column_types", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("detect_column_types", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorCreateTable struct {
	handler OmniSci
}

func (p *omniSciProcessorCreateTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciCreateTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciCreateTableResult{}
	var err2 error
	if err2 = p.handler.CreateTable(args.Session, args.TableName, args.RowDesc, args.FileType, args.CreateParams); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_table: "+err2.Error())
			oprot.WriteMessageBegin("create_table", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("create_table", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorImportTable struct {
	handler OmniSci
}

func (p *omniSciProcessorImportTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciImportTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("import_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciImportTableResult{}
	var err2 error
	if err2 = p.handler.ImportTable(args.Session, args.TableName, args.FileName, args.CopyParams); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing import_table: "+err2.Error())
			oprot.WriteMessageBegin("import_table", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("import_table", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorImportGeoTable struct {
	handler OmniSci
}

func (p *omniSciProcessorImportGeoTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciImportGeoTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("import_geo_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciImportGeoTableResult{}
	var err2 error
	if err2 = p.handler.ImportGeoTable(args.Session, args.TableName, args.FileName, args.CopyParams, args.RowDesc, args.CreateParams); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing import_geo_table: "+err2.Error())
			oprot.WriteMessageBegin("import_geo_table", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("import_geo_table", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorImportTableStatus struct {
	handler OmniSci
}

func (p *omniSciProcessorImportTableStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciImportTableStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("import_table_status", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciImportTableStatusResult{}
	var retval *TImportStatus
	var err2 error
	if retval, err2 = p.handler.ImportTableStatus(args.Session, args.ImportID); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing import_table_status: "+err2.Error())
			oprot.WriteMessageBegin("import_table_status", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("import_table_status", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetFirstGeoFileInArchive struct {
	handler OmniSci
}

func (p *omniSciProcessorGetFirstGeoFileInArchive) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetFirstGeoFileInArchiveArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_first_geo_file_in_archive", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetFirstGeoFileInArchiveResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetFirstGeoFileInArchive(args.Session, args.ArchivePath, args.CopyParams); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_first_geo_file_in_archive: "+err2.Error())
			oprot.WriteMessageBegin("get_first_geo_file_in_archive", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("get_first_geo_file_in_archive", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetAllFilesInArchive struct {
	handler OmniSci
}

func (p *omniSciProcessorGetAllFilesInArchive) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetAllFilesInArchiveArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_all_files_in_archive", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetAllFilesInArchiveResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetAllFilesInArchive(args.Session, args.ArchivePath, args.CopyParams); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_all_files_in_archive: "+err2.Error())
			oprot.WriteMessageBegin("get_all_files_in_archive", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_all_files_in_archive", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetLayersInGeoFile struct {
	handler OmniSci
}

func (p *omniSciProcessorGetLayersInGeoFile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetLayersInGeoFileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_layers_in_geo_file", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetLayersInGeoFileResult{}
	var retval []*TGeoFileLayerInfo
	var err2 error
	if retval, err2 = p.handler.GetLayersInGeoFile(args.Session, args.FileName, args.CopyParams); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_layers_in_geo_file: "+err2.Error())
			oprot.WriteMessageBegin("get_layers_in_geo_file", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_layers_in_geo_file", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorQueryGetOuterFragmentCount struct {
	handler OmniSci
}

func (p *omniSciProcessorQueryGetOuterFragmentCount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciQueryGetOuterFragmentCountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("query_get_outer_fragment_count", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciQueryGetOuterFragmentCountResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.QueryGetOuterFragmentCount(args.Session, args.Query); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing query_get_outer_fragment_count: "+err2.Error())
			oprot.WriteMessageBegin("query_get_outer_fragment_count", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("query_get_outer_fragment_count", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorCheckTableConsistency struct {
	handler OmniSci
}

func (p *omniSciProcessorCheckTableConsistency) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciCheckTableConsistencyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("check_table_consistency", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciCheckTableConsistencyResult{}
	var retval *TTableMeta
	var err2 error
	if retval, err2 = p.handler.CheckTableConsistency(args.Session, args.TableID); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing check_table_consistency: "+err2.Error())
			oprot.WriteMessageBegin("check_table_consistency", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("check_table_consistency", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorStartQuery struct {
	handler OmniSci
}

func (p *omniSciProcessorStartQuery) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciStartQueryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("start_query", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciStartQueryResult{}
	var retval *TPendingQuery
	var err2 error
	if retval, err2 = p.handler.StartQuery(args.LeafSession, args.ParentSession, args.QueryRa, args.StartTimeStr, args.JustExplain, args.OuterFragmentIndices); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing start_query: "+err2.Error())
			oprot.WriteMessageBegin("start_query", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("start_query", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorExecuteQueryStep struct {
	handler OmniSci
}

func (p *omniSciProcessorExecuteQueryStep) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciExecuteQueryStepArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("execute_query_step", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciExecuteQueryStepResult{}
	var retval *TStepResult_
	var err2 error
	if retval, err2 = p.handler.ExecuteQueryStep(args.PendingQuery, args.SubqueryID, args.StartTimeStr); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing execute_query_step: "+err2.Error())
			oprot.WriteMessageBegin("execute_query_step", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("execute_query_step", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorBroadcastSerializedRows struct {
	handler OmniSci
}

func (p *omniSciProcessorBroadcastSerializedRows) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciBroadcastSerializedRowsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("broadcast_serialized_rows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciBroadcastSerializedRowsResult{}
	var err2 error
	if err2 = p.handler.BroadcastSerializedRows(args.SerializedRows, args.RowDesc, args.QueryID, args.SubqueryID, args.IsFinalSubqueryResult_); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing broadcast_serialized_rows: "+err2.Error())
			oprot.WriteMessageBegin("broadcast_serialized_rows", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("broadcast_serialized_rows", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorStartRenderQuery struct {
	handler OmniSci
}

func (p *omniSciProcessorStartRenderQuery) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciStartRenderQueryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("start_render_query", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciStartRenderQueryResult{}
	var retval *TPendingRenderQuery
	var err2 error
	if retval, err2 = p.handler.StartRenderQuery(args.Session, args.WidgetID, args.NodeIdx, args.VegaJSON); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing start_render_query: "+err2.Error())
			oprot.WriteMessageBegin("start_render_query", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("start_render_query", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorExecuteNextRenderStep struct {
	handler OmniSci
}

func (p *omniSciProcessorExecuteNextRenderStep) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciExecuteNextRenderStepArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("execute_next_render_step", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciExecuteNextRenderStepResult{}
	var retval *TRenderStepResult_
	var err2 error
	if retval, err2 = p.handler.ExecuteNextRenderStep(args.PendingRender, args.MergedData); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing execute_next_render_step: "+err2.Error())
			oprot.WriteMessageBegin("execute_next_render_step", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("execute_next_render_step", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorInsertData struct {
	handler OmniSci
}

func (p *omniSciProcessorInsertData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciInsertDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("insert_data", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciInsertDataResult{}
	var err2 error
	if err2 = p.handler.InsertData(args.Session, args.InsertData); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing insert_data: "+err2.Error())
			oprot.WriteMessageBegin("insert_data", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("insert_data", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorCheckpoint struct {
	handler OmniSci
}

func (p *omniSciProcessorCheckpoint) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciCheckpointArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("checkpoint", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciCheckpointResult{}
	var err2 error
	if err2 = p.handler.Checkpoint(args.Session, args.TableID); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkpoint: "+err2.Error())
			oprot.WriteMessageBegin("checkpoint", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("checkpoint", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetRoles struct {
	handler OmniSci
}

func (p *omniSciProcessorGetRoles) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetRolesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_roles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetRolesResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetRoles(args.Session); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_roles: "+err2.Error())
			oprot.WriteMessageBegin("get_roles", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_roles", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetDbObjectsForGrantee struct {
	handler OmniSci
}

func (p *omniSciProcessorGetDbObjectsForGrantee) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetDbObjectsForGranteeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_db_objects_for_grantee", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetDbObjectsForGranteeResult{}
	var retval []*TDBObject
	var err2 error
	if retval, err2 = p.handler.GetDbObjectsForGrantee(args.Session, args.RoleName); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_db_objects_for_grantee: "+err2.Error())
			oprot.WriteMessageBegin("get_db_objects_for_grantee", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_db_objects_for_grantee", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetDbObjectPrivs struct {
	handler OmniSci
}

func (p *omniSciProcessorGetDbObjectPrivs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetDbObjectPrivsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_db_object_privs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetDbObjectPrivsResult{}
	var retval []*TDBObject
	var err2 error
	if retval, err2 = p.handler.GetDbObjectPrivs(args.Session, args.ObjectName, args.Type); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_db_object_privs: "+err2.Error())
			oprot.WriteMessageBegin("get_db_object_privs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_db_object_privs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetAllRolesForUser struct {
	handler OmniSci
}

func (p *omniSciProcessorGetAllRolesForUser) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetAllRolesForUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_all_roles_for_user", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetAllRolesForUserResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetAllRolesForUser(args.Session, args.UserName); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_all_roles_for_user: "+err2.Error())
			oprot.WriteMessageBegin("get_all_roles_for_user", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_all_roles_for_user", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorHasRole struct {
	handler OmniSci
}

func (p *omniSciProcessorHasRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciHasRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("has_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciHasRoleResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.HasRole(args.Session, args.GranteeName, args.RoleName); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing has_role: "+err2.Error())
			oprot.WriteMessageBegin("has_role", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("has_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorHasObjectPrivilege struct {
	handler OmniSci
}

func (p *omniSciProcessorHasObjectPrivilege) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciHasObjectPrivilegeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("has_object_privilege", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciHasObjectPrivilegeResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.HasObjectPrivilege(args.Session, args.GranteeName, args.ObjectName, args.ObjectType, args.Permissions); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing has_object_privilege: "+err2.Error())
			oprot.WriteMessageBegin("has_object_privilege", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("has_object_privilege", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorSetLicenseKey struct {
	handler OmniSci
}

func (p *omniSciProcessorSetLicenseKey) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciSetLicenseKeyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("set_license_key", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciSetLicenseKeyResult{}
	var retval *TLicenseInfo
	var err2 error
	if retval, err2 = p.handler.SetLicenseKey(args.Session, args.Key, args.Nonce); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_license_key: "+err2.Error())
			oprot.WriteMessageBegin("set_license_key", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("set_license_key", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetLicenseClaims struct {
	handler OmniSci
}

func (p *omniSciProcessorGetLicenseClaims) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetLicenseClaimsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_license_claims", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetLicenseClaimsResult{}
	var retval *TLicenseInfo
	var err2 error
	if retval, err2 = p.handler.GetLicenseClaims(args.Session, args.Nonce); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_license_claims: "+err2.Error())
			oprot.WriteMessageBegin("get_license_claims", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_license_claims", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorGetDeviceParameters struct {
	handler OmniSci
}

func (p *omniSciProcessorGetDeviceParameters) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciGetDeviceParametersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_device_parameters", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciGetDeviceParametersResult{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.GetDeviceParameters(args.Session); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_device_parameters: "+err2.Error())
			oprot.WriteMessageBegin("get_device_parameters", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_device_parameters", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type omniSciProcessorRegisterRuntimeExtensionFunctions struct {
	handler OmniSci
}

func (p *omniSciProcessorRegisterRuntimeExtensionFunctions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OmniSciRegisterRuntimeExtensionFunctionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("register_runtime_extension_functions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OmniSciRegisterRuntimeExtensionFunctionsResult{}
	var err2 error
	if err2 = p.handler.RegisterRuntimeExtensionFunctions(args.Session, args.Udfs, args.Udtfs, args.DeviceIrMap); err2 != nil {
		switch v := err2.(type) {
		case *TOmniSciException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing register_runtime_extension_functions: "+err2.Error())
			oprot.WriteMessageBegin("register_runtime_extension_functions", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("register_runtime_extension_functions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - User
//  - Passwd
//  - Dbname
type OmniSciConnectArgs struct {
	User   string `thrift:"user,1" json:"user"`
	Passwd string `thrift:"passwd,2" json:"passwd"`
	Dbname string `thrift:"dbname,3" json:"dbname"`
}

func NewOmniSciConnectArgs() *OmniSciConnectArgs {
	return &OmniSciConnectArgs{}
}

func (p *OmniSciConnectArgs) GetUser() string {
	return p.User
}

func (p *OmniSciConnectArgs) GetPasswd() string {
	return p.Passwd
}

func (p *OmniSciConnectArgs) GetDbname() string {
	return p.Dbname
}
func (p *OmniSciConnectArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciConnectArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *OmniSciConnectArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Passwd = v
	}
	return nil
}

func (p *OmniSciConnectArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *OmniSciConnectArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("connect_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciConnectArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err)
	}
	return err
}

func (p *OmniSciConnectArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("passwd", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:passwd: ", p), err)
	}
	if err := oprot.WriteString(string(p.Passwd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.passwd (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:passwd: ", p), err)
	}
	return err
}

func (p *OmniSciConnectArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dbname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dbname (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dbname: ", p), err)
	}
	return err
}

func (p *OmniSciConnectArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciConnectArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciConnectResult struct {
	Success *TSessionId        `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciConnectResult() *OmniSciConnectResult {
	return &OmniSciConnectResult{}
}

var OmniSciConnectResult_Success_DEFAULT TSessionId

func (p *OmniSciConnectResult) GetSuccess() TSessionId {
	if !p.IsSetSuccess() {
		return OmniSciConnectResult_Success_DEFAULT
	}
	return *p.Success
}

var OmniSciConnectResult_E_DEFAULT *TOmniSciException

func (p *OmniSciConnectResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciConnectResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciConnectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciConnectResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciConnectResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciConnectResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := TSessionId(v)
		p.Success = &temp
	}
	return nil
}

func (p *OmniSciConnectResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciConnectResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("connect_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciConnectResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciConnectResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciConnectResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciConnectResult(%+v)", *p)
}

// Attributes:
//  - InputToken
//  - Dbname
type OmniSciKrb5ConnectArgs struct {
	InputToken string `thrift:"inputToken,1" json:"inputToken"`
	Dbname     string `thrift:"dbname,2" json:"dbname"`
}

func NewOmniSciKrb5ConnectArgs() *OmniSciKrb5ConnectArgs {
	return &OmniSciKrb5ConnectArgs{}
}

func (p *OmniSciKrb5ConnectArgs) GetInputToken() string {
	return p.InputToken
}

func (p *OmniSciKrb5ConnectArgs) GetDbname() string {
	return p.Dbname
}
func (p *OmniSciKrb5ConnectArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciKrb5ConnectArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.InputToken = v
	}
	return nil
}

func (p *OmniSciKrb5ConnectArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *OmniSciKrb5ConnectArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("krb5_connect_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciKrb5ConnectArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inputToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inputToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.InputToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.inputToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inputToken: ", p), err)
	}
	return err
}

func (p *OmniSciKrb5ConnectArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dbname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dbname (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dbname: ", p), err)
	}
	return err
}

func (p *OmniSciKrb5ConnectArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciKrb5ConnectArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciKrb5ConnectResult struct {
	Success *TKrb5Session      `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciKrb5ConnectResult() *OmniSciKrb5ConnectResult {
	return &OmniSciKrb5ConnectResult{}
}

var OmniSciKrb5ConnectResult_Success_DEFAULT *TKrb5Session

func (p *OmniSciKrb5ConnectResult) GetSuccess() *TKrb5Session {
	if !p.IsSetSuccess() {
		return OmniSciKrb5ConnectResult_Success_DEFAULT
	}
	return p.Success
}

var OmniSciKrb5ConnectResult_E_DEFAULT *TOmniSciException

func (p *OmniSciKrb5ConnectResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciKrb5ConnectResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciKrb5ConnectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciKrb5ConnectResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciKrb5ConnectResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciKrb5ConnectResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TKrb5Session{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *OmniSciKrb5ConnectResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciKrb5ConnectResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("krb5_connect_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciKrb5ConnectResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciKrb5ConnectResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciKrb5ConnectResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciKrb5ConnectResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciDisconnectArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
}

func NewOmniSciDisconnectArgs() *OmniSciDisconnectArgs {
	return &OmniSciDisconnectArgs{}
}

func (p *OmniSciDisconnectArgs) GetSession() TSessionId {
	return p.Session
}
func (p *OmniSciDisconnectArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciDisconnectArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciDisconnectArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("disconnect_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciDisconnectArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciDisconnectArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciDisconnectArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciDisconnectResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciDisconnectResult() *OmniSciDisconnectResult {
	return &OmniSciDisconnectResult{}
}

var OmniSciDisconnectResult_E_DEFAULT *TOmniSciException

func (p *OmniSciDisconnectResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciDisconnectResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciDisconnectResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciDisconnectResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciDisconnectResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciDisconnectResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("disconnect_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciDisconnectResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciDisconnectResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciDisconnectResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Dbname
type OmniSciSwitchDatabaseArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
	Dbname  string     `thrift:"dbname,2" json:"dbname"`
}

func NewOmniSciSwitchDatabaseArgs() *OmniSciSwitchDatabaseArgs {
	return &OmniSciSwitchDatabaseArgs{}
}

func (p *OmniSciSwitchDatabaseArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciSwitchDatabaseArgs) GetDbname() string {
	return p.Dbname
}
func (p *OmniSciSwitchDatabaseArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciSwitchDatabaseArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciSwitchDatabaseArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *OmniSciSwitchDatabaseArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("switch_database_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciSwitchDatabaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciSwitchDatabaseArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dbname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dbname (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dbname: ", p), err)
	}
	return err
}

func (p *OmniSciSwitchDatabaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciSwitchDatabaseArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciSwitchDatabaseResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciSwitchDatabaseResult() *OmniSciSwitchDatabaseResult {
	return &OmniSciSwitchDatabaseResult{}
}

var OmniSciSwitchDatabaseResult_E_DEFAULT *TOmniSciException

func (p *OmniSciSwitchDatabaseResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciSwitchDatabaseResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciSwitchDatabaseResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciSwitchDatabaseResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciSwitchDatabaseResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciSwitchDatabaseResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("switch_database_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciSwitchDatabaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciSwitchDatabaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciSwitchDatabaseResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciCloneSessionArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
}

func NewOmniSciCloneSessionArgs() *OmniSciCloneSessionArgs {
	return &OmniSciCloneSessionArgs{}
}

func (p *OmniSciCloneSessionArgs) GetSession() TSessionId {
	return p.Session
}
func (p *OmniSciCloneSessionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciCloneSessionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciCloneSessionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clone_session_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciCloneSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciCloneSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciCloneSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciCloneSessionResult struct {
	Success *TSessionId        `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciCloneSessionResult() *OmniSciCloneSessionResult {
	return &OmniSciCloneSessionResult{}
}

var OmniSciCloneSessionResult_Success_DEFAULT TSessionId

func (p *OmniSciCloneSessionResult) GetSuccess() TSessionId {
	if !p.IsSetSuccess() {
		return OmniSciCloneSessionResult_Success_DEFAULT
	}
	return *p.Success
}

var OmniSciCloneSessionResult_E_DEFAULT *TOmniSciException

func (p *OmniSciCloneSessionResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciCloneSessionResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciCloneSessionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciCloneSessionResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciCloneSessionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciCloneSessionResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := TSessionId(v)
		p.Success = &temp
	}
	return nil
}

func (p *OmniSciCloneSessionResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciCloneSessionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clone_session_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciCloneSessionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciCloneSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciCloneSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciCloneSessionResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetServerStatusArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
}

func NewOmniSciGetServerStatusArgs() *OmniSciGetServerStatusArgs {
	return &OmniSciGetServerStatusArgs{}
}

func (p *OmniSciGetServerStatusArgs) GetSession() TSessionId {
	return p.Session
}
func (p *OmniSciGetServerStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetServerStatusArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetServerStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_server_status_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetServerStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetServerStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetServerStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetServerStatusResult struct {
	Success *TServerStatus     `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetServerStatusResult() *OmniSciGetServerStatusResult {
	return &OmniSciGetServerStatusResult{}
}

var OmniSciGetServerStatusResult_Success_DEFAULT *TServerStatus

func (p *OmniSciGetServerStatusResult) GetSuccess() *TServerStatus {
	if !p.IsSetSuccess() {
		return OmniSciGetServerStatusResult_Success_DEFAULT
	}
	return p.Success
}

var OmniSciGetServerStatusResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetServerStatusResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetServerStatusResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetServerStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetServerStatusResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetServerStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetServerStatusResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TServerStatus{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *OmniSciGetServerStatusResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetServerStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_server_status_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetServerStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetServerStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetServerStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetServerStatusResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetStatusArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
}

func NewOmniSciGetStatusArgs() *OmniSciGetStatusArgs {
	return &OmniSciGetStatusArgs{}
}

func (p *OmniSciGetStatusArgs) GetSession() TSessionId {
	return p.Session
}
func (p *OmniSciGetStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetStatusArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_status_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetStatusResult struct {
	Success []*TServerStatus   `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetStatusResult() *OmniSciGetStatusResult {
	return &OmniSciGetStatusResult{}
}

var OmniSciGetStatusResult_Success_DEFAULT []*TServerStatus

func (p *OmniSciGetStatusResult) GetSuccess() []*TServerStatus {
	return p.Success
}

var OmniSciGetStatusResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetStatusResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetStatusResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetStatusResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetStatusResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TServerStatus, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem214 := &TServerStatus{}
		if err := _elem214.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem214), err)
		}
		p.Success = append(p.Success, _elem214)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciGetStatusResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_status_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetStatusResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetHardwareInfoArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
}

func NewOmniSciGetHardwareInfoArgs() *OmniSciGetHardwareInfoArgs {
	return &OmniSciGetHardwareInfoArgs{}
}

func (p *OmniSciGetHardwareInfoArgs) GetSession() TSessionId {
	return p.Session
}
func (p *OmniSciGetHardwareInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetHardwareInfoArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetHardwareInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_hardware_info_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetHardwareInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetHardwareInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetHardwareInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetHardwareInfoResult struct {
	Success *TClusterHardwareInfo `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException    `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetHardwareInfoResult() *OmniSciGetHardwareInfoResult {
	return &OmniSciGetHardwareInfoResult{}
}

var OmniSciGetHardwareInfoResult_Success_DEFAULT *TClusterHardwareInfo

func (p *OmniSciGetHardwareInfoResult) GetSuccess() *TClusterHardwareInfo {
	if !p.IsSetSuccess() {
		return OmniSciGetHardwareInfoResult_Success_DEFAULT
	}
	return p.Success
}

var OmniSciGetHardwareInfoResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetHardwareInfoResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetHardwareInfoResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetHardwareInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetHardwareInfoResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetHardwareInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetHardwareInfoResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TClusterHardwareInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *OmniSciGetHardwareInfoResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetHardwareInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_hardware_info_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetHardwareInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetHardwareInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetHardwareInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetHardwareInfoResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetTablesArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
}

func NewOmniSciGetTablesArgs() *OmniSciGetTablesArgs {
	return &OmniSciGetTablesArgs{}
}

func (p *OmniSciGetTablesArgs) GetSession() TSessionId {
	return p.Session
}
func (p *OmniSciGetTablesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetTablesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetTablesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_tables_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetTablesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetTablesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetTablesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetTablesResult struct {
	Success []string           `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetTablesResult() *OmniSciGetTablesResult {
	return &OmniSciGetTablesResult{}
}

var OmniSciGetTablesResult_Success_DEFAULT []string

func (p *OmniSciGetTablesResult) GetSuccess() []string {
	return p.Success
}

var OmniSciGetTablesResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetTablesResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetTablesResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetTablesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetTablesResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetTablesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetTablesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem215 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem215 = v
		}
		p.Success = append(p.Success, _elem215)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciGetTablesResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetTablesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_tables_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetTablesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetTablesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetTablesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetTablesResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetPhysicalTablesArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
}

func NewOmniSciGetPhysicalTablesArgs() *OmniSciGetPhysicalTablesArgs {
	return &OmniSciGetPhysicalTablesArgs{}
}

func (p *OmniSciGetPhysicalTablesArgs) GetSession() TSessionId {
	return p.Session
}
func (p *OmniSciGetPhysicalTablesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetPhysicalTablesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetPhysicalTablesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_physical_tables_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetPhysicalTablesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetPhysicalTablesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetPhysicalTablesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetPhysicalTablesResult struct {
	Success []string           `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetPhysicalTablesResult() *OmniSciGetPhysicalTablesResult {
	return &OmniSciGetPhysicalTablesResult{}
}

var OmniSciGetPhysicalTablesResult_Success_DEFAULT []string

func (p *OmniSciGetPhysicalTablesResult) GetSuccess() []string {
	return p.Success
}

var OmniSciGetPhysicalTablesResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetPhysicalTablesResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetPhysicalTablesResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetPhysicalTablesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetPhysicalTablesResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetPhysicalTablesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetPhysicalTablesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem216 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem216 = v
		}
		p.Success = append(p.Success, _elem216)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciGetPhysicalTablesResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetPhysicalTablesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_physical_tables_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetPhysicalTablesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetPhysicalTablesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetPhysicalTablesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetPhysicalTablesResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetViewsArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
}

func NewOmniSciGetViewsArgs() *OmniSciGetViewsArgs {
	return &OmniSciGetViewsArgs{}
}

func (p *OmniSciGetViewsArgs) GetSession() TSessionId {
	return p.Session
}
func (p *OmniSciGetViewsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetViewsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetViewsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_views_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetViewsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetViewsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetViewsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetViewsResult struct {
	Success []string           `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetViewsResult() *OmniSciGetViewsResult {
	return &OmniSciGetViewsResult{}
}

var OmniSciGetViewsResult_Success_DEFAULT []string

func (p *OmniSciGetViewsResult) GetSuccess() []string {
	return p.Success
}

var OmniSciGetViewsResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetViewsResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetViewsResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetViewsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetViewsResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetViewsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetViewsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem217 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem217 = v
		}
		p.Success = append(p.Success, _elem217)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciGetViewsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetViewsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_views_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetViewsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetViewsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetViewsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetViewsResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetTablesMetaArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
}

func NewOmniSciGetTablesMetaArgs() *OmniSciGetTablesMetaArgs {
	return &OmniSciGetTablesMetaArgs{}
}

func (p *OmniSciGetTablesMetaArgs) GetSession() TSessionId {
	return p.Session
}
func (p *OmniSciGetTablesMetaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetTablesMetaArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetTablesMetaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_tables_meta_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetTablesMetaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetTablesMetaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetTablesMetaArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetTablesMetaResult struct {
	Success []*TTableMeta      `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetTablesMetaResult() *OmniSciGetTablesMetaResult {
	return &OmniSciGetTablesMetaResult{}
}

var OmniSciGetTablesMetaResult_Success_DEFAULT []*TTableMeta

func (p *OmniSciGetTablesMetaResult) GetSuccess() []*TTableMeta {
	return p.Success
}

var OmniSciGetTablesMetaResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetTablesMetaResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetTablesMetaResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetTablesMetaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetTablesMetaResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetTablesMetaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetTablesMetaResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TTableMeta, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem218 := &TTableMeta{}
		if err := _elem218.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem218), err)
		}
		p.Success = append(p.Success, _elem218)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciGetTablesMetaResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetTablesMetaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_tables_meta_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetTablesMetaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetTablesMetaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetTablesMetaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetTablesMetaResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
type OmniSciGetTableDetailsArgs struct {
	Session   TSessionId `thrift:"session,1" json:"session"`
	TableName string     `thrift:"table_name,2" json:"table_name"`
}

func NewOmniSciGetTableDetailsArgs() *OmniSciGetTableDetailsArgs {
	return &OmniSciGetTableDetailsArgs{}
}

func (p *OmniSciGetTableDetailsArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciGetTableDetailsArgs) GetTableName() string {
	return p.TableName
}
func (p *OmniSciGetTableDetailsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetTableDetailsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetTableDetailsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *OmniSciGetTableDetailsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_details_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetTableDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetTableDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err)
	}
	return err
}

func (p *OmniSciGetTableDetailsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetTableDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetTableDetailsResult struct {
	Success *TTableDetails     `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetTableDetailsResult() *OmniSciGetTableDetailsResult {
	return &OmniSciGetTableDetailsResult{}
}

var OmniSciGetTableDetailsResult_Success_DEFAULT *TTableDetails

func (p *OmniSciGetTableDetailsResult) GetSuccess() *TTableDetails {
	if !p.IsSetSuccess() {
		return OmniSciGetTableDetailsResult_Success_DEFAULT
	}
	return p.Success
}

var OmniSciGetTableDetailsResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetTableDetailsResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetTableDetailsResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetTableDetailsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetTableDetailsResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetTableDetailsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetTableDetailsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TTableDetails{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *OmniSciGetTableDetailsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetTableDetailsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_details_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetTableDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetTableDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetTableDetailsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetTableDetailsResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
type OmniSciGetInternalTableDetailsArgs struct {
	Session   TSessionId `thrift:"session,1" json:"session"`
	TableName string     `thrift:"table_name,2" json:"table_name"`
}

func NewOmniSciGetInternalTableDetailsArgs() *OmniSciGetInternalTableDetailsArgs {
	return &OmniSciGetInternalTableDetailsArgs{}
}

func (p *OmniSciGetInternalTableDetailsArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciGetInternalTableDetailsArgs) GetTableName() string {
	return p.TableName
}
func (p *OmniSciGetInternalTableDetailsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetInternalTableDetailsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetInternalTableDetailsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *OmniSciGetInternalTableDetailsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_internal_table_details_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetInternalTableDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetInternalTableDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err)
	}
	return err
}

func (p *OmniSciGetInternalTableDetailsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetInternalTableDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetInternalTableDetailsResult struct {
	Success *TTableDetails     `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetInternalTableDetailsResult() *OmniSciGetInternalTableDetailsResult {
	return &OmniSciGetInternalTableDetailsResult{}
}

var OmniSciGetInternalTableDetailsResult_Success_DEFAULT *TTableDetails

func (p *OmniSciGetInternalTableDetailsResult) GetSuccess() *TTableDetails {
	if !p.IsSetSuccess() {
		return OmniSciGetInternalTableDetailsResult_Success_DEFAULT
	}
	return p.Success
}

var OmniSciGetInternalTableDetailsResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetInternalTableDetailsResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetInternalTableDetailsResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetInternalTableDetailsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetInternalTableDetailsResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetInternalTableDetailsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetInternalTableDetailsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TTableDetails{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *OmniSciGetInternalTableDetailsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetInternalTableDetailsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_internal_table_details_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetInternalTableDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetInternalTableDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetInternalTableDetailsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetInternalTableDetailsResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetUsersArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
}

func NewOmniSciGetUsersArgs() *OmniSciGetUsersArgs {
	return &OmniSciGetUsersArgs{}
}

func (p *OmniSciGetUsersArgs) GetSession() TSessionId {
	return p.Session
}
func (p *OmniSciGetUsersArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetUsersArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetUsersArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_users_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetUsersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetUsersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetUsersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetUsersResult struct {
	Success []string           `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetUsersResult() *OmniSciGetUsersResult {
	return &OmniSciGetUsersResult{}
}

var OmniSciGetUsersResult_Success_DEFAULT []string

func (p *OmniSciGetUsersResult) GetSuccess() []string {
	return p.Success
}

var OmniSciGetUsersResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetUsersResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetUsersResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetUsersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetUsersResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetUsersResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetUsersResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem219 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem219 = v
		}
		p.Success = append(p.Success, _elem219)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciGetUsersResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetUsersResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_users_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetUsersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetUsersResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetUsersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetUsersResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetDatabasesArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
}

func NewOmniSciGetDatabasesArgs() *OmniSciGetDatabasesArgs {
	return &OmniSciGetDatabasesArgs{}
}

func (p *OmniSciGetDatabasesArgs) GetSession() TSessionId {
	return p.Session
}
func (p *OmniSciGetDatabasesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetDatabasesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetDatabasesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_databases_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetDatabasesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetDatabasesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetDatabasesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetDatabasesResult struct {
	Success []*TDBInfo         `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetDatabasesResult() *OmniSciGetDatabasesResult {
	return &OmniSciGetDatabasesResult{}
}

var OmniSciGetDatabasesResult_Success_DEFAULT []*TDBInfo

func (p *OmniSciGetDatabasesResult) GetSuccess() []*TDBInfo {
	return p.Success
}

var OmniSciGetDatabasesResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetDatabasesResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetDatabasesResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetDatabasesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetDatabasesResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetDatabasesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetDatabasesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TDBInfo, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem220 := &TDBInfo{}
		if err := _elem220.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem220), err)
		}
		p.Success = append(p.Success, _elem220)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciGetDatabasesResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetDatabasesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_databases_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetDatabasesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetDatabasesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetDatabasesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetDatabasesResult(%+v)", *p)
}

type OmniSciGetVersionArgs struct {
}

func NewOmniSciGetVersionArgs() *OmniSciGetVersionArgs {
	return &OmniSciGetVersionArgs{}
}

func (p *OmniSciGetVersionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetVersionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_version_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetVersionResult struct {
	Success *string            `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetVersionResult() *OmniSciGetVersionResult {
	return &OmniSciGetVersionResult{}
}

var OmniSciGetVersionResult_Success_DEFAULT string

func (p *OmniSciGetVersionResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return OmniSciGetVersionResult_Success_DEFAULT
	}
	return *p.Success
}

var OmniSciGetVersionResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetVersionResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetVersionResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetVersionResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetVersionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetVersionResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *OmniSciGetVersionResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetVersionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_version_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetVersionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetVersionResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciStartHeapProfileArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
}

func NewOmniSciStartHeapProfileArgs() *OmniSciStartHeapProfileArgs {
	return &OmniSciStartHeapProfileArgs{}
}

func (p *OmniSciStartHeapProfileArgs) GetSession() TSessionId {
	return p.Session
}
func (p *OmniSciStartHeapProfileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciStartHeapProfileArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciStartHeapProfileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("start_heap_profile_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciStartHeapProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciStartHeapProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciStartHeapProfileArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciStartHeapProfileResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciStartHeapProfileResult() *OmniSciStartHeapProfileResult {
	return &OmniSciStartHeapProfileResult{}
}

var OmniSciStartHeapProfileResult_E_DEFAULT *TOmniSciException

func (p *OmniSciStartHeapProfileResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciStartHeapProfileResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciStartHeapProfileResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciStartHeapProfileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciStartHeapProfileResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciStartHeapProfileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("start_heap_profile_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciStartHeapProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciStartHeapProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciStartHeapProfileResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciStopHeapProfileArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
}

func NewOmniSciStopHeapProfileArgs() *OmniSciStopHeapProfileArgs {
	return &OmniSciStopHeapProfileArgs{}
}

func (p *OmniSciStopHeapProfileArgs) GetSession() TSessionId {
	return p.Session
}
func (p *OmniSciStopHeapProfileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciStopHeapProfileArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciStopHeapProfileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("stop_heap_profile_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciStopHeapProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciStopHeapProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciStopHeapProfileArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciStopHeapProfileResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciStopHeapProfileResult() *OmniSciStopHeapProfileResult {
	return &OmniSciStopHeapProfileResult{}
}

var OmniSciStopHeapProfileResult_E_DEFAULT *TOmniSciException

func (p *OmniSciStopHeapProfileResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciStopHeapProfileResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciStopHeapProfileResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciStopHeapProfileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciStopHeapProfileResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciStopHeapProfileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("stop_heap_profile_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciStopHeapProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciStopHeapProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciStopHeapProfileResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetHeapProfileArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
}

func NewOmniSciGetHeapProfileArgs() *OmniSciGetHeapProfileArgs {
	return &OmniSciGetHeapProfileArgs{}
}

func (p *OmniSciGetHeapProfileArgs) GetSession() TSessionId {
	return p.Session
}
func (p *OmniSciGetHeapProfileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetHeapProfileArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetHeapProfileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_heap_profile_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetHeapProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetHeapProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetHeapProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetHeapProfileResult struct {
	Success *string            `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetHeapProfileResult() *OmniSciGetHeapProfileResult {
	return &OmniSciGetHeapProfileResult{}
}

var OmniSciGetHeapProfileResult_Success_DEFAULT string

func (p *OmniSciGetHeapProfileResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return OmniSciGetHeapProfileResult_Success_DEFAULT
	}
	return *p.Success
}

var OmniSciGetHeapProfileResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetHeapProfileResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetHeapProfileResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetHeapProfileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetHeapProfileResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetHeapProfileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetHeapProfileResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *OmniSciGetHeapProfileResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetHeapProfileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_heap_profile_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetHeapProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetHeapProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetHeapProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetHeapProfileResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - MemoryLevel
type OmniSciGetMemoryArgs struct {
	Session     TSessionId `thrift:"session,1" json:"session"`
	MemoryLevel string     `thrift:"memory_level,2" json:"memory_level"`
}

func NewOmniSciGetMemoryArgs() *OmniSciGetMemoryArgs {
	return &OmniSciGetMemoryArgs{}
}

func (p *OmniSciGetMemoryArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciGetMemoryArgs) GetMemoryLevel() string {
	return p.MemoryLevel
}
func (p *OmniSciGetMemoryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetMemoryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetMemoryArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MemoryLevel = v
	}
	return nil
}

func (p *OmniSciGetMemoryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_memory_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetMemoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetMemoryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memory_level", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:memory_level: ", p), err)
	}
	if err := oprot.WriteString(string(p.MemoryLevel)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memory_level (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:memory_level: ", p), err)
	}
	return err
}

func (p *OmniSciGetMemoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetMemoryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetMemoryResult struct {
	Success []*TNodeMemoryInfo `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetMemoryResult() *OmniSciGetMemoryResult {
	return &OmniSciGetMemoryResult{}
}

var OmniSciGetMemoryResult_Success_DEFAULT []*TNodeMemoryInfo

func (p *OmniSciGetMemoryResult) GetSuccess() []*TNodeMemoryInfo {
	return p.Success
}

var OmniSciGetMemoryResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetMemoryResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetMemoryResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetMemoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetMemoryResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetMemoryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetMemoryResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TNodeMemoryInfo, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem221 := &TNodeMemoryInfo{}
		if err := _elem221.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem221), err)
		}
		p.Success = append(p.Success, _elem221)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciGetMemoryResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetMemoryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_memory_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetMemoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetMemoryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetMemoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetMemoryResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciClearCPUMemoryArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
}

func NewOmniSciClearCPUMemoryArgs() *OmniSciClearCPUMemoryArgs {
	return &OmniSciClearCPUMemoryArgs{}
}

func (p *OmniSciClearCPUMemoryArgs) GetSession() TSessionId {
	return p.Session
}
func (p *OmniSciClearCPUMemoryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciClearCPUMemoryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciClearCPUMemoryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clear_cpu_memory_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciClearCPUMemoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciClearCPUMemoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciClearCPUMemoryArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciClearCPUMemoryResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciClearCPUMemoryResult() *OmniSciClearCPUMemoryResult {
	return &OmniSciClearCPUMemoryResult{}
}

var OmniSciClearCPUMemoryResult_E_DEFAULT *TOmniSciException

func (p *OmniSciClearCPUMemoryResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciClearCPUMemoryResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciClearCPUMemoryResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciClearCPUMemoryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciClearCPUMemoryResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciClearCPUMemoryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clear_cpu_memory_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciClearCPUMemoryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciClearCPUMemoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciClearCPUMemoryResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciClearGpuMemoryArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
}

func NewOmniSciClearGpuMemoryArgs() *OmniSciClearGpuMemoryArgs {
	return &OmniSciClearGpuMemoryArgs{}
}

func (p *OmniSciClearGpuMemoryArgs) GetSession() TSessionId {
	return p.Session
}
func (p *OmniSciClearGpuMemoryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciClearGpuMemoryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciClearGpuMemoryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clear_gpu_memory_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciClearGpuMemoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciClearGpuMemoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciClearGpuMemoryArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciClearGpuMemoryResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciClearGpuMemoryResult() *OmniSciClearGpuMemoryResult {
	return &OmniSciClearGpuMemoryResult{}
}

var OmniSciClearGpuMemoryResult_E_DEFAULT *TOmniSciException

func (p *OmniSciClearGpuMemoryResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciClearGpuMemoryResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciClearGpuMemoryResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciClearGpuMemoryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciClearGpuMemoryResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciClearGpuMemoryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clear_gpu_memory_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciClearGpuMemoryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciClearGpuMemoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciClearGpuMemoryResult(%+v)", *p)
}

// Attributes:
//  - ParentSession
//  - LeafSession
//  - StartTimeStr
//  - Label
type OmniSciSetCurSessionArgs struct {
	ParentSession TSessionId `thrift:"parent_session,1" json:"parent_session"`
	LeafSession   TSessionId `thrift:"leaf_session,2" json:"leaf_session"`
	StartTimeStr  string     `thrift:"start_time_str,3" json:"start_time_str"`
	Label         string     `thrift:"label,4" json:"label"`
}

func NewOmniSciSetCurSessionArgs() *OmniSciSetCurSessionArgs {
	return &OmniSciSetCurSessionArgs{}
}

func (p *OmniSciSetCurSessionArgs) GetParentSession() TSessionId {
	return p.ParentSession
}

func (p *OmniSciSetCurSessionArgs) GetLeafSession() TSessionId {
	return p.LeafSession
}

func (p *OmniSciSetCurSessionArgs) GetStartTimeStr() string {
	return p.StartTimeStr
}

func (p *OmniSciSetCurSessionArgs) GetLabel() string {
	return p.Label
}
func (p *OmniSciSetCurSessionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciSetCurSessionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.ParentSession = temp
	}
	return nil
}

func (p *OmniSciSetCurSessionArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TSessionId(v)
		p.LeafSession = temp
	}
	return nil
}

func (p *OmniSciSetCurSessionArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StartTimeStr = v
	}
	return nil
}

func (p *OmniSciSetCurSessionArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Label = v
	}
	return nil
}

func (p *OmniSciSetCurSessionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("set_cur_session_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciSetCurSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parent_session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:parent_session: ", p), err)
	}
	if err := oprot.WriteString(string(p.ParentSession)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.parent_session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:parent_session: ", p), err)
	}
	return err
}

func (p *OmniSciSetCurSessionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("leaf_session", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leaf_session: ", p), err)
	}
	if err := oprot.WriteString(string(p.LeafSession)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.leaf_session (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leaf_session: ", p), err)
	}
	return err
}

func (p *OmniSciSetCurSessionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_time_str", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:start_time_str: ", p), err)
	}
	if err := oprot.WriteString(string(p.StartTimeStr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start_time_str (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:start_time_str: ", p), err)
	}
	return err
}

func (p *OmniSciSetCurSessionArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("label", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:label: ", p), err)
	}
	if err := oprot.WriteString(string(p.Label)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.label (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:label: ", p), err)
	}
	return err
}

func (p *OmniSciSetCurSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciSetCurSessionArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciSetCurSessionResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciSetCurSessionResult() *OmniSciSetCurSessionResult {
	return &OmniSciSetCurSessionResult{}
}

var OmniSciSetCurSessionResult_E_DEFAULT *TOmniSciException

func (p *OmniSciSetCurSessionResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciSetCurSessionResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciSetCurSessionResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciSetCurSessionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciSetCurSessionResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciSetCurSessionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("set_cur_session_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciSetCurSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciSetCurSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciSetCurSessionResult(%+v)", *p)
}

// Attributes:
//  - ParentSession
//  - LeafSession
//  - StartTimeStr
//  - Label
type OmniSciInvalidateCurSessionArgs struct {
	ParentSession TSessionId `thrift:"parent_session,1" json:"parent_session"`
	LeafSession   TSessionId `thrift:"leaf_session,2" json:"leaf_session"`
	StartTimeStr  string     `thrift:"start_time_str,3" json:"start_time_str"`
	Label         string     `thrift:"label,4" json:"label"`
}

func NewOmniSciInvalidateCurSessionArgs() *OmniSciInvalidateCurSessionArgs {
	return &OmniSciInvalidateCurSessionArgs{}
}

func (p *OmniSciInvalidateCurSessionArgs) GetParentSession() TSessionId {
	return p.ParentSession
}

func (p *OmniSciInvalidateCurSessionArgs) GetLeafSession() TSessionId {
	return p.LeafSession
}

func (p *OmniSciInvalidateCurSessionArgs) GetStartTimeStr() string {
	return p.StartTimeStr
}

func (p *OmniSciInvalidateCurSessionArgs) GetLabel() string {
	return p.Label
}
func (p *OmniSciInvalidateCurSessionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciInvalidateCurSessionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.ParentSession = temp
	}
	return nil
}

func (p *OmniSciInvalidateCurSessionArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TSessionId(v)
		p.LeafSession = temp
	}
	return nil
}

func (p *OmniSciInvalidateCurSessionArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StartTimeStr = v
	}
	return nil
}

func (p *OmniSciInvalidateCurSessionArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Label = v
	}
	return nil
}

func (p *OmniSciInvalidateCurSessionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("invalidate_cur_session_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciInvalidateCurSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parent_session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:parent_session: ", p), err)
	}
	if err := oprot.WriteString(string(p.ParentSession)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.parent_session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:parent_session: ", p), err)
	}
	return err
}

func (p *OmniSciInvalidateCurSessionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("leaf_session", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leaf_session: ", p), err)
	}
	if err := oprot.WriteString(string(p.LeafSession)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.leaf_session (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leaf_session: ", p), err)
	}
	return err
}

func (p *OmniSciInvalidateCurSessionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_time_str", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:start_time_str: ", p), err)
	}
	if err := oprot.WriteString(string(p.StartTimeStr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start_time_str (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:start_time_str: ", p), err)
	}
	return err
}

func (p *OmniSciInvalidateCurSessionArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("label", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:label: ", p), err)
	}
	if err := oprot.WriteString(string(p.Label)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.label (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:label: ", p), err)
	}
	return err
}

func (p *OmniSciInvalidateCurSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciInvalidateCurSessionArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciInvalidateCurSessionResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciInvalidateCurSessionResult() *OmniSciInvalidateCurSessionResult {
	return &OmniSciInvalidateCurSessionResult{}
}

var OmniSciInvalidateCurSessionResult_E_DEFAULT *TOmniSciException

func (p *OmniSciInvalidateCurSessionResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciInvalidateCurSessionResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciInvalidateCurSessionResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciInvalidateCurSessionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciInvalidateCurSessionResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciInvalidateCurSessionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("invalidate_cur_session_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciInvalidateCurSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciInvalidateCurSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciInvalidateCurSessionResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DbID
//  - TableID
//  - NewEpoch_
type OmniSciSetTableEpochArgs struct {
	Session   TSessionId `thrift:"session,1" json:"session"`
	DbID      int32      `thrift:"db_id,2" json:"db_id"`
	TableID   int32      `thrift:"table_id,3" json:"table_id"`
	NewEpoch_ int32      `thrift:"new_epoch,4" json:"new_epoch"`
}

func NewOmniSciSetTableEpochArgs() *OmniSciSetTableEpochArgs {
	return &OmniSciSetTableEpochArgs{}
}

func (p *OmniSciSetTableEpochArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciSetTableEpochArgs) GetDbID() int32 {
	return p.DbID
}

func (p *OmniSciSetTableEpochArgs) GetTableID() int32 {
	return p.TableID
}

func (p *OmniSciSetTableEpochArgs) GetNewEpoch_() int32 {
	return p.NewEpoch_
}
func (p *OmniSciSetTableEpochArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciSetTableEpochArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciSetTableEpochArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DbID = v
	}
	return nil
}

func (p *OmniSciSetTableEpochArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TableID = v
	}
	return nil
}

func (p *OmniSciSetTableEpochArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NewEpoch_ = v
	}
	return nil
}

func (p *OmniSciSetTableEpochArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("set_table_epoch_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciSetTableEpochArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciSetTableEpochArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:db_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DbID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:db_id: ", p), err)
	}
	return err
}

func (p *OmniSciSetTableEpochArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_id", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:table_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TableID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:table_id: ", p), err)
	}
	return err
}

func (p *OmniSciSetTableEpochArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_epoch", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:new_epoch: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NewEpoch_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.new_epoch (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:new_epoch: ", p), err)
	}
	return err
}

func (p *OmniSciSetTableEpochArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciSetTableEpochArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciSetTableEpochResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciSetTableEpochResult() *OmniSciSetTableEpochResult {
	return &OmniSciSetTableEpochResult{}
}

var OmniSciSetTableEpochResult_E_DEFAULT *TOmniSciException

func (p *OmniSciSetTableEpochResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciSetTableEpochResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciSetTableEpochResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciSetTableEpochResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciSetTableEpochResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciSetTableEpochResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("set_table_epoch_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciSetTableEpochResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciSetTableEpochResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciSetTableEpochResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
//  - NewEpoch_
type OmniSciSetTableEpochByNameArgs struct {
	Session   TSessionId `thrift:"session,1" json:"session"`
	TableName string     `thrift:"table_name,2" json:"table_name"`
	NewEpoch_ int32      `thrift:"new_epoch,3" json:"new_epoch"`
}

func NewOmniSciSetTableEpochByNameArgs() *OmniSciSetTableEpochByNameArgs {
	return &OmniSciSetTableEpochByNameArgs{}
}

func (p *OmniSciSetTableEpochByNameArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciSetTableEpochByNameArgs) GetTableName() string {
	return p.TableName
}

func (p *OmniSciSetTableEpochByNameArgs) GetNewEpoch_() int32 {
	return p.NewEpoch_
}
func (p *OmniSciSetTableEpochByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciSetTableEpochByNameArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciSetTableEpochByNameArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *OmniSciSetTableEpochByNameArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NewEpoch_ = v
	}
	return nil
}

func (p *OmniSciSetTableEpochByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("set_table_epoch_by_name_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciSetTableEpochByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciSetTableEpochByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err)
	}
	return err
}

func (p *OmniSciSetTableEpochByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_epoch", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_epoch: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NewEpoch_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.new_epoch (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_epoch: ", p), err)
	}
	return err
}

func (p *OmniSciSetTableEpochByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciSetTableEpochByNameArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciSetTableEpochByNameResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciSetTableEpochByNameResult() *OmniSciSetTableEpochByNameResult {
	return &OmniSciSetTableEpochByNameResult{}
}

var OmniSciSetTableEpochByNameResult_E_DEFAULT *TOmniSciException

func (p *OmniSciSetTableEpochByNameResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciSetTableEpochByNameResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciSetTableEpochByNameResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciSetTableEpochByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciSetTableEpochByNameResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciSetTableEpochByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("set_table_epoch_by_name_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciSetTableEpochByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciSetTableEpochByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciSetTableEpochByNameResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DbID
//  - TableID
type OmniSciGetTableEpochArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
	DbID    int32      `thrift:"db_id,2" json:"db_id"`
	TableID int32      `thrift:"table_id,3" json:"table_id"`
}

func NewOmniSciGetTableEpochArgs() *OmniSciGetTableEpochArgs {
	return &OmniSciGetTableEpochArgs{}
}

func (p *OmniSciGetTableEpochArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciGetTableEpochArgs) GetDbID() int32 {
	return p.DbID
}

func (p *OmniSciGetTableEpochArgs) GetTableID() int32 {
	return p.TableID
}
func (p *OmniSciGetTableEpochArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetTableEpochArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetTableEpochArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DbID = v
	}
	return nil
}

func (p *OmniSciGetTableEpochArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TableID = v
	}
	return nil
}

func (p *OmniSciGetTableEpochArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_epoch_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetTableEpochArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetTableEpochArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:db_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DbID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:db_id: ", p), err)
	}
	return err
}

func (p *OmniSciGetTableEpochArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_id", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:table_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TableID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:table_id: ", p), err)
	}
	return err
}

func (p *OmniSciGetTableEpochArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetTableEpochArgs(%+v)", *p)
}

// Attributes:
//  - Success
type OmniSciGetTableEpochResult struct {
	Success *int32 `thrift:"success,0" json:"success,omitempty"`
}

func NewOmniSciGetTableEpochResult() *OmniSciGetTableEpochResult {
	return &OmniSciGetTableEpochResult{}
}

var OmniSciGetTableEpochResult_Success_DEFAULT int32

func (p *OmniSciGetTableEpochResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return OmniSciGetTableEpochResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *OmniSciGetTableEpochResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetTableEpochResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetTableEpochResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *OmniSciGetTableEpochResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_epoch_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetTableEpochResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetTableEpochResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetTableEpochResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
type OmniSciGetTableEpochByNameArgs struct {
	Session   TSessionId `thrift:"session,1" json:"session"`
	TableName string     `thrift:"table_name,2" json:"table_name"`
}

func NewOmniSciGetTableEpochByNameArgs() *OmniSciGetTableEpochByNameArgs {
	return &OmniSciGetTableEpochByNameArgs{}
}

func (p *OmniSciGetTableEpochByNameArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciGetTableEpochByNameArgs) GetTableName() string {
	return p.TableName
}
func (p *OmniSciGetTableEpochByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetTableEpochByNameArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetTableEpochByNameArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *OmniSciGetTableEpochByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_epoch_by_name_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetTableEpochByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetTableEpochByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err)
	}
	return err
}

func (p *OmniSciGetTableEpochByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetTableEpochByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type OmniSciGetTableEpochByNameResult struct {
	Success *int32 `thrift:"success,0" json:"success,omitempty"`
}

func NewOmniSciGetTableEpochByNameResult() *OmniSciGetTableEpochByNameResult {
	return &OmniSciGetTableEpochByNameResult{}
}

var OmniSciGetTableEpochByNameResult_Success_DEFAULT int32

func (p *OmniSciGetTableEpochByNameResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return OmniSciGetTableEpochByNameResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *OmniSciGetTableEpochByNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetTableEpochByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetTableEpochByNameResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *OmniSciGetTableEpochByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_epoch_by_name_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetTableEpochByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetTableEpochByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetTableEpochByNameResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DbID
//  - TableID
type OmniSciGetTableEpochsArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
	DbID    int32      `thrift:"db_id,2" json:"db_id"`
	TableID int32      `thrift:"table_id,3" json:"table_id"`
}

func NewOmniSciGetTableEpochsArgs() *OmniSciGetTableEpochsArgs {
	return &OmniSciGetTableEpochsArgs{}
}

func (p *OmniSciGetTableEpochsArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciGetTableEpochsArgs) GetDbID() int32 {
	return p.DbID
}

func (p *OmniSciGetTableEpochsArgs) GetTableID() int32 {
	return p.TableID
}
func (p *OmniSciGetTableEpochsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetTableEpochsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetTableEpochsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DbID = v
	}
	return nil
}

func (p *OmniSciGetTableEpochsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TableID = v
	}
	return nil
}

func (p *OmniSciGetTableEpochsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_epochs_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetTableEpochsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetTableEpochsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:db_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DbID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:db_id: ", p), err)
	}
	return err
}

func (p *OmniSciGetTableEpochsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_id", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:table_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TableID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:table_id: ", p), err)
	}
	return err
}

func (p *OmniSciGetTableEpochsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetTableEpochsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type OmniSciGetTableEpochsResult struct {
	Success []*TTableEpochInfo `thrift:"success,0" json:"success,omitempty"`
}

func NewOmniSciGetTableEpochsResult() *OmniSciGetTableEpochsResult {
	return &OmniSciGetTableEpochsResult{}
}

var OmniSciGetTableEpochsResult_Success_DEFAULT []*TTableEpochInfo

func (p *OmniSciGetTableEpochsResult) GetSuccess() []*TTableEpochInfo {
	return p.Success
}
func (p *OmniSciGetTableEpochsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetTableEpochsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetTableEpochsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TTableEpochInfo, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem222 := &TTableEpochInfo{}
		if err := _elem222.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem222), err)
		}
		p.Success = append(p.Success, _elem222)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciGetTableEpochsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_epochs_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetTableEpochsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetTableEpochsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetTableEpochsResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DbID
//  - TableEpochs
type OmniSciSetTableEpochsArgs struct {
	Session     TSessionId         `thrift:"session,1" json:"session"`
	DbID        int32              `thrift:"db_id,2" json:"db_id"`
	TableEpochs []*TTableEpochInfo `thrift:"table_epochs,3" json:"table_epochs"`
}

func NewOmniSciSetTableEpochsArgs() *OmniSciSetTableEpochsArgs {
	return &OmniSciSetTableEpochsArgs{}
}

func (p *OmniSciSetTableEpochsArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciSetTableEpochsArgs) GetDbID() int32 {
	return p.DbID
}

func (p *OmniSciSetTableEpochsArgs) GetTableEpochs() []*TTableEpochInfo {
	return p.TableEpochs
}
func (p *OmniSciSetTableEpochsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciSetTableEpochsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciSetTableEpochsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DbID = v
	}
	return nil
}

func (p *OmniSciSetTableEpochsArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TTableEpochInfo, 0, size)
	p.TableEpochs = tSlice
	for i := 0; i < size; i++ {
		_elem223 := &TTableEpochInfo{}
		if err := _elem223.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem223), err)
		}
		p.TableEpochs = append(p.TableEpochs, _elem223)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciSetTableEpochsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("set_table_epochs_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciSetTableEpochsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciSetTableEpochsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:db_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DbID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:db_id: ", p), err)
	}
	return err
}

func (p *OmniSciSetTableEpochsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_epochs", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:table_epochs: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TableEpochs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.TableEpochs {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:table_epochs: ", p), err)
	}
	return err
}

func (p *OmniSciSetTableEpochsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciSetTableEpochsArgs(%+v)", *p)
}

type OmniSciSetTableEpochsResult struct {
}

func NewOmniSciSetTableEpochsResult() *OmniSciSetTableEpochsResult {
	return &OmniSciSetTableEpochsResult{}
}

func (p *OmniSciSetTableEpochsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciSetTableEpochsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("set_table_epochs_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciSetTableEpochsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciSetTableEpochsResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetSessionInfoArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
}

func NewOmniSciGetSessionInfoArgs() *OmniSciGetSessionInfoArgs {
	return &OmniSciGetSessionInfoArgs{}
}

func (p *OmniSciGetSessionInfoArgs) GetSession() TSessionId {
	return p.Session
}
func (p *OmniSciGetSessionInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetSessionInfoArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetSessionInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_session_info_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetSessionInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetSessionInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetSessionInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetSessionInfoResult struct {
	Success *TSessionInfo      `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetSessionInfoResult() *OmniSciGetSessionInfoResult {
	return &OmniSciGetSessionInfoResult{}
}

var OmniSciGetSessionInfoResult_Success_DEFAULT *TSessionInfo

func (p *OmniSciGetSessionInfoResult) GetSuccess() *TSessionInfo {
	if !p.IsSetSuccess() {
		return OmniSciGetSessionInfoResult_Success_DEFAULT
	}
	return p.Success
}

var OmniSciGetSessionInfoResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetSessionInfoResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetSessionInfoResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetSessionInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetSessionInfoResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetSessionInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetSessionInfoResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TSessionInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *OmniSciGetSessionInfoResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetSessionInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_session_info_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetSessionInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetSessionInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetSessionInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetSessionInfoResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Query
//  - ColumnFormat
//  - Nonce
//  - FirstN
//  - AtMostN
type OmniSciSqlExecuteArgs struct {
	Session      TSessionId `thrift:"session,1" json:"session"`
	Query        string     `thrift:"query,2" json:"query"`
	ColumnFormat bool       `thrift:"column_format,3" json:"column_format"`
	Nonce        string     `thrift:"nonce,4" json:"nonce"`
	FirstN       int32      `thrift:"first_n,5" json:"first_n"`
	AtMostN      int32      `thrift:"at_most_n,6" json:"at_most_n"`
}

func NewOmniSciSqlExecuteArgs() *OmniSciSqlExecuteArgs {
	return &OmniSciSqlExecuteArgs{
		FirstN: -1,

		AtMostN: -1,
	}
}

func (p *OmniSciSqlExecuteArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciSqlExecuteArgs) GetQuery() string {
	return p.Query
}

func (p *OmniSciSqlExecuteArgs) GetColumnFormat() bool {
	return p.ColumnFormat
}

func (p *OmniSciSqlExecuteArgs) GetNonce() string {
	return p.Nonce
}

func (p *OmniSciSqlExecuteArgs) GetFirstN() int32 {
	return p.FirstN
}

func (p *OmniSciSqlExecuteArgs) GetAtMostN() int32 {
	return p.AtMostN
}
func (p *OmniSciSqlExecuteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciSqlExecuteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciSqlExecuteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Query = v
	}
	return nil
}

func (p *OmniSciSqlExecuteArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ColumnFormat = v
	}
	return nil
}

func (p *OmniSciSqlExecuteArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Nonce = v
	}
	return nil
}

func (p *OmniSciSqlExecuteArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.FirstN = v
	}
	return nil
}

func (p *OmniSciSqlExecuteArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.AtMostN = v
	}
	return nil
}

func (p *OmniSciSqlExecuteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sql_execute_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciSqlExecuteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciSqlExecuteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query: ", p), err)
	}
	if err := oprot.WriteString(string(p.Query)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.query (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query: ", p), err)
	}
	return err
}

func (p *OmniSciSqlExecuteArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("column_format", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:column_format: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.ColumnFormat)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.column_format (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:column_format: ", p), err)
	}
	return err
}

func (p *OmniSciSqlExecuteArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nonce: ", p), err)
	}
	if err := oprot.WriteString(string(p.Nonce)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nonce (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nonce: ", p), err)
	}
	return err
}

func (p *OmniSciSqlExecuteArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("first_n", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:first_n: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FirstN)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.first_n (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:first_n: ", p), err)
	}
	return err
}

func (p *OmniSciSqlExecuteArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("at_most_n", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:at_most_n: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AtMostN)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.at_most_n (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:at_most_n: ", p), err)
	}
	return err
}

func (p *OmniSciSqlExecuteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciSqlExecuteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciSqlExecuteResult struct {
	Success *TQueryResult_     `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciSqlExecuteResult() *OmniSciSqlExecuteResult {
	return &OmniSciSqlExecuteResult{}
}

var OmniSciSqlExecuteResult_Success_DEFAULT *TQueryResult_

func (p *OmniSciSqlExecuteResult) GetSuccess() *TQueryResult_ {
	if !p.IsSetSuccess() {
		return OmniSciSqlExecuteResult_Success_DEFAULT
	}
	return p.Success
}

var OmniSciSqlExecuteResult_E_DEFAULT *TOmniSciException

func (p *OmniSciSqlExecuteResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciSqlExecuteResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciSqlExecuteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciSqlExecuteResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciSqlExecuteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciSqlExecuteResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TQueryResult_{
		Success: true,

		QueryType: 0,
	}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *OmniSciSqlExecuteResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciSqlExecuteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sql_execute_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciSqlExecuteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciSqlExecuteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciSqlExecuteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciSqlExecuteResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Query
//  - DeviceType
//  - DeviceID
//  - FirstN
//  - TransportMethod
type OmniSciSqlExecuteDfArgs struct {
	Session         TSessionId         `thrift:"session,1" json:"session"`
	Query           string             `thrift:"query,2" json:"query"`
	DeviceType      common.TDeviceType `thrift:"device_type,3" json:"device_type"`
	DeviceID        int32              `thrift:"device_id,4" json:"device_id"`
	FirstN          int32              `thrift:"first_n,5" json:"first_n"`
	TransportMethod TArrowTransport    `thrift:"transport_method,6" json:"transport_method"`
}

func NewOmniSciSqlExecuteDfArgs() *OmniSciSqlExecuteDfArgs {
	return &OmniSciSqlExecuteDfArgs{
		FirstN: -1,
	}
}

func (p *OmniSciSqlExecuteDfArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciSqlExecuteDfArgs) GetQuery() string {
	return p.Query
}

func (p *OmniSciSqlExecuteDfArgs) GetDeviceType() common.TDeviceType {
	return p.DeviceType
}

func (p *OmniSciSqlExecuteDfArgs) GetDeviceID() int32 {
	return p.DeviceID
}

func (p *OmniSciSqlExecuteDfArgs) GetFirstN() int32 {
	return p.FirstN
}

func (p *OmniSciSqlExecuteDfArgs) GetTransportMethod() TArrowTransport {
	return p.TransportMethod
}
func (p *OmniSciSqlExecuteDfArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciSqlExecuteDfArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciSqlExecuteDfArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Query = v
	}
	return nil
}

func (p *OmniSciSqlExecuteDfArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := common.TDeviceType(v)
		p.DeviceType = temp
	}
	return nil
}

func (p *OmniSciSqlExecuteDfArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.DeviceID = v
	}
	return nil
}

func (p *OmniSciSqlExecuteDfArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.FirstN = v
	}
	return nil
}

func (p *OmniSciSqlExecuteDfArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := TArrowTransport(v)
		p.TransportMethod = temp
	}
	return nil
}

func (p *OmniSciSqlExecuteDfArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sql_execute_df_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciSqlExecuteDfArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciSqlExecuteDfArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query: ", p), err)
	}
	if err := oprot.WriteString(string(p.Query)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.query (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query: ", p), err)
	}
	return err
}

func (p *OmniSciSqlExecuteDfArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("device_type", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:device_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DeviceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.device_type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:device_type: ", p), err)
	}
	return err
}

func (p *OmniSciSqlExecuteDfArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("device_id", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:device_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DeviceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.device_id (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:device_id: ", p), err)
	}
	return err
}

func (p *OmniSciSqlExecuteDfArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("first_n", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:first_n: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FirstN)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.first_n (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:first_n: ", p), err)
	}
	return err
}

func (p *OmniSciSqlExecuteDfArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("transport_method", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:transport_method: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TransportMethod)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.transport_method (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:transport_method: ", p), err)
	}
	return err
}

func (p *OmniSciSqlExecuteDfArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciSqlExecuteDfArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciSqlExecuteDfResult struct {
	Success *TDataFrame        `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciSqlExecuteDfResult() *OmniSciSqlExecuteDfResult {
	return &OmniSciSqlExecuteDfResult{}
}

var OmniSciSqlExecuteDfResult_Success_DEFAULT *TDataFrame

func (p *OmniSciSqlExecuteDfResult) GetSuccess() *TDataFrame {
	if !p.IsSetSuccess() {
		return OmniSciSqlExecuteDfResult_Success_DEFAULT
	}
	return p.Success
}

var OmniSciSqlExecuteDfResult_E_DEFAULT *TOmniSciException

func (p *OmniSciSqlExecuteDfResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciSqlExecuteDfResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciSqlExecuteDfResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciSqlExecuteDfResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciSqlExecuteDfResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciSqlExecuteDfResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TDataFrame{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *OmniSciSqlExecuteDfResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciSqlExecuteDfResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sql_execute_df_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciSqlExecuteDfResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciSqlExecuteDfResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciSqlExecuteDfResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciSqlExecuteDfResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Query
//  - DeviceID
//  - FirstN
type OmniSciSqlExecuteGdfArgs struct {
	Session  TSessionId `thrift:"session,1" json:"session"`
	Query    string     `thrift:"query,2" json:"query"`
	DeviceID int32      `thrift:"device_id,3" json:"device_id"`
	FirstN   int32      `thrift:"first_n,4" json:"first_n"`
}

func NewOmniSciSqlExecuteGdfArgs() *OmniSciSqlExecuteGdfArgs {
	return &OmniSciSqlExecuteGdfArgs{
		FirstN: -1,
	}
}

func (p *OmniSciSqlExecuteGdfArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciSqlExecuteGdfArgs) GetQuery() string {
	return p.Query
}

func (p *OmniSciSqlExecuteGdfArgs) GetDeviceID() int32 {
	return p.DeviceID
}

func (p *OmniSciSqlExecuteGdfArgs) GetFirstN() int32 {
	return p.FirstN
}
func (p *OmniSciSqlExecuteGdfArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciSqlExecuteGdfArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciSqlExecuteGdfArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Query = v
	}
	return nil
}

func (p *OmniSciSqlExecuteGdfArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DeviceID = v
	}
	return nil
}

func (p *OmniSciSqlExecuteGdfArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.FirstN = v
	}
	return nil
}

func (p *OmniSciSqlExecuteGdfArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sql_execute_gdf_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciSqlExecuteGdfArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciSqlExecuteGdfArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query: ", p), err)
	}
	if err := oprot.WriteString(string(p.Query)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.query (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query: ", p), err)
	}
	return err
}

func (p *OmniSciSqlExecuteGdfArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("device_id", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:device_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DeviceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.device_id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:device_id: ", p), err)
	}
	return err
}

func (p *OmniSciSqlExecuteGdfArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("first_n", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:first_n: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FirstN)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.first_n (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:first_n: ", p), err)
	}
	return err
}

func (p *OmniSciSqlExecuteGdfArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciSqlExecuteGdfArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciSqlExecuteGdfResult struct {
	Success *TDataFrame        `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciSqlExecuteGdfResult() *OmniSciSqlExecuteGdfResult {
	return &OmniSciSqlExecuteGdfResult{}
}

var OmniSciSqlExecuteGdfResult_Success_DEFAULT *TDataFrame

func (p *OmniSciSqlExecuteGdfResult) GetSuccess() *TDataFrame {
	if !p.IsSetSuccess() {
		return OmniSciSqlExecuteGdfResult_Success_DEFAULT
	}
	return p.Success
}

var OmniSciSqlExecuteGdfResult_E_DEFAULT *TOmniSciException

func (p *OmniSciSqlExecuteGdfResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciSqlExecuteGdfResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciSqlExecuteGdfResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciSqlExecuteGdfResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciSqlExecuteGdfResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciSqlExecuteGdfResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TDataFrame{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *OmniSciSqlExecuteGdfResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciSqlExecuteGdfResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sql_execute_gdf_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciSqlExecuteGdfResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciSqlExecuteGdfResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciSqlExecuteGdfResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciSqlExecuteGdfResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Df
//  - DeviceType
//  - DeviceID
type OmniSciDeallocateDfArgs struct {
	Session    TSessionId         `thrift:"session,1" json:"session"`
	Df         *TDataFrame        `thrift:"df,2" json:"df"`
	DeviceType common.TDeviceType `thrift:"device_type,3" json:"device_type"`
	DeviceID   int32              `thrift:"device_id,4" json:"device_id"`
}

func NewOmniSciDeallocateDfArgs() *OmniSciDeallocateDfArgs {
	return &OmniSciDeallocateDfArgs{}
}

func (p *OmniSciDeallocateDfArgs) GetSession() TSessionId {
	return p.Session
}

var OmniSciDeallocateDfArgs_Df_DEFAULT *TDataFrame

func (p *OmniSciDeallocateDfArgs) GetDf() *TDataFrame {
	if !p.IsSetDf() {
		return OmniSciDeallocateDfArgs_Df_DEFAULT
	}
	return p.Df
}

func (p *OmniSciDeallocateDfArgs) GetDeviceType() common.TDeviceType {
	return p.DeviceType
}

func (p *OmniSciDeallocateDfArgs) GetDeviceID() int32 {
	return p.DeviceID
}
func (p *OmniSciDeallocateDfArgs) IsSetDf() bool {
	return p.Df != nil
}

func (p *OmniSciDeallocateDfArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciDeallocateDfArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciDeallocateDfArgs) readField2(iprot thrift.TProtocol) error {
	p.Df = &TDataFrame{}
	if err := p.Df.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Df), err)
	}
	return nil
}

func (p *OmniSciDeallocateDfArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := common.TDeviceType(v)
		p.DeviceType = temp
	}
	return nil
}

func (p *OmniSciDeallocateDfArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.DeviceID = v
	}
	return nil
}

func (p *OmniSciDeallocateDfArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deallocate_df_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciDeallocateDfArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciDeallocateDfArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("df", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:df: ", p), err)
	}
	if err := p.Df.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Df), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:df: ", p), err)
	}
	return err
}

func (p *OmniSciDeallocateDfArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("device_type", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:device_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DeviceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.device_type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:device_type: ", p), err)
	}
	return err
}

func (p *OmniSciDeallocateDfArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("device_id", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:device_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DeviceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.device_id (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:device_id: ", p), err)
	}
	return err
}

func (p *OmniSciDeallocateDfArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciDeallocateDfArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciDeallocateDfResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciDeallocateDfResult() *OmniSciDeallocateDfResult {
	return &OmniSciDeallocateDfResult{}
}

var OmniSciDeallocateDfResult_E_DEFAULT *TOmniSciException

func (p *OmniSciDeallocateDfResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciDeallocateDfResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciDeallocateDfResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciDeallocateDfResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciDeallocateDfResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciDeallocateDfResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deallocate_df_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciDeallocateDfResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciDeallocateDfResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciDeallocateDfResult(%+v)", *p)
}

// Attributes:
//  - QuerySession
//  - InterruptSession
type OmniSciInterruptArgs struct {
	QuerySession     TSessionId `thrift:"query_session,1" json:"query_session"`
	InterruptSession TSessionId `thrift:"interrupt_session,2" json:"interrupt_session"`
}

func NewOmniSciInterruptArgs() *OmniSciInterruptArgs {
	return &OmniSciInterruptArgs{}
}

func (p *OmniSciInterruptArgs) GetQuerySession() TSessionId {
	return p.QuerySession
}

func (p *OmniSciInterruptArgs) GetInterruptSession() TSessionId {
	return p.InterruptSession
}
func (p *OmniSciInterruptArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciInterruptArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.QuerySession = temp
	}
	return nil
}

func (p *OmniSciInterruptArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TSessionId(v)
		p.InterruptSession = temp
	}
	return nil
}

func (p *OmniSciInterruptArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("interrupt_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciInterruptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query_session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query_session: ", p), err)
	}
	if err := oprot.WriteString(string(p.QuerySession)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.query_session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query_session: ", p), err)
	}
	return err
}

func (p *OmniSciInterruptArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("interrupt_session", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:interrupt_session: ", p), err)
	}
	if err := oprot.WriteString(string(p.InterruptSession)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.interrupt_session (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:interrupt_session: ", p), err)
	}
	return err
}

func (p *OmniSciInterruptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciInterruptArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciInterruptResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciInterruptResult() *OmniSciInterruptResult {
	return &OmniSciInterruptResult{}
}

var OmniSciInterruptResult_E_DEFAULT *TOmniSciException

func (p *OmniSciInterruptResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciInterruptResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciInterruptResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciInterruptResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciInterruptResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciInterruptResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("interrupt_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciInterruptResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciInterruptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciInterruptResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Query
type OmniSciSqlValidateArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
	Query   string     `thrift:"query,2" json:"query"`
}

func NewOmniSciSqlValidateArgs() *OmniSciSqlValidateArgs {
	return &OmniSciSqlValidateArgs{}
}

func (p *OmniSciSqlValidateArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciSqlValidateArgs) GetQuery() string {
	return p.Query
}
func (p *OmniSciSqlValidateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciSqlValidateArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciSqlValidateArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Query = v
	}
	return nil
}

func (p *OmniSciSqlValidateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sql_validate_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciSqlValidateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciSqlValidateArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query: ", p), err)
	}
	if err := oprot.WriteString(string(p.Query)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.query (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query: ", p), err)
	}
	return err
}

func (p *OmniSciSqlValidateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciSqlValidateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciSqlValidateResult struct {
	Success TRowDescriptor     `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciSqlValidateResult() *OmniSciSqlValidateResult {
	return &OmniSciSqlValidateResult{}
}

var OmniSciSqlValidateResult_Success_DEFAULT TRowDescriptor

func (p *OmniSciSqlValidateResult) GetSuccess() TRowDescriptor {
	return p.Success
}

var OmniSciSqlValidateResult_E_DEFAULT *TOmniSciException

func (p *OmniSciSqlValidateResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciSqlValidateResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciSqlValidateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciSqlValidateResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciSqlValidateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciSqlValidateResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(TRowDescriptor, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem224 := &TColumnType{}
		if err := _elem224.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem224), err)
		}
		p.Success = append(p.Success, _elem224)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciSqlValidateResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciSqlValidateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sql_validate_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciSqlValidateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciSqlValidateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciSqlValidateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciSqlValidateResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Sql
//  - Cursor
type OmniSciGetCompletionHintsArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
	Sql     string     `thrift:"sql,2" json:"sql"`
	Cursor  int32      `thrift:"cursor,3" json:"cursor"`
}

func NewOmniSciGetCompletionHintsArgs() *OmniSciGetCompletionHintsArgs {
	return &OmniSciGetCompletionHintsArgs{}
}

func (p *OmniSciGetCompletionHintsArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciGetCompletionHintsArgs) GetSql() string {
	return p.Sql
}

func (p *OmniSciGetCompletionHintsArgs) GetCursor() int32 {
	return p.Cursor
}
func (p *OmniSciGetCompletionHintsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetCompletionHintsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetCompletionHintsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Sql = v
	}
	return nil
}

func (p *OmniSciGetCompletionHintsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Cursor = v
	}
	return nil
}

func (p *OmniSciGetCompletionHintsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_completion_hints_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetCompletionHintsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetCompletionHintsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sql", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sql: ", p), err)
	}
	if err := oprot.WriteString(string(p.Sql)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sql (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sql: ", p), err)
	}
	return err
}

func (p *OmniSciGetCompletionHintsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cursor", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cursor: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Cursor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cursor (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cursor: ", p), err)
	}
	return err
}

func (p *OmniSciGetCompletionHintsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetCompletionHintsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetCompletionHintsResult struct {
	Success []*completion_hints.TCompletionHint `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException                  `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetCompletionHintsResult() *OmniSciGetCompletionHintsResult {
	return &OmniSciGetCompletionHintsResult{}
}

var OmniSciGetCompletionHintsResult_Success_DEFAULT []*completion_hints.TCompletionHint

func (p *OmniSciGetCompletionHintsResult) GetSuccess() []*completion_hints.TCompletionHint {
	return p.Success
}

var OmniSciGetCompletionHintsResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetCompletionHintsResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetCompletionHintsResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetCompletionHintsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetCompletionHintsResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetCompletionHintsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetCompletionHintsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*completion_hints.TCompletionHint, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem225 := &completion_hints.TCompletionHint{}
		if err := _elem225.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem225), err)
		}
		p.Success = append(p.Success, _elem225)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciGetCompletionHintsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetCompletionHintsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_completion_hints_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetCompletionHintsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetCompletionHintsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetCompletionHintsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetCompletionHintsResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Mode
type OmniSciSetExecutionModeArgs struct {
	Session TSessionId   `thrift:"session,1" json:"session"`
	Mode    TExecuteMode `thrift:"mode,2" json:"mode"`
}

func NewOmniSciSetExecutionModeArgs() *OmniSciSetExecutionModeArgs {
	return &OmniSciSetExecutionModeArgs{}
}

func (p *OmniSciSetExecutionModeArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciSetExecutionModeArgs) GetMode() TExecuteMode {
	return p.Mode
}
func (p *OmniSciSetExecutionModeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciSetExecutionModeArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciSetExecutionModeArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TExecuteMode(v)
		p.Mode = temp
	}
	return nil
}

func (p *OmniSciSetExecutionModeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("set_execution_mode_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciSetExecutionModeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciSetExecutionModeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mode", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Mode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mode (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mode: ", p), err)
	}
	return err
}

func (p *OmniSciSetExecutionModeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciSetExecutionModeArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciSetExecutionModeResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciSetExecutionModeResult() *OmniSciSetExecutionModeResult {
	return &OmniSciSetExecutionModeResult{}
}

var OmniSciSetExecutionModeResult_E_DEFAULT *TOmniSciException

func (p *OmniSciSetExecutionModeResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciSetExecutionModeResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciSetExecutionModeResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciSetExecutionModeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciSetExecutionModeResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciSetExecutionModeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("set_execution_mode_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciSetExecutionModeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciSetExecutionModeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciSetExecutionModeResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - WidgetID
//  - VegaJSON
//  - CompressionLevel
//  - Nonce
type OmniSciRenderVegaArgs struct {
	Session          TSessionId `thrift:"session,1" json:"session"`
	WidgetID         int64      `thrift:"widget_id,2" json:"widget_id"`
	VegaJSON         string     `thrift:"vega_json,3" json:"vega_json"`
	CompressionLevel int32      `thrift:"compression_level,4" json:"compression_level"`
	Nonce            string     `thrift:"nonce,5" json:"nonce"`
}

func NewOmniSciRenderVegaArgs() *OmniSciRenderVegaArgs {
	return &OmniSciRenderVegaArgs{}
}

func (p *OmniSciRenderVegaArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciRenderVegaArgs) GetWidgetID() int64 {
	return p.WidgetID
}

func (p *OmniSciRenderVegaArgs) GetVegaJSON() string {
	return p.VegaJSON
}

func (p *OmniSciRenderVegaArgs) GetCompressionLevel() int32 {
	return p.CompressionLevel
}

func (p *OmniSciRenderVegaArgs) GetNonce() string {
	return p.Nonce
}
func (p *OmniSciRenderVegaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciRenderVegaArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciRenderVegaArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.WidgetID = v
	}
	return nil
}

func (p *OmniSciRenderVegaArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.VegaJSON = v
	}
	return nil
}

func (p *OmniSciRenderVegaArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.CompressionLevel = v
	}
	return nil
}

func (p *OmniSciRenderVegaArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Nonce = v
	}
	return nil
}

func (p *OmniSciRenderVegaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("render_vega_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciRenderVegaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciRenderVegaArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("widget_id", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:widget_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.WidgetID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.widget_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:widget_id: ", p), err)
	}
	return err
}

func (p *OmniSciRenderVegaArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vega_json", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vega_json: ", p), err)
	}
	if err := oprot.WriteString(string(p.VegaJSON)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vega_json (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vega_json: ", p), err)
	}
	return err
}

func (p *OmniSciRenderVegaArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("compression_level", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:compression_level: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CompressionLevel)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.compression_level (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:compression_level: ", p), err)
	}
	return err
}

func (p *OmniSciRenderVegaArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nonce: ", p), err)
	}
	if err := oprot.WriteString(string(p.Nonce)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nonce (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nonce: ", p), err)
	}
	return err
}

func (p *OmniSciRenderVegaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciRenderVegaArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciRenderVegaResult struct {
	Success *TRenderResult_    `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciRenderVegaResult() *OmniSciRenderVegaResult {
	return &OmniSciRenderVegaResult{}
}

var OmniSciRenderVegaResult_Success_DEFAULT *TRenderResult_

func (p *OmniSciRenderVegaResult) GetSuccess() *TRenderResult_ {
	if !p.IsSetSuccess() {
		return OmniSciRenderVegaResult_Success_DEFAULT
	}
	return p.Success
}

var OmniSciRenderVegaResult_E_DEFAULT *TOmniSciException

func (p *OmniSciRenderVegaResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciRenderVegaResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciRenderVegaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciRenderVegaResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciRenderVegaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciRenderVegaResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TRenderResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *OmniSciRenderVegaResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciRenderVegaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("render_vega_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciRenderVegaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciRenderVegaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciRenderVegaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciRenderVegaResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - WidgetID
//  - Pixel
//  - TableColNames
//  - ColumnFormat
//  - PixelRadius
//  - Nonce
type OmniSciGetResultRowForPixelArgs struct {
	Session       TSessionId          `thrift:"session,1" json:"session"`
	WidgetID      int64               `thrift:"widget_id,2" json:"widget_id"`
	Pixel         *TPixel             `thrift:"pixel,3" json:"pixel"`
	TableColNames map[string][]string `thrift:"table_col_names,4" json:"table_col_names"`
	ColumnFormat  bool                `thrift:"column_format,5" json:"column_format"`
	PixelRadius   int32               `thrift:"pixelRadius,6" json:"pixelRadius"`
	Nonce         string              `thrift:"nonce,7" json:"nonce"`
}

func NewOmniSciGetResultRowForPixelArgs() *OmniSciGetResultRowForPixelArgs {
	return &OmniSciGetResultRowForPixelArgs{}
}

func (p *OmniSciGetResultRowForPixelArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciGetResultRowForPixelArgs) GetWidgetID() int64 {
	return p.WidgetID
}

var OmniSciGetResultRowForPixelArgs_Pixel_DEFAULT *TPixel

func (p *OmniSciGetResultRowForPixelArgs) GetPixel() *TPixel {
	if !p.IsSetPixel() {
		return OmniSciGetResultRowForPixelArgs_Pixel_DEFAULT
	}
	return p.Pixel
}

func (p *OmniSciGetResultRowForPixelArgs) GetTableColNames() map[string][]string {
	return p.TableColNames
}

func (p *OmniSciGetResultRowForPixelArgs) GetColumnFormat() bool {
	return p.ColumnFormat
}

func (p *OmniSciGetResultRowForPixelArgs) GetPixelRadius() int32 {
	return p.PixelRadius
}

func (p *OmniSciGetResultRowForPixelArgs) GetNonce() string {
	return p.Nonce
}
func (p *OmniSciGetResultRowForPixelArgs) IsSetPixel() bool {
	return p.Pixel != nil
}

func (p *OmniSciGetResultRowForPixelArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetResultRowForPixelArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetResultRowForPixelArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.WidgetID = v
	}
	return nil
}

func (p *OmniSciGetResultRowForPixelArgs) readField3(iprot thrift.TProtocol) error {
	p.Pixel = &TPixel{}
	if err := p.Pixel.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pixel), err)
	}
	return nil
}

func (p *OmniSciGetResultRowForPixelArgs) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]string, size)
	p.TableColNames = tMap
	for i := 0; i < size; i++ {
		var _key226 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key226 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]string, 0, size)
		_val227 := tSlice
		for i := 0; i < size; i++ {
			var _elem228 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem228 = v
			}
			_val227 = append(_val227, _elem228)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.TableColNames[_key226] = _val227
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *OmniSciGetResultRowForPixelArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ColumnFormat = v
	}
	return nil
}

func (p *OmniSciGetResultRowForPixelArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.PixelRadius = v
	}
	return nil
}

func (p *OmniSciGetResultRowForPixelArgs) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Nonce = v
	}
	return nil
}

func (p *OmniSciGetResultRowForPixelArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_result_row_for_pixel_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetResultRowForPixelArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetResultRowForPixelArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("widget_id", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:widget_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.WidgetID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.widget_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:widget_id: ", p), err)
	}
	return err
}

func (p *OmniSciGetResultRowForPixelArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pixel", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pixel: ", p), err)
	}
	if err := p.Pixel.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pixel), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pixel: ", p), err)
	}
	return err
}

func (p *OmniSciGetResultRowForPixelArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_col_names", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:table_col_names: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.TableColNames)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.TableColNames {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:table_col_names: ", p), err)
	}
	return err
}

func (p *OmniSciGetResultRowForPixelArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("column_format", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:column_format: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.ColumnFormat)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.column_format (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:column_format: ", p), err)
	}
	return err
}

func (p *OmniSciGetResultRowForPixelArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pixelRadius", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:pixelRadius: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PixelRadius)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pixelRadius (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:pixelRadius: ", p), err)
	}
	return err
}

func (p *OmniSciGetResultRowForPixelArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:nonce: ", p), err)
	}
	if err := oprot.WriteString(string(p.Nonce)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nonce (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:nonce: ", p), err)
	}
	return err
}

func (p *OmniSciGetResultRowForPixelArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetResultRowForPixelArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetResultRowForPixelResult struct {
	Success *TPixelTableRowResult_ `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException     `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetResultRowForPixelResult() *OmniSciGetResultRowForPixelResult {
	return &OmniSciGetResultRowForPixelResult{}
}

var OmniSciGetResultRowForPixelResult_Success_DEFAULT *TPixelTableRowResult_

func (p *OmniSciGetResultRowForPixelResult) GetSuccess() *TPixelTableRowResult_ {
	if !p.IsSetSuccess() {
		return OmniSciGetResultRowForPixelResult_Success_DEFAULT
	}
	return p.Success
}

var OmniSciGetResultRowForPixelResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetResultRowForPixelResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetResultRowForPixelResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetResultRowForPixelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetResultRowForPixelResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetResultRowForPixelResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetResultRowForPixelResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TPixelTableRowResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *OmniSciGetResultRowForPixelResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetResultRowForPixelResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_result_row_for_pixel_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetResultRowForPixelResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetResultRowForPixelResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetResultRowForPixelResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetResultRowForPixelResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DashboardID
type OmniSciGetDashboardArgs struct {
	Session     TSessionId `thrift:"session,1" json:"session"`
	DashboardID int32      `thrift:"dashboard_id,2" json:"dashboard_id"`
}

func NewOmniSciGetDashboardArgs() *OmniSciGetDashboardArgs {
	return &OmniSciGetDashboardArgs{}
}

func (p *OmniSciGetDashboardArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciGetDashboardArgs) GetDashboardID() int32 {
	return p.DashboardID
}
func (p *OmniSciGetDashboardArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetDashboardArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetDashboardArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DashboardID = v
	}
	return nil
}

func (p *OmniSciGetDashboardArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_dashboard_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetDashboardArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetDashboardArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dashboard_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dashboard_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DashboardID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dashboard_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dashboard_id: ", p), err)
	}
	return err
}

func (p *OmniSciGetDashboardArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetDashboardArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetDashboardResult struct {
	Success *TDashboard        `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetDashboardResult() *OmniSciGetDashboardResult {
	return &OmniSciGetDashboardResult{}
}

var OmniSciGetDashboardResult_Success_DEFAULT *TDashboard

func (p *OmniSciGetDashboardResult) GetSuccess() *TDashboard {
	if !p.IsSetSuccess() {
		return OmniSciGetDashboardResult_Success_DEFAULT
	}
	return p.Success
}

var OmniSciGetDashboardResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetDashboardResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetDashboardResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetDashboardResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetDashboardResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetDashboardResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetDashboardResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TDashboard{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *OmniSciGetDashboardResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetDashboardResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_dashboard_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetDashboardResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetDashboardResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetDashboardResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetDashboardResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetDashboardsArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
}

func NewOmniSciGetDashboardsArgs() *OmniSciGetDashboardsArgs {
	return &OmniSciGetDashboardsArgs{}
}

func (p *OmniSciGetDashboardsArgs) GetSession() TSessionId {
	return p.Session
}
func (p *OmniSciGetDashboardsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetDashboardsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetDashboardsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_dashboards_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetDashboardsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetDashboardsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetDashboardsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetDashboardsResult struct {
	Success []*TDashboard      `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetDashboardsResult() *OmniSciGetDashboardsResult {
	return &OmniSciGetDashboardsResult{}
}

var OmniSciGetDashboardsResult_Success_DEFAULT []*TDashboard

func (p *OmniSciGetDashboardsResult) GetSuccess() []*TDashboard {
	return p.Success
}

var OmniSciGetDashboardsResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetDashboardsResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetDashboardsResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetDashboardsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetDashboardsResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetDashboardsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetDashboardsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TDashboard, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem229 := &TDashboard{}
		if err := _elem229.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem229), err)
		}
		p.Success = append(p.Success, _elem229)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciGetDashboardsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetDashboardsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_dashboards_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetDashboardsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetDashboardsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetDashboardsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetDashboardsResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DashboardName
//  - DashboardState
//  - ImageHash
//  - DashboardMetadata
type OmniSciCreateDashboardArgs struct {
	Session           TSessionId `thrift:"session,1" json:"session"`
	DashboardName     string     `thrift:"dashboard_name,2" json:"dashboard_name"`
	DashboardState    string     `thrift:"dashboard_state,3" json:"dashboard_state"`
	ImageHash         string     `thrift:"image_hash,4" json:"image_hash"`
	DashboardMetadata string     `thrift:"dashboard_metadata,5" json:"dashboard_metadata"`
}

func NewOmniSciCreateDashboardArgs() *OmniSciCreateDashboardArgs {
	return &OmniSciCreateDashboardArgs{}
}

func (p *OmniSciCreateDashboardArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciCreateDashboardArgs) GetDashboardName() string {
	return p.DashboardName
}

func (p *OmniSciCreateDashboardArgs) GetDashboardState() string {
	return p.DashboardState
}

func (p *OmniSciCreateDashboardArgs) GetImageHash() string {
	return p.ImageHash
}

func (p *OmniSciCreateDashboardArgs) GetDashboardMetadata() string {
	return p.DashboardMetadata
}
func (p *OmniSciCreateDashboardArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciCreateDashboardArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciCreateDashboardArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DashboardName = v
	}
	return nil
}

func (p *OmniSciCreateDashboardArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DashboardState = v
	}
	return nil
}

func (p *OmniSciCreateDashboardArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ImageHash = v
	}
	return nil
}

func (p *OmniSciCreateDashboardArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.DashboardMetadata = v
	}
	return nil
}

func (p *OmniSciCreateDashboardArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_dashboard_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciCreateDashboardArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciCreateDashboardArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dashboard_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dashboard_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DashboardName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dashboard_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dashboard_name: ", p), err)
	}
	return err
}

func (p *OmniSciCreateDashboardArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dashboard_state", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dashboard_state: ", p), err)
	}
	if err := oprot.WriteString(string(p.DashboardState)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dashboard_state (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dashboard_state: ", p), err)
	}
	return err
}

func (p *OmniSciCreateDashboardArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("image_hash", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:image_hash: ", p), err)
	}
	if err := oprot.WriteString(string(p.ImageHash)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.image_hash (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:image_hash: ", p), err)
	}
	return err
}

func (p *OmniSciCreateDashboardArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dashboard_metadata", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:dashboard_metadata: ", p), err)
	}
	if err := oprot.WriteString(string(p.DashboardMetadata)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dashboard_metadata (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:dashboard_metadata: ", p), err)
	}
	return err
}

func (p *OmniSciCreateDashboardArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciCreateDashboardArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciCreateDashboardResult struct {
	Success *int32             `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciCreateDashboardResult() *OmniSciCreateDashboardResult {
	return &OmniSciCreateDashboardResult{}
}

var OmniSciCreateDashboardResult_Success_DEFAULT int32

func (p *OmniSciCreateDashboardResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return OmniSciCreateDashboardResult_Success_DEFAULT
	}
	return *p.Success
}

var OmniSciCreateDashboardResult_E_DEFAULT *TOmniSciException

func (p *OmniSciCreateDashboardResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciCreateDashboardResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciCreateDashboardResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciCreateDashboardResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciCreateDashboardResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciCreateDashboardResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *OmniSciCreateDashboardResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciCreateDashboardResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_dashboard_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciCreateDashboardResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciCreateDashboardResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciCreateDashboardResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciCreateDashboardResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DashboardID
//  - DashboardName
//  - DashboardOwner
//  - DashboardState
//  - ImageHash
//  - DashboardMetadata
type OmniSciReplaceDashboardArgs struct {
	Session           TSessionId `thrift:"session,1" json:"session"`
	DashboardID       int32      `thrift:"dashboard_id,2" json:"dashboard_id"`
	DashboardName     string     `thrift:"dashboard_name,3" json:"dashboard_name"`
	DashboardOwner    string     `thrift:"dashboard_owner,4" json:"dashboard_owner"`
	DashboardState    string     `thrift:"dashboard_state,5" json:"dashboard_state"`
	ImageHash         string     `thrift:"image_hash,6" json:"image_hash"`
	DashboardMetadata string     `thrift:"dashboard_metadata,7" json:"dashboard_metadata"`
}

func NewOmniSciReplaceDashboardArgs() *OmniSciReplaceDashboardArgs {
	return &OmniSciReplaceDashboardArgs{}
}

func (p *OmniSciReplaceDashboardArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciReplaceDashboardArgs) GetDashboardID() int32 {
	return p.DashboardID
}

func (p *OmniSciReplaceDashboardArgs) GetDashboardName() string {
	return p.DashboardName
}

func (p *OmniSciReplaceDashboardArgs) GetDashboardOwner() string {
	return p.DashboardOwner
}

func (p *OmniSciReplaceDashboardArgs) GetDashboardState() string {
	return p.DashboardState
}

func (p *OmniSciReplaceDashboardArgs) GetImageHash() string {
	return p.ImageHash
}

func (p *OmniSciReplaceDashboardArgs) GetDashboardMetadata() string {
	return p.DashboardMetadata
}
func (p *OmniSciReplaceDashboardArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciReplaceDashboardArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciReplaceDashboardArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DashboardID = v
	}
	return nil
}

func (p *OmniSciReplaceDashboardArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DashboardName = v
	}
	return nil
}

func (p *OmniSciReplaceDashboardArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.DashboardOwner = v
	}
	return nil
}

func (p *OmniSciReplaceDashboardArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.DashboardState = v
	}
	return nil
}

func (p *OmniSciReplaceDashboardArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ImageHash = v
	}
	return nil
}

func (p *OmniSciReplaceDashboardArgs) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.DashboardMetadata = v
	}
	return nil
}

func (p *OmniSciReplaceDashboardArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("replace_dashboard_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciReplaceDashboardArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciReplaceDashboardArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dashboard_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dashboard_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DashboardID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dashboard_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dashboard_id: ", p), err)
	}
	return err
}

func (p *OmniSciReplaceDashboardArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dashboard_name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dashboard_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DashboardName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dashboard_name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dashboard_name: ", p), err)
	}
	return err
}

func (p *OmniSciReplaceDashboardArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dashboard_owner", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dashboard_owner: ", p), err)
	}
	if err := oprot.WriteString(string(p.DashboardOwner)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dashboard_owner (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dashboard_owner: ", p), err)
	}
	return err
}

func (p *OmniSciReplaceDashboardArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dashboard_state", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:dashboard_state: ", p), err)
	}
	if err := oprot.WriteString(string(p.DashboardState)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dashboard_state (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:dashboard_state: ", p), err)
	}
	return err
}

func (p *OmniSciReplaceDashboardArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("image_hash", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:image_hash: ", p), err)
	}
	if err := oprot.WriteString(string(p.ImageHash)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.image_hash (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:image_hash: ", p), err)
	}
	return err
}

func (p *OmniSciReplaceDashboardArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dashboard_metadata", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dashboard_metadata: ", p), err)
	}
	if err := oprot.WriteString(string(p.DashboardMetadata)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dashboard_metadata (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dashboard_metadata: ", p), err)
	}
	return err
}

func (p *OmniSciReplaceDashboardArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciReplaceDashboardArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciReplaceDashboardResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciReplaceDashboardResult() *OmniSciReplaceDashboardResult {
	return &OmniSciReplaceDashboardResult{}
}

var OmniSciReplaceDashboardResult_E_DEFAULT *TOmniSciException

func (p *OmniSciReplaceDashboardResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciReplaceDashboardResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciReplaceDashboardResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciReplaceDashboardResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciReplaceDashboardResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciReplaceDashboardResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("replace_dashboard_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciReplaceDashboardResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciReplaceDashboardResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciReplaceDashboardResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DashboardID
type OmniSciDeleteDashboardArgs struct {
	Session     TSessionId `thrift:"session,1" json:"session"`
	DashboardID int32      `thrift:"dashboard_id,2" json:"dashboard_id"`
}

func NewOmniSciDeleteDashboardArgs() *OmniSciDeleteDashboardArgs {
	return &OmniSciDeleteDashboardArgs{}
}

func (p *OmniSciDeleteDashboardArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciDeleteDashboardArgs) GetDashboardID() int32 {
	return p.DashboardID
}
func (p *OmniSciDeleteDashboardArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciDeleteDashboardArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciDeleteDashboardArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DashboardID = v
	}
	return nil
}

func (p *OmniSciDeleteDashboardArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delete_dashboard_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciDeleteDashboardArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciDeleteDashboardArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dashboard_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dashboard_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DashboardID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dashboard_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dashboard_id: ", p), err)
	}
	return err
}

func (p *OmniSciDeleteDashboardArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciDeleteDashboardArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciDeleteDashboardResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciDeleteDashboardResult() *OmniSciDeleteDashboardResult {
	return &OmniSciDeleteDashboardResult{}
}

var OmniSciDeleteDashboardResult_E_DEFAULT *TOmniSciException

func (p *OmniSciDeleteDashboardResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciDeleteDashboardResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciDeleteDashboardResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciDeleteDashboardResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciDeleteDashboardResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciDeleteDashboardResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delete_dashboard_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciDeleteDashboardResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciDeleteDashboardResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciDeleteDashboardResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DashboardIds
//  - Groups
//  - Permissions
type OmniSciShareDashboardsArgs struct {
	Session      TSessionId             `thrift:"session,1" json:"session"`
	DashboardIds []int32                `thrift:"dashboard_ids,2" json:"dashboard_ids"`
	Groups       []string               `thrift:"groups,3" json:"groups"`
	Permissions  *TDashboardPermissions `thrift:"permissions,4" json:"permissions"`
}

func NewOmniSciShareDashboardsArgs() *OmniSciShareDashboardsArgs {
	return &OmniSciShareDashboardsArgs{}
}

func (p *OmniSciShareDashboardsArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciShareDashboardsArgs) GetDashboardIds() []int32 {
	return p.DashboardIds
}

func (p *OmniSciShareDashboardsArgs) GetGroups() []string {
	return p.Groups
}

var OmniSciShareDashboardsArgs_Permissions_DEFAULT *TDashboardPermissions

func (p *OmniSciShareDashboardsArgs) GetPermissions() *TDashboardPermissions {
	if !p.IsSetPermissions() {
		return OmniSciShareDashboardsArgs_Permissions_DEFAULT
	}
	return p.Permissions
}
func (p *OmniSciShareDashboardsArgs) IsSetPermissions() bool {
	return p.Permissions != nil
}

func (p *OmniSciShareDashboardsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciShareDashboardsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciShareDashboardsArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.DashboardIds = tSlice
	for i := 0; i < size; i++ {
		var _elem230 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem230 = v
		}
		p.DashboardIds = append(p.DashboardIds, _elem230)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciShareDashboardsArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Groups = tSlice
	for i := 0; i < size; i++ {
		var _elem231 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem231 = v
		}
		p.Groups = append(p.Groups, _elem231)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciShareDashboardsArgs) readField4(iprot thrift.TProtocol) error {
	p.Permissions = &TDashboardPermissions{}
	if err := p.Permissions.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Permissions), err)
	}
	return nil
}

func (p *OmniSciShareDashboardsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("share_dashboards_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciShareDashboardsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciShareDashboardsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dashboard_ids", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dashboard_ids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.DashboardIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.DashboardIds {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dashboard_ids: ", p), err)
	}
	return err
}

func (p *OmniSciShareDashboardsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groups", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groups: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Groups)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Groups {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groups: ", p), err)
	}
	return err
}

func (p *OmniSciShareDashboardsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("permissions", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:permissions: ", p), err)
	}
	if err := p.Permissions.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Permissions), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:permissions: ", p), err)
	}
	return err
}

func (p *OmniSciShareDashboardsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciShareDashboardsArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciShareDashboardsResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciShareDashboardsResult() *OmniSciShareDashboardsResult {
	return &OmniSciShareDashboardsResult{}
}

var OmniSciShareDashboardsResult_E_DEFAULT *TOmniSciException

func (p *OmniSciShareDashboardsResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciShareDashboardsResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciShareDashboardsResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciShareDashboardsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciShareDashboardsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciShareDashboardsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("share_dashboards_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciShareDashboardsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciShareDashboardsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciShareDashboardsResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DashboardIds
type OmniSciDeleteDashboardsArgs struct {
	Session      TSessionId `thrift:"session,1" json:"session"`
	DashboardIds []int32    `thrift:"dashboard_ids,2" json:"dashboard_ids"`
}

func NewOmniSciDeleteDashboardsArgs() *OmniSciDeleteDashboardsArgs {
	return &OmniSciDeleteDashboardsArgs{}
}

func (p *OmniSciDeleteDashboardsArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciDeleteDashboardsArgs) GetDashboardIds() []int32 {
	return p.DashboardIds
}
func (p *OmniSciDeleteDashboardsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciDeleteDashboardsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciDeleteDashboardsArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.DashboardIds = tSlice
	for i := 0; i < size; i++ {
		var _elem232 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem232 = v
		}
		p.DashboardIds = append(p.DashboardIds, _elem232)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciDeleteDashboardsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delete_dashboards_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciDeleteDashboardsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciDeleteDashboardsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dashboard_ids", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dashboard_ids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.DashboardIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.DashboardIds {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dashboard_ids: ", p), err)
	}
	return err
}

func (p *OmniSciDeleteDashboardsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciDeleteDashboardsArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciDeleteDashboardsResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciDeleteDashboardsResult() *OmniSciDeleteDashboardsResult {
	return &OmniSciDeleteDashboardsResult{}
}

var OmniSciDeleteDashboardsResult_E_DEFAULT *TOmniSciException

func (p *OmniSciDeleteDashboardsResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciDeleteDashboardsResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciDeleteDashboardsResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciDeleteDashboardsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciDeleteDashboardsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciDeleteDashboardsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delete_dashboards_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciDeleteDashboardsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciDeleteDashboardsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciDeleteDashboardsResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DashboardID
//  - Groups
//  - Objects
//  - Permissions
//  - GrantRole
type OmniSciShareDashboardArgs struct {
	Session     TSessionId             `thrift:"session,1" json:"session"`
	DashboardID int32                  `thrift:"dashboard_id,2" json:"dashboard_id"`
	Groups      []string               `thrift:"groups,3" json:"groups"`
	Objects     []string               `thrift:"objects,4" json:"objects"`
	Permissions *TDashboardPermissions `thrift:"permissions,5" json:"permissions"`
	GrantRole   bool                   `thrift:"grant_role,6" json:"grant_role"`
}

func NewOmniSciShareDashboardArgs() *OmniSciShareDashboardArgs {
	return &OmniSciShareDashboardArgs{}
}

func (p *OmniSciShareDashboardArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciShareDashboardArgs) GetDashboardID() int32 {
	return p.DashboardID
}

func (p *OmniSciShareDashboardArgs) GetGroups() []string {
	return p.Groups
}

func (p *OmniSciShareDashboardArgs) GetObjects() []string {
	return p.Objects
}

var OmniSciShareDashboardArgs_Permissions_DEFAULT *TDashboardPermissions

func (p *OmniSciShareDashboardArgs) GetPermissions() *TDashboardPermissions {
	if !p.IsSetPermissions() {
		return OmniSciShareDashboardArgs_Permissions_DEFAULT
	}
	return p.Permissions
}

func (p *OmniSciShareDashboardArgs) GetGrantRole() bool {
	return p.GrantRole
}
func (p *OmniSciShareDashboardArgs) IsSetPermissions() bool {
	return p.Permissions != nil
}

func (p *OmniSciShareDashboardArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciShareDashboardArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciShareDashboardArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DashboardID = v
	}
	return nil
}

func (p *OmniSciShareDashboardArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Groups = tSlice
	for i := 0; i < size; i++ {
		var _elem233 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem233 = v
		}
		p.Groups = append(p.Groups, _elem233)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciShareDashboardArgs) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Objects = tSlice
	for i := 0; i < size; i++ {
		var _elem234 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem234 = v
		}
		p.Objects = append(p.Objects, _elem234)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciShareDashboardArgs) readField5(iprot thrift.TProtocol) error {
	p.Permissions = &TDashboardPermissions{}
	if err := p.Permissions.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Permissions), err)
	}
	return nil
}

func (p *OmniSciShareDashboardArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.GrantRole = v
	}
	return nil
}

func (p *OmniSciShareDashboardArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("share_dashboard_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciShareDashboardArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciShareDashboardArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dashboard_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dashboard_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DashboardID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dashboard_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dashboard_id: ", p), err)
	}
	return err
}

func (p *OmniSciShareDashboardArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groups", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groups: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Groups)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Groups {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groups: ", p), err)
	}
	return err
}

func (p *OmniSciShareDashboardArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("objects", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:objects: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Objects)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Objects {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:objects: ", p), err)
	}
	return err
}

func (p *OmniSciShareDashboardArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("permissions", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:permissions: ", p), err)
	}
	if err := p.Permissions.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Permissions), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:permissions: ", p), err)
	}
	return err
}

func (p *OmniSciShareDashboardArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grant_role", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:grant_role: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.GrantRole)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.grant_role (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:grant_role: ", p), err)
	}
	return err
}

func (p *OmniSciShareDashboardArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciShareDashboardArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciShareDashboardResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciShareDashboardResult() *OmniSciShareDashboardResult {
	return &OmniSciShareDashboardResult{}
}

var OmniSciShareDashboardResult_E_DEFAULT *TOmniSciException

func (p *OmniSciShareDashboardResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciShareDashboardResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciShareDashboardResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciShareDashboardResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciShareDashboardResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciShareDashboardResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("share_dashboard_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciShareDashboardResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciShareDashboardResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciShareDashboardResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DashboardID
//  - Groups
//  - Objects
//  - Permissions
type OmniSciUnshareDashboardArgs struct {
	Session     TSessionId             `thrift:"session,1" json:"session"`
	DashboardID int32                  `thrift:"dashboard_id,2" json:"dashboard_id"`
	Groups      []string               `thrift:"groups,3" json:"groups"`
	Objects     []string               `thrift:"objects,4" json:"objects"`
	Permissions *TDashboardPermissions `thrift:"permissions,5" json:"permissions"`
}

func NewOmniSciUnshareDashboardArgs() *OmniSciUnshareDashboardArgs {
	return &OmniSciUnshareDashboardArgs{}
}

func (p *OmniSciUnshareDashboardArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciUnshareDashboardArgs) GetDashboardID() int32 {
	return p.DashboardID
}

func (p *OmniSciUnshareDashboardArgs) GetGroups() []string {
	return p.Groups
}

func (p *OmniSciUnshareDashboardArgs) GetObjects() []string {
	return p.Objects
}

var OmniSciUnshareDashboardArgs_Permissions_DEFAULT *TDashboardPermissions

func (p *OmniSciUnshareDashboardArgs) GetPermissions() *TDashboardPermissions {
	if !p.IsSetPermissions() {
		return OmniSciUnshareDashboardArgs_Permissions_DEFAULT
	}
	return p.Permissions
}
func (p *OmniSciUnshareDashboardArgs) IsSetPermissions() bool {
	return p.Permissions != nil
}

func (p *OmniSciUnshareDashboardArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciUnshareDashboardArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciUnshareDashboardArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DashboardID = v
	}
	return nil
}

func (p *OmniSciUnshareDashboardArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Groups = tSlice
	for i := 0; i < size; i++ {
		var _elem235 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem235 = v
		}
		p.Groups = append(p.Groups, _elem235)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciUnshareDashboardArgs) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Objects = tSlice
	for i := 0; i < size; i++ {
		var _elem236 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem236 = v
		}
		p.Objects = append(p.Objects, _elem236)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciUnshareDashboardArgs) readField5(iprot thrift.TProtocol) error {
	p.Permissions = &TDashboardPermissions{}
	if err := p.Permissions.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Permissions), err)
	}
	return nil
}

func (p *OmniSciUnshareDashboardArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unshare_dashboard_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciUnshareDashboardArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciUnshareDashboardArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dashboard_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dashboard_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DashboardID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dashboard_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dashboard_id: ", p), err)
	}
	return err
}

func (p *OmniSciUnshareDashboardArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groups", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groups: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Groups)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Groups {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groups: ", p), err)
	}
	return err
}

func (p *OmniSciUnshareDashboardArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("objects", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:objects: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Objects)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Objects {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:objects: ", p), err)
	}
	return err
}

func (p *OmniSciUnshareDashboardArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("permissions", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:permissions: ", p), err)
	}
	if err := p.Permissions.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Permissions), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:permissions: ", p), err)
	}
	return err
}

func (p *OmniSciUnshareDashboardArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciUnshareDashboardArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciUnshareDashboardResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciUnshareDashboardResult() *OmniSciUnshareDashboardResult {
	return &OmniSciUnshareDashboardResult{}
}

var OmniSciUnshareDashboardResult_E_DEFAULT *TOmniSciException

func (p *OmniSciUnshareDashboardResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciUnshareDashboardResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciUnshareDashboardResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciUnshareDashboardResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciUnshareDashboardResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciUnshareDashboardResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unshare_dashboard_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciUnshareDashboardResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciUnshareDashboardResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciUnshareDashboardResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DashboardIds
//  - Groups
//  - Permissions
type OmniSciUnshareDashboardsArgs struct {
	Session      TSessionId             `thrift:"session,1" json:"session"`
	DashboardIds []int32                `thrift:"dashboard_ids,2" json:"dashboard_ids"`
	Groups       []string               `thrift:"groups,3" json:"groups"`
	Permissions  *TDashboardPermissions `thrift:"permissions,4" json:"permissions"`
}

func NewOmniSciUnshareDashboardsArgs() *OmniSciUnshareDashboardsArgs {
	return &OmniSciUnshareDashboardsArgs{}
}

func (p *OmniSciUnshareDashboardsArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciUnshareDashboardsArgs) GetDashboardIds() []int32 {
	return p.DashboardIds
}

func (p *OmniSciUnshareDashboardsArgs) GetGroups() []string {
	return p.Groups
}

var OmniSciUnshareDashboardsArgs_Permissions_DEFAULT *TDashboardPermissions

func (p *OmniSciUnshareDashboardsArgs) GetPermissions() *TDashboardPermissions {
	if !p.IsSetPermissions() {
		return OmniSciUnshareDashboardsArgs_Permissions_DEFAULT
	}
	return p.Permissions
}
func (p *OmniSciUnshareDashboardsArgs) IsSetPermissions() bool {
	return p.Permissions != nil
}

func (p *OmniSciUnshareDashboardsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciUnshareDashboardsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciUnshareDashboardsArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.DashboardIds = tSlice
	for i := 0; i < size; i++ {
		var _elem237 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem237 = v
		}
		p.DashboardIds = append(p.DashboardIds, _elem237)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciUnshareDashboardsArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Groups = tSlice
	for i := 0; i < size; i++ {
		var _elem238 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem238 = v
		}
		p.Groups = append(p.Groups, _elem238)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciUnshareDashboardsArgs) readField4(iprot thrift.TProtocol) error {
	p.Permissions = &TDashboardPermissions{}
	if err := p.Permissions.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Permissions), err)
	}
	return nil
}

func (p *OmniSciUnshareDashboardsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unshare_dashboards_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciUnshareDashboardsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciUnshareDashboardsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dashboard_ids", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dashboard_ids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.DashboardIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.DashboardIds {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dashboard_ids: ", p), err)
	}
	return err
}

func (p *OmniSciUnshareDashboardsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groups", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groups: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Groups)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Groups {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groups: ", p), err)
	}
	return err
}

func (p *OmniSciUnshareDashboardsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("permissions", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:permissions: ", p), err)
	}
	if err := p.Permissions.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Permissions), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:permissions: ", p), err)
	}
	return err
}

func (p *OmniSciUnshareDashboardsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciUnshareDashboardsArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciUnshareDashboardsResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciUnshareDashboardsResult() *OmniSciUnshareDashboardsResult {
	return &OmniSciUnshareDashboardsResult{}
}

var OmniSciUnshareDashboardsResult_E_DEFAULT *TOmniSciException

func (p *OmniSciUnshareDashboardsResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciUnshareDashboardsResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciUnshareDashboardsResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciUnshareDashboardsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciUnshareDashboardsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciUnshareDashboardsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unshare_dashboards_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciUnshareDashboardsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciUnshareDashboardsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciUnshareDashboardsResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - DashboardID
type OmniSciGetDashboardGranteesArgs struct {
	Session     TSessionId `thrift:"session,1" json:"session"`
	DashboardID int32      `thrift:"dashboard_id,2" json:"dashboard_id"`
}

func NewOmniSciGetDashboardGranteesArgs() *OmniSciGetDashboardGranteesArgs {
	return &OmniSciGetDashboardGranteesArgs{}
}

func (p *OmniSciGetDashboardGranteesArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciGetDashboardGranteesArgs) GetDashboardID() int32 {
	return p.DashboardID
}
func (p *OmniSciGetDashboardGranteesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetDashboardGranteesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetDashboardGranteesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DashboardID = v
	}
	return nil
}

func (p *OmniSciGetDashboardGranteesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_dashboard_grantees_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetDashboardGranteesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetDashboardGranteesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dashboard_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dashboard_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DashboardID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dashboard_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dashboard_id: ", p), err)
	}
	return err
}

func (p *OmniSciGetDashboardGranteesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetDashboardGranteesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetDashboardGranteesResult struct {
	Success []*TDashboardGrantees `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException    `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetDashboardGranteesResult() *OmniSciGetDashboardGranteesResult {
	return &OmniSciGetDashboardGranteesResult{}
}

var OmniSciGetDashboardGranteesResult_Success_DEFAULT []*TDashboardGrantees

func (p *OmniSciGetDashboardGranteesResult) GetSuccess() []*TDashboardGrantees {
	return p.Success
}

var OmniSciGetDashboardGranteesResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetDashboardGranteesResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetDashboardGranteesResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetDashboardGranteesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetDashboardGranteesResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetDashboardGranteesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetDashboardGranteesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TDashboardGrantees, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem239 := &TDashboardGrantees{}
		if err := _elem239.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem239), err)
		}
		p.Success = append(p.Success, _elem239)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciGetDashboardGranteesResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetDashboardGranteesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_dashboard_grantees_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetDashboardGranteesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetDashboardGranteesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetDashboardGranteesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetDashboardGranteesResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Link
type OmniSciGetLinkViewArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
	Link    string     `thrift:"link,2" json:"link"`
}

func NewOmniSciGetLinkViewArgs() *OmniSciGetLinkViewArgs {
	return &OmniSciGetLinkViewArgs{}
}

func (p *OmniSciGetLinkViewArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciGetLinkViewArgs) GetLink() string {
	return p.Link
}
func (p *OmniSciGetLinkViewArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetLinkViewArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetLinkViewArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Link = v
	}
	return nil
}

func (p *OmniSciGetLinkViewArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_link_view_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetLinkViewArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetLinkViewArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("link", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:link: ", p), err)
	}
	if err := oprot.WriteString(string(p.Link)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.link (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:link: ", p), err)
	}
	return err
}

func (p *OmniSciGetLinkViewArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetLinkViewArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetLinkViewResult struct {
	Success *TFrontendView     `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetLinkViewResult() *OmniSciGetLinkViewResult {
	return &OmniSciGetLinkViewResult{}
}

var OmniSciGetLinkViewResult_Success_DEFAULT *TFrontendView

func (p *OmniSciGetLinkViewResult) GetSuccess() *TFrontendView {
	if !p.IsSetSuccess() {
		return OmniSciGetLinkViewResult_Success_DEFAULT
	}
	return p.Success
}

var OmniSciGetLinkViewResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetLinkViewResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetLinkViewResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetLinkViewResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetLinkViewResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetLinkViewResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetLinkViewResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TFrontendView{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *OmniSciGetLinkViewResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetLinkViewResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_link_view_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetLinkViewResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetLinkViewResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetLinkViewResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetLinkViewResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - ViewState
//  - ViewMetadata
type OmniSciCreateLinkArgs struct {
	Session      TSessionId `thrift:"session,1" json:"session"`
	ViewState    string     `thrift:"view_state,2" json:"view_state"`
	ViewMetadata string     `thrift:"view_metadata,3" json:"view_metadata"`
}

func NewOmniSciCreateLinkArgs() *OmniSciCreateLinkArgs {
	return &OmniSciCreateLinkArgs{}
}

func (p *OmniSciCreateLinkArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciCreateLinkArgs) GetViewState() string {
	return p.ViewState
}

func (p *OmniSciCreateLinkArgs) GetViewMetadata() string {
	return p.ViewMetadata
}
func (p *OmniSciCreateLinkArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciCreateLinkArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciCreateLinkArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ViewState = v
	}
	return nil
}

func (p *OmniSciCreateLinkArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ViewMetadata = v
	}
	return nil
}

func (p *OmniSciCreateLinkArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_link_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciCreateLinkArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciCreateLinkArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("view_state", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:view_state: ", p), err)
	}
	if err := oprot.WriteString(string(p.ViewState)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.view_state (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:view_state: ", p), err)
	}
	return err
}

func (p *OmniSciCreateLinkArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("view_metadata", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:view_metadata: ", p), err)
	}
	if err := oprot.WriteString(string(p.ViewMetadata)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.view_metadata (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:view_metadata: ", p), err)
	}
	return err
}

func (p *OmniSciCreateLinkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciCreateLinkArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciCreateLinkResult struct {
	Success *string            `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciCreateLinkResult() *OmniSciCreateLinkResult {
	return &OmniSciCreateLinkResult{}
}

var OmniSciCreateLinkResult_Success_DEFAULT string

func (p *OmniSciCreateLinkResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return OmniSciCreateLinkResult_Success_DEFAULT
	}
	return *p.Success
}

var OmniSciCreateLinkResult_E_DEFAULT *TOmniSciException

func (p *OmniSciCreateLinkResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciCreateLinkResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciCreateLinkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciCreateLinkResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciCreateLinkResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciCreateLinkResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *OmniSciCreateLinkResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciCreateLinkResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_link_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciCreateLinkResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciCreateLinkResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciCreateLinkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciCreateLinkResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
//  - Rows
//  - ColumnNames
type OmniSciLoadTableBinaryArgs struct {
	Session     TSessionId `thrift:"session,1" json:"session"`
	TableName   string     `thrift:"table_name,2" json:"table_name"`
	Rows        []*TRow    `thrift:"rows,3" json:"rows"`
	ColumnNames []string   `thrift:"column_names,4" json:"column_names"`
}

func NewOmniSciLoadTableBinaryArgs() *OmniSciLoadTableBinaryArgs {
	return &OmniSciLoadTableBinaryArgs{
		ColumnNames: []string{},
	}
}

func (p *OmniSciLoadTableBinaryArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciLoadTableBinaryArgs) GetTableName() string {
	return p.TableName
}

func (p *OmniSciLoadTableBinaryArgs) GetRows() []*TRow {
	return p.Rows
}

func (p *OmniSciLoadTableBinaryArgs) GetColumnNames() []string {
	return p.ColumnNames
}
func (p *OmniSciLoadTableBinaryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciLoadTableBinaryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciLoadTableBinaryArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *OmniSciLoadTableBinaryArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TRow, 0, size)
	p.Rows = tSlice
	for i := 0; i < size; i++ {
		_elem240 := &TRow{}
		if err := _elem240.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem240), err)
		}
		p.Rows = append(p.Rows, _elem240)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciLoadTableBinaryArgs) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ColumnNames = tSlice
	for i := 0; i < size; i++ {
		var _elem241 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem241 = v
		}
		p.ColumnNames = append(p.ColumnNames, _elem241)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciLoadTableBinaryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("load_table_binary_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciLoadTableBinaryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciLoadTableBinaryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err)
	}
	return err
}

func (p *OmniSciLoadTableBinaryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rows", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rows: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Rows)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Rows {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rows: ", p), err)
	}
	return err
}

func (p *OmniSciLoadTableBinaryArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("column_names", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:column_names: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ColumnNames)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ColumnNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:column_names: ", p), err)
	}
	return err
}

func (p *OmniSciLoadTableBinaryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciLoadTableBinaryArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciLoadTableBinaryResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciLoadTableBinaryResult() *OmniSciLoadTableBinaryResult {
	return &OmniSciLoadTableBinaryResult{}
}

var OmniSciLoadTableBinaryResult_E_DEFAULT *TOmniSciException

func (p *OmniSciLoadTableBinaryResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciLoadTableBinaryResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciLoadTableBinaryResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciLoadTableBinaryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciLoadTableBinaryResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciLoadTableBinaryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("load_table_binary_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciLoadTableBinaryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciLoadTableBinaryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciLoadTableBinaryResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
//  - Cols
//  - ColumnNames
type OmniSciLoadTableBinaryColumnarArgs struct {
	Session     TSessionId `thrift:"session,1" json:"session"`
	TableName   string     `thrift:"table_name,2" json:"table_name"`
	Cols        []*TColumn `thrift:"cols,3" json:"cols"`
	ColumnNames []string   `thrift:"column_names,4" json:"column_names"`
}

func NewOmniSciLoadTableBinaryColumnarArgs() *OmniSciLoadTableBinaryColumnarArgs {
	return &OmniSciLoadTableBinaryColumnarArgs{
		ColumnNames: []string{},
	}
}

func (p *OmniSciLoadTableBinaryColumnarArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciLoadTableBinaryColumnarArgs) GetTableName() string {
	return p.TableName
}

func (p *OmniSciLoadTableBinaryColumnarArgs) GetCols() []*TColumn {
	return p.Cols
}

func (p *OmniSciLoadTableBinaryColumnarArgs) GetColumnNames() []string {
	return p.ColumnNames
}
func (p *OmniSciLoadTableBinaryColumnarArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciLoadTableBinaryColumnarArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciLoadTableBinaryColumnarArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *OmniSciLoadTableBinaryColumnarArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TColumn, 0, size)
	p.Cols = tSlice
	for i := 0; i < size; i++ {
		_elem242 := &TColumn{}
		if err := _elem242.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem242), err)
		}
		p.Cols = append(p.Cols, _elem242)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciLoadTableBinaryColumnarArgs) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ColumnNames = tSlice
	for i := 0; i < size; i++ {
		var _elem243 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem243 = v
		}
		p.ColumnNames = append(p.ColumnNames, _elem243)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciLoadTableBinaryColumnarArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("load_table_binary_columnar_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciLoadTableBinaryColumnarArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciLoadTableBinaryColumnarArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err)
	}
	return err
}

func (p *OmniSciLoadTableBinaryColumnarArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cols", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cols: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Cols)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Cols {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cols: ", p), err)
	}
	return err
}

func (p *OmniSciLoadTableBinaryColumnarArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("column_names", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:column_names: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ColumnNames)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ColumnNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:column_names: ", p), err)
	}
	return err
}

func (p *OmniSciLoadTableBinaryColumnarArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciLoadTableBinaryColumnarArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciLoadTableBinaryColumnarResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciLoadTableBinaryColumnarResult() *OmniSciLoadTableBinaryColumnarResult {
	return &OmniSciLoadTableBinaryColumnarResult{}
}

var OmniSciLoadTableBinaryColumnarResult_E_DEFAULT *TOmniSciException

func (p *OmniSciLoadTableBinaryColumnarResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciLoadTableBinaryColumnarResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciLoadTableBinaryColumnarResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciLoadTableBinaryColumnarResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciLoadTableBinaryColumnarResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciLoadTableBinaryColumnarResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("load_table_binary_columnar_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciLoadTableBinaryColumnarResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciLoadTableBinaryColumnarResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciLoadTableBinaryColumnarResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
//  - ArrowStream
//  - UseColumnNames
type OmniSciLoadTableBinaryArrowArgs struct {
	Session        TSessionId `thrift:"session,1" json:"session"`
	TableName      string     `thrift:"table_name,2" json:"table_name"`
	ArrowStream    []byte     `thrift:"arrow_stream,3" json:"arrow_stream"`
	UseColumnNames bool       `thrift:"use_column_names,4" json:"use_column_names"`
}

func NewOmniSciLoadTableBinaryArrowArgs() *OmniSciLoadTableBinaryArrowArgs {
	return &OmniSciLoadTableBinaryArrowArgs{}
}

func (p *OmniSciLoadTableBinaryArrowArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciLoadTableBinaryArrowArgs) GetTableName() string {
	return p.TableName
}

func (p *OmniSciLoadTableBinaryArrowArgs) GetArrowStream() []byte {
	return p.ArrowStream
}

func (p *OmniSciLoadTableBinaryArrowArgs) GetUseColumnNames() bool {
	return p.UseColumnNames
}
func (p *OmniSciLoadTableBinaryArrowArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciLoadTableBinaryArrowArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciLoadTableBinaryArrowArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *OmniSciLoadTableBinaryArrowArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ArrowStream = v
	}
	return nil
}

func (p *OmniSciLoadTableBinaryArrowArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.UseColumnNames = v
	}
	return nil
}

func (p *OmniSciLoadTableBinaryArrowArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("load_table_binary_arrow_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciLoadTableBinaryArrowArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciLoadTableBinaryArrowArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err)
	}
	return err
}

func (p *OmniSciLoadTableBinaryArrowArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arrow_stream", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:arrow_stream: ", p), err)
	}
	if err := oprot.WriteBinary(p.ArrowStream); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.arrow_stream (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:arrow_stream: ", p), err)
	}
	return err
}

func (p *OmniSciLoadTableBinaryArrowArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("use_column_names", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:use_column_names: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.UseColumnNames)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.use_column_names (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:use_column_names: ", p), err)
	}
	return err
}

func (p *OmniSciLoadTableBinaryArrowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciLoadTableBinaryArrowArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciLoadTableBinaryArrowResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciLoadTableBinaryArrowResult() *OmniSciLoadTableBinaryArrowResult {
	return &OmniSciLoadTableBinaryArrowResult{}
}

var OmniSciLoadTableBinaryArrowResult_E_DEFAULT *TOmniSciException

func (p *OmniSciLoadTableBinaryArrowResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciLoadTableBinaryArrowResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciLoadTableBinaryArrowResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciLoadTableBinaryArrowResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciLoadTableBinaryArrowResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciLoadTableBinaryArrowResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("load_table_binary_arrow_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciLoadTableBinaryArrowResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciLoadTableBinaryArrowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciLoadTableBinaryArrowResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
//  - Rows
//  - ColumnNames
type OmniSciLoadTableArgs struct {
	Session     TSessionId    `thrift:"session,1" json:"session"`
	TableName   string        `thrift:"table_name,2" json:"table_name"`
	Rows        []*TStringRow `thrift:"rows,3" json:"rows"`
	ColumnNames []string      `thrift:"column_names,4" json:"column_names"`
}

func NewOmniSciLoadTableArgs() *OmniSciLoadTableArgs {
	return &OmniSciLoadTableArgs{
		ColumnNames: []string{},
	}
}

func (p *OmniSciLoadTableArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciLoadTableArgs) GetTableName() string {
	return p.TableName
}

func (p *OmniSciLoadTableArgs) GetRows() []*TStringRow {
	return p.Rows
}

func (p *OmniSciLoadTableArgs) GetColumnNames() []string {
	return p.ColumnNames
}
func (p *OmniSciLoadTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciLoadTableArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciLoadTableArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *OmniSciLoadTableArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TStringRow, 0, size)
	p.Rows = tSlice
	for i := 0; i < size; i++ {
		_elem244 := &TStringRow{}
		if err := _elem244.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem244), err)
		}
		p.Rows = append(p.Rows, _elem244)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciLoadTableArgs) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ColumnNames = tSlice
	for i := 0; i < size; i++ {
		var _elem245 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem245 = v
		}
		p.ColumnNames = append(p.ColumnNames, _elem245)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciLoadTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("load_table_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciLoadTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciLoadTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err)
	}
	return err
}

func (p *OmniSciLoadTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rows", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rows: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Rows)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Rows {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rows: ", p), err)
	}
	return err
}

func (p *OmniSciLoadTableArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("column_names", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:column_names: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ColumnNames)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ColumnNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:column_names: ", p), err)
	}
	return err
}

func (p *OmniSciLoadTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciLoadTableArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciLoadTableResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciLoadTableResult() *OmniSciLoadTableResult {
	return &OmniSciLoadTableResult{}
}

var OmniSciLoadTableResult_E_DEFAULT *TOmniSciException

func (p *OmniSciLoadTableResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciLoadTableResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciLoadTableResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciLoadTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciLoadTableResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciLoadTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("load_table_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciLoadTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciLoadTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciLoadTableResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - FileName
//  - CopyParams
type OmniSciDetectColumnTypesArgs struct {
	Session    TSessionId   `thrift:"session,1" json:"session"`
	FileName   string       `thrift:"file_name,2" json:"file_name"`
	CopyParams *TCopyParams `thrift:"copy_params,3" json:"copy_params"`
}

func NewOmniSciDetectColumnTypesArgs() *OmniSciDetectColumnTypesArgs {
	return &OmniSciDetectColumnTypesArgs{}
}

func (p *OmniSciDetectColumnTypesArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciDetectColumnTypesArgs) GetFileName() string {
	return p.FileName
}

var OmniSciDetectColumnTypesArgs_CopyParams_DEFAULT *TCopyParams

func (p *OmniSciDetectColumnTypesArgs) GetCopyParams() *TCopyParams {
	if !p.IsSetCopyParams() {
		return OmniSciDetectColumnTypesArgs_CopyParams_DEFAULT
	}
	return p.CopyParams
}
func (p *OmniSciDetectColumnTypesArgs) IsSetCopyParams() bool {
	return p.CopyParams != nil
}

func (p *OmniSciDetectColumnTypesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciDetectColumnTypesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciDetectColumnTypesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FileName = v
	}
	return nil
}

func (p *OmniSciDetectColumnTypesArgs) readField3(iprot thrift.TProtocol) error {
	p.CopyParams = &TCopyParams{
		HasHeader: 0,

		FileType: 0,

		GeoCoordsEncoding: 6,

		GeoCoordsCompParam: 32,

		GeoCoordsType: 18,

		GeoCoordsSrid: 4326,

		SanitizeColumnNames: true,

		GeoAssignRenderGroups: true,
	}
	if err := p.CopyParams.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CopyParams), err)
	}
	return nil
}

func (p *OmniSciDetectColumnTypesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("detect_column_types_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciDetectColumnTypesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciDetectColumnTypesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("file_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:file_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.FileName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.file_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:file_name: ", p), err)
	}
	return err
}

func (p *OmniSciDetectColumnTypesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("copy_params", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:copy_params: ", p), err)
	}
	if err := p.CopyParams.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CopyParams), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:copy_params: ", p), err)
	}
	return err
}

func (p *OmniSciDetectColumnTypesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciDetectColumnTypesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciDetectColumnTypesResult struct {
	Success *TDetectResult_    `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciDetectColumnTypesResult() *OmniSciDetectColumnTypesResult {
	return &OmniSciDetectColumnTypesResult{}
}

var OmniSciDetectColumnTypesResult_Success_DEFAULT *TDetectResult_

func (p *OmniSciDetectColumnTypesResult) GetSuccess() *TDetectResult_ {
	if !p.IsSetSuccess() {
		return OmniSciDetectColumnTypesResult_Success_DEFAULT
	}
	return p.Success
}

var OmniSciDetectColumnTypesResult_E_DEFAULT *TOmniSciException

func (p *OmniSciDetectColumnTypesResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciDetectColumnTypesResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciDetectColumnTypesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciDetectColumnTypesResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciDetectColumnTypesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciDetectColumnTypesResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TDetectResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *OmniSciDetectColumnTypesResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciDetectColumnTypesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("detect_column_types_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciDetectColumnTypesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciDetectColumnTypesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciDetectColumnTypesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciDetectColumnTypesResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
//  - RowDesc
//  - FileType
//  - CreateParams
type OmniSciCreateTableArgs struct {
	Session      TSessionId     `thrift:"session,1" json:"session"`
	TableName    string         `thrift:"table_name,2" json:"table_name"`
	RowDesc      TRowDescriptor `thrift:"row_desc,3" json:"row_desc"`
	FileType     TFileType      `thrift:"file_type,4" json:"file_type"`
	CreateParams *TCreateParams `thrift:"create_params,5" json:"create_params"`
}

func NewOmniSciCreateTableArgs() *OmniSciCreateTableArgs {
	return &OmniSciCreateTableArgs{
		FileType: 0,
	}
}

func (p *OmniSciCreateTableArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciCreateTableArgs) GetTableName() string {
	return p.TableName
}

func (p *OmniSciCreateTableArgs) GetRowDesc() TRowDescriptor {
	return p.RowDesc
}

func (p *OmniSciCreateTableArgs) GetFileType() TFileType {
	return p.FileType
}

var OmniSciCreateTableArgs_CreateParams_DEFAULT *TCreateParams

func (p *OmniSciCreateTableArgs) GetCreateParams() *TCreateParams {
	if !p.IsSetCreateParams() {
		return OmniSciCreateTableArgs_CreateParams_DEFAULT
	}
	return p.CreateParams
}
func (p *OmniSciCreateTableArgs) IsSetCreateParams() bool {
	return p.CreateParams != nil
}

func (p *OmniSciCreateTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciCreateTableArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciCreateTableArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *OmniSciCreateTableArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(TRowDescriptor, 0, size)
	p.RowDesc = tSlice
	for i := 0; i < size; i++ {
		_elem246 := &TColumnType{}
		if err := _elem246.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem246), err)
		}
		p.RowDesc = append(p.RowDesc, _elem246)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciCreateTableArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := TFileType(v)
		p.FileType = temp
	}
	return nil
}

func (p *OmniSciCreateTableArgs) readField5(iprot thrift.TProtocol) error {
	p.CreateParams = &TCreateParams{}
	if err := p.CreateParams.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateParams), err)
	}
	return nil
}

func (p *OmniSciCreateTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_table_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciCreateTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciCreateTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err)
	}
	return err
}

func (p *OmniSciCreateTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row_desc", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:row_desc: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowDesc)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RowDesc {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:row_desc: ", p), err)
	}
	return err
}

func (p *OmniSciCreateTableArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("file_type", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:file_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FileType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.file_type (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:file_type: ", p), err)
	}
	return err
}

func (p *OmniSciCreateTableArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_params", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:create_params: ", p), err)
	}
	if err := p.CreateParams.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateParams), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:create_params: ", p), err)
	}
	return err
}

func (p *OmniSciCreateTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciCreateTableArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciCreateTableResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciCreateTableResult() *OmniSciCreateTableResult {
	return &OmniSciCreateTableResult{}
}

var OmniSciCreateTableResult_E_DEFAULT *TOmniSciException

func (p *OmniSciCreateTableResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciCreateTableResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciCreateTableResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciCreateTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciCreateTableResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciCreateTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_table_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciCreateTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciCreateTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciCreateTableResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
//  - FileName
//  - CopyParams
type OmniSciImportTableArgs struct {
	Session    TSessionId   `thrift:"session,1" json:"session"`
	TableName  string       `thrift:"table_name,2" json:"table_name"`
	FileName   string       `thrift:"file_name,3" json:"file_name"`
	CopyParams *TCopyParams `thrift:"copy_params,4" json:"copy_params"`
}

func NewOmniSciImportTableArgs() *OmniSciImportTableArgs {
	return &OmniSciImportTableArgs{}
}

func (p *OmniSciImportTableArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciImportTableArgs) GetTableName() string {
	return p.TableName
}

func (p *OmniSciImportTableArgs) GetFileName() string {
	return p.FileName
}

var OmniSciImportTableArgs_CopyParams_DEFAULT *TCopyParams

func (p *OmniSciImportTableArgs) GetCopyParams() *TCopyParams {
	if !p.IsSetCopyParams() {
		return OmniSciImportTableArgs_CopyParams_DEFAULT
	}
	return p.CopyParams
}
func (p *OmniSciImportTableArgs) IsSetCopyParams() bool {
	return p.CopyParams != nil
}

func (p *OmniSciImportTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciImportTableArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciImportTableArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *OmniSciImportTableArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.FileName = v
	}
	return nil
}

func (p *OmniSciImportTableArgs) readField4(iprot thrift.TProtocol) error {
	p.CopyParams = &TCopyParams{
		HasHeader: 0,

		FileType: 0,

		GeoCoordsEncoding: 6,

		GeoCoordsCompParam: 32,

		GeoCoordsType: 18,

		GeoCoordsSrid: 4326,

		SanitizeColumnNames: true,

		GeoAssignRenderGroups: true,
	}
	if err := p.CopyParams.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CopyParams), err)
	}
	return nil
}

func (p *OmniSciImportTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("import_table_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciImportTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciImportTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err)
	}
	return err
}

func (p *OmniSciImportTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("file_name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:file_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.FileName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.file_name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:file_name: ", p), err)
	}
	return err
}

func (p *OmniSciImportTableArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("copy_params", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:copy_params: ", p), err)
	}
	if err := p.CopyParams.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CopyParams), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:copy_params: ", p), err)
	}
	return err
}

func (p *OmniSciImportTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciImportTableArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciImportTableResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciImportTableResult() *OmniSciImportTableResult {
	return &OmniSciImportTableResult{}
}

var OmniSciImportTableResult_E_DEFAULT *TOmniSciException

func (p *OmniSciImportTableResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciImportTableResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciImportTableResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciImportTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciImportTableResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciImportTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("import_table_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciImportTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciImportTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciImportTableResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableName
//  - FileName
//  - CopyParams
//  - RowDesc
//  - CreateParams
type OmniSciImportGeoTableArgs struct {
	Session      TSessionId     `thrift:"session,1" json:"session"`
	TableName    string         `thrift:"table_name,2" json:"table_name"`
	FileName     string         `thrift:"file_name,3" json:"file_name"`
	CopyParams   *TCopyParams   `thrift:"copy_params,4" json:"copy_params"`
	RowDesc      TRowDescriptor `thrift:"row_desc,5" json:"row_desc"`
	CreateParams *TCreateParams `thrift:"create_params,6" json:"create_params"`
}

func NewOmniSciImportGeoTableArgs() *OmniSciImportGeoTableArgs {
	return &OmniSciImportGeoTableArgs{}
}

func (p *OmniSciImportGeoTableArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciImportGeoTableArgs) GetTableName() string {
	return p.TableName
}

func (p *OmniSciImportGeoTableArgs) GetFileName() string {
	return p.FileName
}

var OmniSciImportGeoTableArgs_CopyParams_DEFAULT *TCopyParams

func (p *OmniSciImportGeoTableArgs) GetCopyParams() *TCopyParams {
	if !p.IsSetCopyParams() {
		return OmniSciImportGeoTableArgs_CopyParams_DEFAULT
	}
	return p.CopyParams
}

func (p *OmniSciImportGeoTableArgs) GetRowDesc() TRowDescriptor {
	return p.RowDesc
}

var OmniSciImportGeoTableArgs_CreateParams_DEFAULT *TCreateParams

func (p *OmniSciImportGeoTableArgs) GetCreateParams() *TCreateParams {
	if !p.IsSetCreateParams() {
		return OmniSciImportGeoTableArgs_CreateParams_DEFAULT
	}
	return p.CreateParams
}
func (p *OmniSciImportGeoTableArgs) IsSetCopyParams() bool {
	return p.CopyParams != nil
}

func (p *OmniSciImportGeoTableArgs) IsSetCreateParams() bool {
	return p.CreateParams != nil
}

func (p *OmniSciImportGeoTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciImportGeoTableArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciImportGeoTableArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *OmniSciImportGeoTableArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.FileName = v
	}
	return nil
}

func (p *OmniSciImportGeoTableArgs) readField4(iprot thrift.TProtocol) error {
	p.CopyParams = &TCopyParams{
		HasHeader: 0,

		FileType: 0,

		GeoCoordsEncoding: 6,

		GeoCoordsCompParam: 32,

		GeoCoordsType: 18,

		GeoCoordsSrid: 4326,

		SanitizeColumnNames: true,

		GeoAssignRenderGroups: true,
	}
	if err := p.CopyParams.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CopyParams), err)
	}
	return nil
}

func (p *OmniSciImportGeoTableArgs) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(TRowDescriptor, 0, size)
	p.RowDesc = tSlice
	for i := 0; i < size; i++ {
		_elem247 := &TColumnType{}
		if err := _elem247.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem247), err)
		}
		p.RowDesc = append(p.RowDesc, _elem247)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciImportGeoTableArgs) readField6(iprot thrift.TProtocol) error {
	p.CreateParams = &TCreateParams{}
	if err := p.CreateParams.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateParams), err)
	}
	return nil
}

func (p *OmniSciImportGeoTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("import_geo_table_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciImportGeoTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciImportGeoTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err)
	}
	return err
}

func (p *OmniSciImportGeoTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("file_name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:file_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.FileName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.file_name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:file_name: ", p), err)
	}
	return err
}

func (p *OmniSciImportGeoTableArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("copy_params", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:copy_params: ", p), err)
	}
	if err := p.CopyParams.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CopyParams), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:copy_params: ", p), err)
	}
	return err
}

func (p *OmniSciImportGeoTableArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row_desc", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:row_desc: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowDesc)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RowDesc {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:row_desc: ", p), err)
	}
	return err
}

func (p *OmniSciImportGeoTableArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_params", thrift.STRUCT, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:create_params: ", p), err)
	}
	if err := p.CreateParams.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateParams), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:create_params: ", p), err)
	}
	return err
}

func (p *OmniSciImportGeoTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciImportGeoTableArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciImportGeoTableResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciImportGeoTableResult() *OmniSciImportGeoTableResult {
	return &OmniSciImportGeoTableResult{}
}

var OmniSciImportGeoTableResult_E_DEFAULT *TOmniSciException

func (p *OmniSciImportGeoTableResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciImportGeoTableResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciImportGeoTableResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciImportGeoTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciImportGeoTableResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciImportGeoTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("import_geo_table_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciImportGeoTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciImportGeoTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciImportGeoTableResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - ImportID
type OmniSciImportTableStatusArgs struct {
	Session  TSessionId `thrift:"session,1" json:"session"`
	ImportID string     `thrift:"import_id,2" json:"import_id"`
}

func NewOmniSciImportTableStatusArgs() *OmniSciImportTableStatusArgs {
	return &OmniSciImportTableStatusArgs{}
}

func (p *OmniSciImportTableStatusArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciImportTableStatusArgs) GetImportID() string {
	return p.ImportID
}
func (p *OmniSciImportTableStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciImportTableStatusArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciImportTableStatusArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ImportID = v
	}
	return nil
}

func (p *OmniSciImportTableStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("import_table_status_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciImportTableStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciImportTableStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("import_id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:import_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ImportID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.import_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:import_id: ", p), err)
	}
	return err
}

func (p *OmniSciImportTableStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciImportTableStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciImportTableStatusResult struct {
	Success *TImportStatus     `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciImportTableStatusResult() *OmniSciImportTableStatusResult {
	return &OmniSciImportTableStatusResult{}
}

var OmniSciImportTableStatusResult_Success_DEFAULT *TImportStatus

func (p *OmniSciImportTableStatusResult) GetSuccess() *TImportStatus {
	if !p.IsSetSuccess() {
		return OmniSciImportTableStatusResult_Success_DEFAULT
	}
	return p.Success
}

var OmniSciImportTableStatusResult_E_DEFAULT *TOmniSciException

func (p *OmniSciImportTableStatusResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciImportTableStatusResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciImportTableStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciImportTableStatusResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciImportTableStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciImportTableStatusResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TImportStatus{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *OmniSciImportTableStatusResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciImportTableStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("import_table_status_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciImportTableStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciImportTableStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciImportTableStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciImportTableStatusResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - ArchivePath
//  - CopyParams
type OmniSciGetFirstGeoFileInArchiveArgs struct {
	Session     TSessionId   `thrift:"session,1" json:"session"`
	ArchivePath string       `thrift:"archive_path,2" json:"archive_path"`
	CopyParams  *TCopyParams `thrift:"copy_params,3" json:"copy_params"`
}

func NewOmniSciGetFirstGeoFileInArchiveArgs() *OmniSciGetFirstGeoFileInArchiveArgs {
	return &OmniSciGetFirstGeoFileInArchiveArgs{}
}

func (p *OmniSciGetFirstGeoFileInArchiveArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciGetFirstGeoFileInArchiveArgs) GetArchivePath() string {
	return p.ArchivePath
}

var OmniSciGetFirstGeoFileInArchiveArgs_CopyParams_DEFAULT *TCopyParams

func (p *OmniSciGetFirstGeoFileInArchiveArgs) GetCopyParams() *TCopyParams {
	if !p.IsSetCopyParams() {
		return OmniSciGetFirstGeoFileInArchiveArgs_CopyParams_DEFAULT
	}
	return p.CopyParams
}
func (p *OmniSciGetFirstGeoFileInArchiveArgs) IsSetCopyParams() bool {
	return p.CopyParams != nil
}

func (p *OmniSciGetFirstGeoFileInArchiveArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetFirstGeoFileInArchiveArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetFirstGeoFileInArchiveArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ArchivePath = v
	}
	return nil
}

func (p *OmniSciGetFirstGeoFileInArchiveArgs) readField3(iprot thrift.TProtocol) error {
	p.CopyParams = &TCopyParams{
		HasHeader: 0,

		FileType: 0,

		GeoCoordsEncoding: 6,

		GeoCoordsCompParam: 32,

		GeoCoordsType: 18,

		GeoCoordsSrid: 4326,

		SanitizeColumnNames: true,

		GeoAssignRenderGroups: true,
	}
	if err := p.CopyParams.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CopyParams), err)
	}
	return nil
}

func (p *OmniSciGetFirstGeoFileInArchiveArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_first_geo_file_in_archive_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetFirstGeoFileInArchiveArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetFirstGeoFileInArchiveArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("archive_path", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:archive_path: ", p), err)
	}
	if err := oprot.WriteString(string(p.ArchivePath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.archive_path (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:archive_path: ", p), err)
	}
	return err
}

func (p *OmniSciGetFirstGeoFileInArchiveArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("copy_params", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:copy_params: ", p), err)
	}
	if err := p.CopyParams.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CopyParams), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:copy_params: ", p), err)
	}
	return err
}

func (p *OmniSciGetFirstGeoFileInArchiveArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetFirstGeoFileInArchiveArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetFirstGeoFileInArchiveResult struct {
	Success *string            `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetFirstGeoFileInArchiveResult() *OmniSciGetFirstGeoFileInArchiveResult {
	return &OmniSciGetFirstGeoFileInArchiveResult{}
}

var OmniSciGetFirstGeoFileInArchiveResult_Success_DEFAULT string

func (p *OmniSciGetFirstGeoFileInArchiveResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return OmniSciGetFirstGeoFileInArchiveResult_Success_DEFAULT
	}
	return *p.Success
}

var OmniSciGetFirstGeoFileInArchiveResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetFirstGeoFileInArchiveResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetFirstGeoFileInArchiveResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetFirstGeoFileInArchiveResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetFirstGeoFileInArchiveResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetFirstGeoFileInArchiveResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetFirstGeoFileInArchiveResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *OmniSciGetFirstGeoFileInArchiveResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetFirstGeoFileInArchiveResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_first_geo_file_in_archive_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetFirstGeoFileInArchiveResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetFirstGeoFileInArchiveResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetFirstGeoFileInArchiveResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetFirstGeoFileInArchiveResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - ArchivePath
//  - CopyParams
type OmniSciGetAllFilesInArchiveArgs struct {
	Session     TSessionId   `thrift:"session,1" json:"session"`
	ArchivePath string       `thrift:"archive_path,2" json:"archive_path"`
	CopyParams  *TCopyParams `thrift:"copy_params,3" json:"copy_params"`
}

func NewOmniSciGetAllFilesInArchiveArgs() *OmniSciGetAllFilesInArchiveArgs {
	return &OmniSciGetAllFilesInArchiveArgs{}
}

func (p *OmniSciGetAllFilesInArchiveArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciGetAllFilesInArchiveArgs) GetArchivePath() string {
	return p.ArchivePath
}

var OmniSciGetAllFilesInArchiveArgs_CopyParams_DEFAULT *TCopyParams

func (p *OmniSciGetAllFilesInArchiveArgs) GetCopyParams() *TCopyParams {
	if !p.IsSetCopyParams() {
		return OmniSciGetAllFilesInArchiveArgs_CopyParams_DEFAULT
	}
	return p.CopyParams
}
func (p *OmniSciGetAllFilesInArchiveArgs) IsSetCopyParams() bool {
	return p.CopyParams != nil
}

func (p *OmniSciGetAllFilesInArchiveArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetAllFilesInArchiveArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetAllFilesInArchiveArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ArchivePath = v
	}
	return nil
}

func (p *OmniSciGetAllFilesInArchiveArgs) readField3(iprot thrift.TProtocol) error {
	p.CopyParams = &TCopyParams{
		HasHeader: 0,

		FileType: 0,

		GeoCoordsEncoding: 6,

		GeoCoordsCompParam: 32,

		GeoCoordsType: 18,

		GeoCoordsSrid: 4326,

		SanitizeColumnNames: true,

		GeoAssignRenderGroups: true,
	}
	if err := p.CopyParams.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CopyParams), err)
	}
	return nil
}

func (p *OmniSciGetAllFilesInArchiveArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_all_files_in_archive_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetAllFilesInArchiveArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetAllFilesInArchiveArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("archive_path", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:archive_path: ", p), err)
	}
	if err := oprot.WriteString(string(p.ArchivePath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.archive_path (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:archive_path: ", p), err)
	}
	return err
}

func (p *OmniSciGetAllFilesInArchiveArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("copy_params", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:copy_params: ", p), err)
	}
	if err := p.CopyParams.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CopyParams), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:copy_params: ", p), err)
	}
	return err
}

func (p *OmniSciGetAllFilesInArchiveArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetAllFilesInArchiveArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetAllFilesInArchiveResult struct {
	Success []string           `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetAllFilesInArchiveResult() *OmniSciGetAllFilesInArchiveResult {
	return &OmniSciGetAllFilesInArchiveResult{}
}

var OmniSciGetAllFilesInArchiveResult_Success_DEFAULT []string

func (p *OmniSciGetAllFilesInArchiveResult) GetSuccess() []string {
	return p.Success
}

var OmniSciGetAllFilesInArchiveResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetAllFilesInArchiveResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetAllFilesInArchiveResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetAllFilesInArchiveResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetAllFilesInArchiveResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetAllFilesInArchiveResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetAllFilesInArchiveResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem248 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem248 = v
		}
		p.Success = append(p.Success, _elem248)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciGetAllFilesInArchiveResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetAllFilesInArchiveResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_all_files_in_archive_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetAllFilesInArchiveResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetAllFilesInArchiveResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetAllFilesInArchiveResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetAllFilesInArchiveResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - FileName
//  - CopyParams
type OmniSciGetLayersInGeoFileArgs struct {
	Session    TSessionId   `thrift:"session,1" json:"session"`
	FileName   string       `thrift:"file_name,2" json:"file_name"`
	CopyParams *TCopyParams `thrift:"copy_params,3" json:"copy_params"`
}

func NewOmniSciGetLayersInGeoFileArgs() *OmniSciGetLayersInGeoFileArgs {
	return &OmniSciGetLayersInGeoFileArgs{}
}

func (p *OmniSciGetLayersInGeoFileArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciGetLayersInGeoFileArgs) GetFileName() string {
	return p.FileName
}

var OmniSciGetLayersInGeoFileArgs_CopyParams_DEFAULT *TCopyParams

func (p *OmniSciGetLayersInGeoFileArgs) GetCopyParams() *TCopyParams {
	if !p.IsSetCopyParams() {
		return OmniSciGetLayersInGeoFileArgs_CopyParams_DEFAULT
	}
	return p.CopyParams
}
func (p *OmniSciGetLayersInGeoFileArgs) IsSetCopyParams() bool {
	return p.CopyParams != nil
}

func (p *OmniSciGetLayersInGeoFileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetLayersInGeoFileArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetLayersInGeoFileArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FileName = v
	}
	return nil
}

func (p *OmniSciGetLayersInGeoFileArgs) readField3(iprot thrift.TProtocol) error {
	p.CopyParams = &TCopyParams{
		HasHeader: 0,

		FileType: 0,

		GeoCoordsEncoding: 6,

		GeoCoordsCompParam: 32,

		GeoCoordsType: 18,

		GeoCoordsSrid: 4326,

		SanitizeColumnNames: true,

		GeoAssignRenderGroups: true,
	}
	if err := p.CopyParams.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CopyParams), err)
	}
	return nil
}

func (p *OmniSciGetLayersInGeoFileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_layers_in_geo_file_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetLayersInGeoFileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetLayersInGeoFileArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("file_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:file_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.FileName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.file_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:file_name: ", p), err)
	}
	return err
}

func (p *OmniSciGetLayersInGeoFileArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("copy_params", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:copy_params: ", p), err)
	}
	if err := p.CopyParams.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CopyParams), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:copy_params: ", p), err)
	}
	return err
}

func (p *OmniSciGetLayersInGeoFileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetLayersInGeoFileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetLayersInGeoFileResult struct {
	Success []*TGeoFileLayerInfo `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException   `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetLayersInGeoFileResult() *OmniSciGetLayersInGeoFileResult {
	return &OmniSciGetLayersInGeoFileResult{}
}

var OmniSciGetLayersInGeoFileResult_Success_DEFAULT []*TGeoFileLayerInfo

func (p *OmniSciGetLayersInGeoFileResult) GetSuccess() []*TGeoFileLayerInfo {
	return p.Success
}

var OmniSciGetLayersInGeoFileResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetLayersInGeoFileResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetLayersInGeoFileResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetLayersInGeoFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetLayersInGeoFileResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetLayersInGeoFileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetLayersInGeoFileResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TGeoFileLayerInfo, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem249 := &TGeoFileLayerInfo{}
		if err := _elem249.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem249), err)
		}
		p.Success = append(p.Success, _elem249)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciGetLayersInGeoFileResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetLayersInGeoFileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_layers_in_geo_file_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetLayersInGeoFileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetLayersInGeoFileResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetLayersInGeoFileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetLayersInGeoFileResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Query
type OmniSciQueryGetOuterFragmentCountArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
	Query   string     `thrift:"query,2" json:"query"`
}

func NewOmniSciQueryGetOuterFragmentCountArgs() *OmniSciQueryGetOuterFragmentCountArgs {
	return &OmniSciQueryGetOuterFragmentCountArgs{}
}

func (p *OmniSciQueryGetOuterFragmentCountArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciQueryGetOuterFragmentCountArgs) GetQuery() string {
	return p.Query
}
func (p *OmniSciQueryGetOuterFragmentCountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciQueryGetOuterFragmentCountArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciQueryGetOuterFragmentCountArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Query = v
	}
	return nil
}

func (p *OmniSciQueryGetOuterFragmentCountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("query_get_outer_fragment_count_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciQueryGetOuterFragmentCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciQueryGetOuterFragmentCountArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query: ", p), err)
	}
	if err := oprot.WriteString(string(p.Query)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.query (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query: ", p), err)
	}
	return err
}

func (p *OmniSciQueryGetOuterFragmentCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciQueryGetOuterFragmentCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciQueryGetOuterFragmentCountResult struct {
	Success *int64             `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciQueryGetOuterFragmentCountResult() *OmniSciQueryGetOuterFragmentCountResult {
	return &OmniSciQueryGetOuterFragmentCountResult{}
}

var OmniSciQueryGetOuterFragmentCountResult_Success_DEFAULT int64

func (p *OmniSciQueryGetOuterFragmentCountResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return OmniSciQueryGetOuterFragmentCountResult_Success_DEFAULT
	}
	return *p.Success
}

var OmniSciQueryGetOuterFragmentCountResult_E_DEFAULT *TOmniSciException

func (p *OmniSciQueryGetOuterFragmentCountResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciQueryGetOuterFragmentCountResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciQueryGetOuterFragmentCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciQueryGetOuterFragmentCountResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciQueryGetOuterFragmentCountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciQueryGetOuterFragmentCountResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *OmniSciQueryGetOuterFragmentCountResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciQueryGetOuterFragmentCountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("query_get_outer_fragment_count_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciQueryGetOuterFragmentCountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciQueryGetOuterFragmentCountResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciQueryGetOuterFragmentCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciQueryGetOuterFragmentCountResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableID
type OmniSciCheckTableConsistencyArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
	TableID int32      `thrift:"table_id,2" json:"table_id"`
}

func NewOmniSciCheckTableConsistencyArgs() *OmniSciCheckTableConsistencyArgs {
	return &OmniSciCheckTableConsistencyArgs{}
}

func (p *OmniSciCheckTableConsistencyArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciCheckTableConsistencyArgs) GetTableID() int32 {
	return p.TableID
}
func (p *OmniSciCheckTableConsistencyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciCheckTableConsistencyArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciCheckTableConsistencyArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableID = v
	}
	return nil
}

func (p *OmniSciCheckTableConsistencyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("check_table_consistency_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciCheckTableConsistencyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciCheckTableConsistencyArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TableID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_id: ", p), err)
	}
	return err
}

func (p *OmniSciCheckTableConsistencyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciCheckTableConsistencyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciCheckTableConsistencyResult struct {
	Success *TTableMeta        `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciCheckTableConsistencyResult() *OmniSciCheckTableConsistencyResult {
	return &OmniSciCheckTableConsistencyResult{}
}

var OmniSciCheckTableConsistencyResult_Success_DEFAULT *TTableMeta

func (p *OmniSciCheckTableConsistencyResult) GetSuccess() *TTableMeta {
	if !p.IsSetSuccess() {
		return OmniSciCheckTableConsistencyResult_Success_DEFAULT
	}
	return p.Success
}

var OmniSciCheckTableConsistencyResult_E_DEFAULT *TOmniSciException

func (p *OmniSciCheckTableConsistencyResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciCheckTableConsistencyResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciCheckTableConsistencyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciCheckTableConsistencyResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciCheckTableConsistencyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciCheckTableConsistencyResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TTableMeta{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *OmniSciCheckTableConsistencyResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciCheckTableConsistencyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("check_table_consistency_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciCheckTableConsistencyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciCheckTableConsistencyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciCheckTableConsistencyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciCheckTableConsistencyResult(%+v)", *p)
}

// Attributes:
//  - LeafSession
//  - ParentSession
//  - QueryRa
//  - StartTimeStr
//  - JustExplain
//  - OuterFragmentIndices
type OmniSciStartQueryArgs struct {
	LeafSession          TSessionId `thrift:"leaf_session,1" json:"leaf_session"`
	ParentSession        TSessionId `thrift:"parent_session,2" json:"parent_session"`
	QueryRa              string     `thrift:"query_ra,3" json:"query_ra"`
	StartTimeStr         string     `thrift:"start_time_str,4" json:"start_time_str"`
	JustExplain          bool       `thrift:"just_explain,5" json:"just_explain"`
	OuterFragmentIndices []int64    `thrift:"outer_fragment_indices,6" json:"outer_fragment_indices"`
}

func NewOmniSciStartQueryArgs() *OmniSciStartQueryArgs {
	return &OmniSciStartQueryArgs{}
}

func (p *OmniSciStartQueryArgs) GetLeafSession() TSessionId {
	return p.LeafSession
}

func (p *OmniSciStartQueryArgs) GetParentSession() TSessionId {
	return p.ParentSession
}

func (p *OmniSciStartQueryArgs) GetQueryRa() string {
	return p.QueryRa
}

func (p *OmniSciStartQueryArgs) GetStartTimeStr() string {
	return p.StartTimeStr
}

func (p *OmniSciStartQueryArgs) GetJustExplain() bool {
	return p.JustExplain
}

func (p *OmniSciStartQueryArgs) GetOuterFragmentIndices() []int64 {
	return p.OuterFragmentIndices
}
func (p *OmniSciStartQueryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciStartQueryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.LeafSession = temp
	}
	return nil
}

func (p *OmniSciStartQueryArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TSessionId(v)
		p.ParentSession = temp
	}
	return nil
}

func (p *OmniSciStartQueryArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.QueryRa = v
	}
	return nil
}

func (p *OmniSciStartQueryArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.StartTimeStr = v
	}
	return nil
}

func (p *OmniSciStartQueryArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.JustExplain = v
	}
	return nil
}

func (p *OmniSciStartQueryArgs) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.OuterFragmentIndices = tSlice
	for i := 0; i < size; i++ {
		var _elem250 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem250 = v
		}
		p.OuterFragmentIndices = append(p.OuterFragmentIndices, _elem250)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciStartQueryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("start_query_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciStartQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("leaf_session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:leaf_session: ", p), err)
	}
	if err := oprot.WriteString(string(p.LeafSession)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.leaf_session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:leaf_session: ", p), err)
	}
	return err
}

func (p *OmniSciStartQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parent_session", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parent_session: ", p), err)
	}
	if err := oprot.WriteString(string(p.ParentSession)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.parent_session (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parent_session: ", p), err)
	}
	return err
}

func (p *OmniSciStartQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query_ra", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:query_ra: ", p), err)
	}
	if err := oprot.WriteString(string(p.QueryRa)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.query_ra (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:query_ra: ", p), err)
	}
	return err
}

func (p *OmniSciStartQueryArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_time_str", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:start_time_str: ", p), err)
	}
	if err := oprot.WriteString(string(p.StartTimeStr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start_time_str (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:start_time_str: ", p), err)
	}
	return err
}

func (p *OmniSciStartQueryArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("just_explain", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:just_explain: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.JustExplain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.just_explain (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:just_explain: ", p), err)
	}
	return err
}

func (p *OmniSciStartQueryArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("outer_fragment_indices", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:outer_fragment_indices: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.OuterFragmentIndices)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.OuterFragmentIndices {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:outer_fragment_indices: ", p), err)
	}
	return err
}

func (p *OmniSciStartQueryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciStartQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciStartQueryResult struct {
	Success *TPendingQuery     `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciStartQueryResult() *OmniSciStartQueryResult {
	return &OmniSciStartQueryResult{}
}

var OmniSciStartQueryResult_Success_DEFAULT *TPendingQuery

func (p *OmniSciStartQueryResult) GetSuccess() *TPendingQuery {
	if !p.IsSetSuccess() {
		return OmniSciStartQueryResult_Success_DEFAULT
	}
	return p.Success
}

var OmniSciStartQueryResult_E_DEFAULT *TOmniSciException

func (p *OmniSciStartQueryResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciStartQueryResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciStartQueryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciStartQueryResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciStartQueryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciStartQueryResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TPendingQuery{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *OmniSciStartQueryResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciStartQueryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("start_query_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciStartQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciStartQueryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciStartQueryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciStartQueryResult(%+v)", *p)
}

// Attributes:
//  - PendingQuery
//  - SubqueryID
//  - StartTimeStr
type OmniSciExecuteQueryStepArgs struct {
	PendingQuery *TPendingQuery `thrift:"pending_query,1" json:"pending_query"`
	SubqueryID   TSubqueryId    `thrift:"subquery_id,2" json:"subquery_id"`
	StartTimeStr string         `thrift:"start_time_str,3" json:"start_time_str"`
}

func NewOmniSciExecuteQueryStepArgs() *OmniSciExecuteQueryStepArgs {
	return &OmniSciExecuteQueryStepArgs{}
}

var OmniSciExecuteQueryStepArgs_PendingQuery_DEFAULT *TPendingQuery

func (p *OmniSciExecuteQueryStepArgs) GetPendingQuery() *TPendingQuery {
	if !p.IsSetPendingQuery() {
		return OmniSciExecuteQueryStepArgs_PendingQuery_DEFAULT
	}
	return p.PendingQuery
}

func (p *OmniSciExecuteQueryStepArgs) GetSubqueryID() TSubqueryId {
	return p.SubqueryID
}

func (p *OmniSciExecuteQueryStepArgs) GetStartTimeStr() string {
	return p.StartTimeStr
}
func (p *OmniSciExecuteQueryStepArgs) IsSetPendingQuery() bool {
	return p.PendingQuery != nil
}

func (p *OmniSciExecuteQueryStepArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciExecuteQueryStepArgs) readField1(iprot thrift.TProtocol) error {
	p.PendingQuery = &TPendingQuery{}
	if err := p.PendingQuery.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PendingQuery), err)
	}
	return nil
}

func (p *OmniSciExecuteQueryStepArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TSubqueryId(v)
		p.SubqueryID = temp
	}
	return nil
}

func (p *OmniSciExecuteQueryStepArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StartTimeStr = v
	}
	return nil
}

func (p *OmniSciExecuteQueryStepArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("execute_query_step_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciExecuteQueryStepArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pending_query", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pending_query: ", p), err)
	}
	if err := p.PendingQuery.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PendingQuery), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pending_query: ", p), err)
	}
	return err
}

func (p *OmniSciExecuteQueryStepArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subquery_id", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:subquery_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SubqueryID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.subquery_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:subquery_id: ", p), err)
	}
	return err
}

func (p *OmniSciExecuteQueryStepArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_time_str", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:start_time_str: ", p), err)
	}
	if err := oprot.WriteString(string(p.StartTimeStr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start_time_str (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:start_time_str: ", p), err)
	}
	return err
}

func (p *OmniSciExecuteQueryStepArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciExecuteQueryStepArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciExecuteQueryStepResult struct {
	Success *TStepResult_      `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciExecuteQueryStepResult() *OmniSciExecuteQueryStepResult {
	return &OmniSciExecuteQueryStepResult{}
}

var OmniSciExecuteQueryStepResult_Success_DEFAULT *TStepResult_

func (p *OmniSciExecuteQueryStepResult) GetSuccess() *TStepResult_ {
	if !p.IsSetSuccess() {
		return OmniSciExecuteQueryStepResult_Success_DEFAULT
	}
	return p.Success
}

var OmniSciExecuteQueryStepResult_E_DEFAULT *TOmniSciException

func (p *OmniSciExecuteQueryStepResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciExecuteQueryStepResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciExecuteQueryStepResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciExecuteQueryStepResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciExecuteQueryStepResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciExecuteQueryStepResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TStepResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *OmniSciExecuteQueryStepResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciExecuteQueryStepResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("execute_query_step_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciExecuteQueryStepResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciExecuteQueryStepResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciExecuteQueryStepResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciExecuteQueryStepResult(%+v)", *p)
}

// Attributes:
//  - SerializedRows
//  - RowDesc
//  - QueryID
//  - SubqueryID
//  - IsFinalSubqueryResult_
type OmniSciBroadcastSerializedRowsArgs struct {
	SerializedRows         *serialized_result_set.TSerializedRows `thrift:"serialized_rows,1" json:"serialized_rows"`
	RowDesc                TRowDescriptor                         `thrift:"row_desc,2" json:"row_desc"`
	QueryID                TQueryId                               `thrift:"query_id,3" json:"query_id"`
	SubqueryID             TSubqueryId                            `thrift:"subquery_id,4" json:"subquery_id"`
	IsFinalSubqueryResult_ bool                                   `thrift:"is_final_subquery_result,5" json:"is_final_subquery_result"`
}

func NewOmniSciBroadcastSerializedRowsArgs() *OmniSciBroadcastSerializedRowsArgs {
	return &OmniSciBroadcastSerializedRowsArgs{}
}

var OmniSciBroadcastSerializedRowsArgs_SerializedRows_DEFAULT *serialized_result_set.TSerializedRows

func (p *OmniSciBroadcastSerializedRowsArgs) GetSerializedRows() *serialized_result_set.TSerializedRows {
	if !p.IsSetSerializedRows() {
		return OmniSciBroadcastSerializedRowsArgs_SerializedRows_DEFAULT
	}
	return p.SerializedRows
}

func (p *OmniSciBroadcastSerializedRowsArgs) GetRowDesc() TRowDescriptor {
	return p.RowDesc
}

func (p *OmniSciBroadcastSerializedRowsArgs) GetQueryID() TQueryId {
	return p.QueryID
}

func (p *OmniSciBroadcastSerializedRowsArgs) GetSubqueryID() TSubqueryId {
	return p.SubqueryID
}

func (p *OmniSciBroadcastSerializedRowsArgs) GetIsFinalSubqueryResult_() bool {
	return p.IsFinalSubqueryResult_
}
func (p *OmniSciBroadcastSerializedRowsArgs) IsSetSerializedRows() bool {
	return p.SerializedRows != nil
}

func (p *OmniSciBroadcastSerializedRowsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciBroadcastSerializedRowsArgs) readField1(iprot thrift.TProtocol) error {
	p.SerializedRows = &serialized_result_set.TSerializedRows{}
	if err := p.SerializedRows.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SerializedRows), err)
	}
	return nil
}

func (p *OmniSciBroadcastSerializedRowsArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(TRowDescriptor, 0, size)
	p.RowDesc = tSlice
	for i := 0; i < size; i++ {
		_elem251 := &TColumnType{}
		if err := _elem251.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem251), err)
		}
		p.RowDesc = append(p.RowDesc, _elem251)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciBroadcastSerializedRowsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := TQueryId(v)
		p.QueryID = temp
	}
	return nil
}

func (p *OmniSciBroadcastSerializedRowsArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := TSubqueryId(v)
		p.SubqueryID = temp
	}
	return nil
}

func (p *OmniSciBroadcastSerializedRowsArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IsFinalSubqueryResult_ = v
	}
	return nil
}

func (p *OmniSciBroadcastSerializedRowsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("broadcast_serialized_rows_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciBroadcastSerializedRowsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serialized_rows", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serialized_rows: ", p), err)
	}
	if err := p.SerializedRows.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SerializedRows), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serialized_rows: ", p), err)
	}
	return err
}

func (p *OmniSciBroadcastSerializedRowsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row_desc", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row_desc: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowDesc)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RowDesc {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row_desc: ", p), err)
	}
	return err
}

func (p *OmniSciBroadcastSerializedRowsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query_id", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:query_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.QueryID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.query_id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:query_id: ", p), err)
	}
	return err
}

func (p *OmniSciBroadcastSerializedRowsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subquery_id", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:subquery_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SubqueryID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.subquery_id (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:subquery_id: ", p), err)
	}
	return err
}

func (p *OmniSciBroadcastSerializedRowsArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_final_subquery_result", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:is_final_subquery_result: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsFinalSubqueryResult_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_final_subquery_result (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:is_final_subquery_result: ", p), err)
	}
	return err
}

func (p *OmniSciBroadcastSerializedRowsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciBroadcastSerializedRowsArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciBroadcastSerializedRowsResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciBroadcastSerializedRowsResult() *OmniSciBroadcastSerializedRowsResult {
	return &OmniSciBroadcastSerializedRowsResult{}
}

var OmniSciBroadcastSerializedRowsResult_E_DEFAULT *TOmniSciException

func (p *OmniSciBroadcastSerializedRowsResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciBroadcastSerializedRowsResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciBroadcastSerializedRowsResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciBroadcastSerializedRowsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciBroadcastSerializedRowsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciBroadcastSerializedRowsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("broadcast_serialized_rows_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciBroadcastSerializedRowsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciBroadcastSerializedRowsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciBroadcastSerializedRowsResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - WidgetID
//  - NodeIdx
//  - VegaJSON
type OmniSciStartRenderQueryArgs struct {
	Session  TSessionId `thrift:"session,1" json:"session"`
	WidgetID int64      `thrift:"widget_id,2" json:"widget_id"`
	NodeIdx  int16      `thrift:"node_idx,3" json:"node_idx"`
	VegaJSON string     `thrift:"vega_json,4" json:"vega_json"`
}

func NewOmniSciStartRenderQueryArgs() *OmniSciStartRenderQueryArgs {
	return &OmniSciStartRenderQueryArgs{}
}

func (p *OmniSciStartRenderQueryArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciStartRenderQueryArgs) GetWidgetID() int64 {
	return p.WidgetID
}

func (p *OmniSciStartRenderQueryArgs) GetNodeIdx() int16 {
	return p.NodeIdx
}

func (p *OmniSciStartRenderQueryArgs) GetVegaJSON() string {
	return p.VegaJSON
}
func (p *OmniSciStartRenderQueryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciStartRenderQueryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciStartRenderQueryArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.WidgetID = v
	}
	return nil
}

func (p *OmniSciStartRenderQueryArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NodeIdx = v
	}
	return nil
}

func (p *OmniSciStartRenderQueryArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.VegaJSON = v
	}
	return nil
}

func (p *OmniSciStartRenderQueryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("start_render_query_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciStartRenderQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciStartRenderQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("widget_id", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:widget_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.WidgetID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.widget_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:widget_id: ", p), err)
	}
	return err
}

func (p *OmniSciStartRenderQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("node_idx", thrift.I16, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:node_idx: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.NodeIdx)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.node_idx (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:node_idx: ", p), err)
	}
	return err
}

func (p *OmniSciStartRenderQueryArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vega_json", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:vega_json: ", p), err)
	}
	if err := oprot.WriteString(string(p.VegaJSON)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vega_json (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:vega_json: ", p), err)
	}
	return err
}

func (p *OmniSciStartRenderQueryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciStartRenderQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciStartRenderQueryResult struct {
	Success *TPendingRenderQuery `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException   `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciStartRenderQueryResult() *OmniSciStartRenderQueryResult {
	return &OmniSciStartRenderQueryResult{}
}

var OmniSciStartRenderQueryResult_Success_DEFAULT *TPendingRenderQuery

func (p *OmniSciStartRenderQueryResult) GetSuccess() *TPendingRenderQuery {
	if !p.IsSetSuccess() {
		return OmniSciStartRenderQueryResult_Success_DEFAULT
	}
	return p.Success
}

var OmniSciStartRenderQueryResult_E_DEFAULT *TOmniSciException

func (p *OmniSciStartRenderQueryResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciStartRenderQueryResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciStartRenderQueryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciStartRenderQueryResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciStartRenderQueryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciStartRenderQueryResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TPendingRenderQuery{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *OmniSciStartRenderQueryResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciStartRenderQueryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("start_render_query_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciStartRenderQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciStartRenderQueryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciStartRenderQueryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciStartRenderQueryResult(%+v)", *p)
}

// Attributes:
//  - PendingRender
//  - MergedData
type OmniSciExecuteNextRenderStepArgs struct {
	PendingRender *TPendingRenderQuery `thrift:"pending_render,1" json:"pending_render"`
	MergedData    TRenderAggDataMap    `thrift:"merged_data,2" json:"merged_data"`
}

func NewOmniSciExecuteNextRenderStepArgs() *OmniSciExecuteNextRenderStepArgs {
	return &OmniSciExecuteNextRenderStepArgs{}
}

var OmniSciExecuteNextRenderStepArgs_PendingRender_DEFAULT *TPendingRenderQuery

func (p *OmniSciExecuteNextRenderStepArgs) GetPendingRender() *TPendingRenderQuery {
	if !p.IsSetPendingRender() {
		return OmniSciExecuteNextRenderStepArgs_PendingRender_DEFAULT
	}
	return p.PendingRender
}

func (p *OmniSciExecuteNextRenderStepArgs) GetMergedData() TRenderAggDataMap {
	return p.MergedData
}
func (p *OmniSciExecuteNextRenderStepArgs) IsSetPendingRender() bool {
	return p.PendingRender != nil
}

func (p *OmniSciExecuteNextRenderStepArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciExecuteNextRenderStepArgs) readField1(iprot thrift.TProtocol) error {
	p.PendingRender = &TPendingRenderQuery{}
	if err := p.PendingRender.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PendingRender), err)
	}
	return nil
}

func (p *OmniSciExecuteNextRenderStepArgs) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(TRenderAggDataMap, size)
	p.MergedData = tMap
	for i := 0; i < size; i++ {
		var _key252 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key252 = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[string]map[string]map[string][]*TRenderDatum, size)
		_val253 := tMap
		for i := 0; i < size; i++ {
			var _key254 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key254 = v
			}
			_, _, size, err := iprot.ReadMapBegin()
			if err != nil {
				return thrift.PrependError("error reading map begin: ", err)
			}
			tMap := make(map[string]map[string][]*TRenderDatum, size)
			_val255 := tMap
			for i := 0; i < size; i++ {
				var _key256 string
				if v, err := iprot.ReadString(); err != nil {
					return thrift.PrependError("error reading field 0: ", err)
				} else {
					_key256 = v
				}
				_, _, size, err := iprot.ReadMapBegin()
				if err != nil {
					return thrift.PrependError("error reading map begin: ", err)
				}
				tMap := make(map[string][]*TRenderDatum, size)
				_val257 := tMap
				for i := 0; i < size; i++ {
					var _key258 string
					if v, err := iprot.ReadString(); err != nil {
						return thrift.PrependError("error reading field 0: ", err)
					} else {
						_key258 = v
					}
					_, size, err := iprot.ReadListBegin()
					if err != nil {
						return thrift.PrependError("error reading list begin: ", err)
					}
					tSlice := make([]*TRenderDatum, 0, size)
					_val259 := tSlice
					for i := 0; i < size; i++ {
						_elem260 := &TRenderDatum{}
						if err := _elem260.Read(iprot); err != nil {
							return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem260), err)
						}
						_val259 = append(_val259, _elem260)
					}
					if err := iprot.ReadListEnd(); err != nil {
						return thrift.PrependError("error reading list end: ", err)
					}
					_val257[_key258] = _val259
				}
				if err := iprot.ReadMapEnd(); err != nil {
					return thrift.PrependError("error reading map end: ", err)
				}
				_val255[_key256] = _val257
			}
			if err := iprot.ReadMapEnd(); err != nil {
				return thrift.PrependError("error reading map end: ", err)
			}
			_val253[_key254] = _val255
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.MergedData[_key252] = _val253
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *OmniSciExecuteNextRenderStepArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("execute_next_render_step_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciExecuteNextRenderStepArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pending_render", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pending_render: ", p), err)
	}
	if err := p.PendingRender.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PendingRender), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pending_render: ", p), err)
	}
	return err
}

func (p *OmniSciExecuteNextRenderStepArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("merged_data", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:merged_data: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.MergedData)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.MergedData {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(v)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range v {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteString(string(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(v)); err != nil {
					return thrift.PrependError("error writing map begin: ", err)
				}
				for k, v := range v {
					if err := oprot.WriteString(string(k)); err != nil {
						return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
					}
					if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
						return thrift.PrependError("error writing list begin: ", err)
					}
					for _, v := range v {
						if err := v.Write(oprot); err != nil {
							return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
						}
					}
					if err := oprot.WriteListEnd(); err != nil {
						return thrift.PrependError("error writing list end: ", err)
					}
				}
				if err := oprot.WriteMapEnd(); err != nil {
					return thrift.PrependError("error writing map end: ", err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:merged_data: ", p), err)
	}
	return err
}

func (p *OmniSciExecuteNextRenderStepArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciExecuteNextRenderStepArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciExecuteNextRenderStepResult struct {
	Success *TRenderStepResult_ `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException  `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciExecuteNextRenderStepResult() *OmniSciExecuteNextRenderStepResult {
	return &OmniSciExecuteNextRenderStepResult{}
}

var OmniSciExecuteNextRenderStepResult_Success_DEFAULT *TRenderStepResult_

func (p *OmniSciExecuteNextRenderStepResult) GetSuccess() *TRenderStepResult_ {
	if !p.IsSetSuccess() {
		return OmniSciExecuteNextRenderStepResult_Success_DEFAULT
	}
	return p.Success
}

var OmniSciExecuteNextRenderStepResult_E_DEFAULT *TOmniSciException

func (p *OmniSciExecuteNextRenderStepResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciExecuteNextRenderStepResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciExecuteNextRenderStepResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciExecuteNextRenderStepResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciExecuteNextRenderStepResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciExecuteNextRenderStepResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TRenderStepResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *OmniSciExecuteNextRenderStepResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciExecuteNextRenderStepResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("execute_next_render_step_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciExecuteNextRenderStepResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciExecuteNextRenderStepResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciExecuteNextRenderStepResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciExecuteNextRenderStepResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - InsertData
type OmniSciInsertDataArgs struct {
	Session    TSessionId   `thrift:"session,1" json:"session"`
	InsertData *TInsertData `thrift:"insert_data,2" json:"insert_data"`
}

func NewOmniSciInsertDataArgs() *OmniSciInsertDataArgs {
	return &OmniSciInsertDataArgs{}
}

func (p *OmniSciInsertDataArgs) GetSession() TSessionId {
	return p.Session
}

var OmniSciInsertDataArgs_InsertData_DEFAULT *TInsertData

func (p *OmniSciInsertDataArgs) GetInsertData() *TInsertData {
	if !p.IsSetInsertData() {
		return OmniSciInsertDataArgs_InsertData_DEFAULT
	}
	return p.InsertData
}
func (p *OmniSciInsertDataArgs) IsSetInsertData() bool {
	return p.InsertData != nil
}

func (p *OmniSciInsertDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciInsertDataArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciInsertDataArgs) readField2(iprot thrift.TProtocol) error {
	p.InsertData = &TInsertData{}
	if err := p.InsertData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InsertData), err)
	}
	return nil
}

func (p *OmniSciInsertDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("insert_data_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciInsertDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciInsertDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("insert_data", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:insert_data: ", p), err)
	}
	if err := p.InsertData.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InsertData), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:insert_data: ", p), err)
	}
	return err
}

func (p *OmniSciInsertDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciInsertDataArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciInsertDataResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciInsertDataResult() *OmniSciInsertDataResult {
	return &OmniSciInsertDataResult{}
}

var OmniSciInsertDataResult_E_DEFAULT *TOmniSciException

func (p *OmniSciInsertDataResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciInsertDataResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciInsertDataResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciInsertDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciInsertDataResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciInsertDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("insert_data_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciInsertDataResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciInsertDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciInsertDataResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - TableID
type OmniSciCheckpointArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
	TableID int32      `thrift:"table_id,2" json:"table_id"`
}

func NewOmniSciCheckpointArgs() *OmniSciCheckpointArgs {
	return &OmniSciCheckpointArgs{}
}

func (p *OmniSciCheckpointArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciCheckpointArgs) GetTableID() int32 {
	return p.TableID
}
func (p *OmniSciCheckpointArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciCheckpointArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciCheckpointArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableID = v
	}
	return nil
}

func (p *OmniSciCheckpointArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkpoint_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciCheckpointArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciCheckpointArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TableID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_id: ", p), err)
	}
	return err
}

func (p *OmniSciCheckpointArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciCheckpointArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciCheckpointResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciCheckpointResult() *OmniSciCheckpointResult {
	return &OmniSciCheckpointResult{}
}

var OmniSciCheckpointResult_E_DEFAULT *TOmniSciException

func (p *OmniSciCheckpointResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciCheckpointResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciCheckpointResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciCheckpointResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciCheckpointResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciCheckpointResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkpoint_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciCheckpointResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciCheckpointResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciCheckpointResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetRolesArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
}

func NewOmniSciGetRolesArgs() *OmniSciGetRolesArgs {
	return &OmniSciGetRolesArgs{}
}

func (p *OmniSciGetRolesArgs) GetSession() TSessionId {
	return p.Session
}
func (p *OmniSciGetRolesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetRolesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetRolesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_roles_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetRolesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetRolesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetRolesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetRolesResult struct {
	Success []string           `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetRolesResult() *OmniSciGetRolesResult {
	return &OmniSciGetRolesResult{}
}

var OmniSciGetRolesResult_Success_DEFAULT []string

func (p *OmniSciGetRolesResult) GetSuccess() []string {
	return p.Success
}

var OmniSciGetRolesResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetRolesResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetRolesResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetRolesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetRolesResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetRolesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetRolesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem261 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem261 = v
		}
		p.Success = append(p.Success, _elem261)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciGetRolesResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetRolesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_roles_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetRolesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetRolesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetRolesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetRolesResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - RoleName
type OmniSciGetDbObjectsForGranteeArgs struct {
	Session  TSessionId `thrift:"session,1" json:"session"`
	RoleName string     `thrift:"roleName,2" json:"roleName"`
}

func NewOmniSciGetDbObjectsForGranteeArgs() *OmniSciGetDbObjectsForGranteeArgs {
	return &OmniSciGetDbObjectsForGranteeArgs{}
}

func (p *OmniSciGetDbObjectsForGranteeArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciGetDbObjectsForGranteeArgs) GetRoleName() string {
	return p.RoleName
}
func (p *OmniSciGetDbObjectsForGranteeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetDbObjectsForGranteeArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetDbObjectsForGranteeArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *OmniSciGetDbObjectsForGranteeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_db_objects_for_grantee_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetDbObjectsForGranteeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetDbObjectsForGranteeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roleName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roleName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roleName: ", p), err)
	}
	return err
}

func (p *OmniSciGetDbObjectsForGranteeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetDbObjectsForGranteeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetDbObjectsForGranteeResult struct {
	Success []*TDBObject       `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetDbObjectsForGranteeResult() *OmniSciGetDbObjectsForGranteeResult {
	return &OmniSciGetDbObjectsForGranteeResult{}
}

var OmniSciGetDbObjectsForGranteeResult_Success_DEFAULT []*TDBObject

func (p *OmniSciGetDbObjectsForGranteeResult) GetSuccess() []*TDBObject {
	return p.Success
}

var OmniSciGetDbObjectsForGranteeResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetDbObjectsForGranteeResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetDbObjectsForGranteeResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetDbObjectsForGranteeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetDbObjectsForGranteeResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetDbObjectsForGranteeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetDbObjectsForGranteeResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TDBObject, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem262 := &TDBObject{}
		if err := _elem262.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem262), err)
		}
		p.Success = append(p.Success, _elem262)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciGetDbObjectsForGranteeResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetDbObjectsForGranteeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_db_objects_for_grantee_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetDbObjectsForGranteeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetDbObjectsForGranteeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetDbObjectsForGranteeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetDbObjectsForGranteeResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - ObjectName
//  - Type
type OmniSciGetDbObjectPrivsArgs struct {
	Session    TSessionId    `thrift:"session,1" json:"session"`
	ObjectName string        `thrift:"objectName,2" json:"objectName"`
	Type       TDBObjectType `thrift:"type,3" json:"type"`
}

func NewOmniSciGetDbObjectPrivsArgs() *OmniSciGetDbObjectPrivsArgs {
	return &OmniSciGetDbObjectPrivsArgs{}
}

func (p *OmniSciGetDbObjectPrivsArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciGetDbObjectPrivsArgs) GetObjectName() string {
	return p.ObjectName
}

func (p *OmniSciGetDbObjectPrivsArgs) GetType() TDBObjectType {
	return p.Type
}
func (p *OmniSciGetDbObjectPrivsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetDbObjectPrivsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetDbObjectPrivsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ObjectName = v
	}
	return nil
}

func (p *OmniSciGetDbObjectPrivsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := TDBObjectType(v)
		p.Type = temp
	}
	return nil
}

func (p *OmniSciGetDbObjectPrivsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_db_object_privs_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetDbObjectPrivsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetDbObjectPrivsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("objectName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:objectName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ObjectName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.objectName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:objectName: ", p), err)
	}
	return err
}

func (p *OmniSciGetDbObjectPrivsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err)
	}
	return err
}

func (p *OmniSciGetDbObjectPrivsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetDbObjectPrivsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetDbObjectPrivsResult struct {
	Success []*TDBObject       `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetDbObjectPrivsResult() *OmniSciGetDbObjectPrivsResult {
	return &OmniSciGetDbObjectPrivsResult{}
}

var OmniSciGetDbObjectPrivsResult_Success_DEFAULT []*TDBObject

func (p *OmniSciGetDbObjectPrivsResult) GetSuccess() []*TDBObject {
	return p.Success
}

var OmniSciGetDbObjectPrivsResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetDbObjectPrivsResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetDbObjectPrivsResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetDbObjectPrivsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetDbObjectPrivsResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetDbObjectPrivsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetDbObjectPrivsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TDBObject, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem263 := &TDBObject{}
		if err := _elem263.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem263), err)
		}
		p.Success = append(p.Success, _elem263)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciGetDbObjectPrivsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetDbObjectPrivsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_db_object_privs_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetDbObjectPrivsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetDbObjectPrivsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetDbObjectPrivsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetDbObjectPrivsResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - UserName
type OmniSciGetAllRolesForUserArgs struct {
	Session  TSessionId `thrift:"session,1" json:"session"`
	UserName string     `thrift:"userName,2" json:"userName"`
}

func NewOmniSciGetAllRolesForUserArgs() *OmniSciGetAllRolesForUserArgs {
	return &OmniSciGetAllRolesForUserArgs{}
}

func (p *OmniSciGetAllRolesForUserArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciGetAllRolesForUserArgs) GetUserName() string {
	return p.UserName
}
func (p *OmniSciGetAllRolesForUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetAllRolesForUserArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetAllRolesForUserArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *OmniSciGetAllRolesForUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_all_roles_for_user_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetAllRolesForUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetAllRolesForUserArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userName: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userName: ", p), err)
	}
	return err
}

func (p *OmniSciGetAllRolesForUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetAllRolesForUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetAllRolesForUserResult struct {
	Success []string           `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetAllRolesForUserResult() *OmniSciGetAllRolesForUserResult {
	return &OmniSciGetAllRolesForUserResult{}
}

var OmniSciGetAllRolesForUserResult_Success_DEFAULT []string

func (p *OmniSciGetAllRolesForUserResult) GetSuccess() []string {
	return p.Success
}

var OmniSciGetAllRolesForUserResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetAllRolesForUserResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetAllRolesForUserResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetAllRolesForUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetAllRolesForUserResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetAllRolesForUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetAllRolesForUserResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem264 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem264 = v
		}
		p.Success = append(p.Success, _elem264)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciGetAllRolesForUserResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetAllRolesForUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_all_roles_for_user_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetAllRolesForUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetAllRolesForUserResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetAllRolesForUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetAllRolesForUserResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - GranteeName
//  - RoleName
type OmniSciHasRoleArgs struct {
	Session     TSessionId `thrift:"session,1" json:"session"`
	GranteeName string     `thrift:"granteeName,2" json:"granteeName"`
	RoleName    string     `thrift:"roleName,3" json:"roleName"`
}

func NewOmniSciHasRoleArgs() *OmniSciHasRoleArgs {
	return &OmniSciHasRoleArgs{}
}

func (p *OmniSciHasRoleArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciHasRoleArgs) GetGranteeName() string {
	return p.GranteeName
}

func (p *OmniSciHasRoleArgs) GetRoleName() string {
	return p.RoleName
}
func (p *OmniSciHasRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciHasRoleArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciHasRoleArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GranteeName = v
	}
	return nil
}

func (p *OmniSciHasRoleArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *OmniSciHasRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("has_role_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciHasRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciHasRoleArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("granteeName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:granteeName: ", p), err)
	}
	if err := oprot.WriteString(string(p.GranteeName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.granteeName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:granteeName: ", p), err)
	}
	return err
}

func (p *OmniSciHasRoleArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roleName: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roleName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roleName: ", p), err)
	}
	return err
}

func (p *OmniSciHasRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciHasRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciHasRoleResult struct {
	Success *bool              `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciHasRoleResult() *OmniSciHasRoleResult {
	return &OmniSciHasRoleResult{}
}

var OmniSciHasRoleResult_Success_DEFAULT bool

func (p *OmniSciHasRoleResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return OmniSciHasRoleResult_Success_DEFAULT
	}
	return *p.Success
}

var OmniSciHasRoleResult_E_DEFAULT *TOmniSciException

func (p *OmniSciHasRoleResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciHasRoleResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciHasRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciHasRoleResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciHasRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciHasRoleResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *OmniSciHasRoleResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciHasRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("has_role_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciHasRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciHasRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciHasRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciHasRoleResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - GranteeName
//  - ObjectName
//  - ObjectType
//  - Permissions
type OmniSciHasObjectPrivilegeArgs struct {
	Session     TSessionId            `thrift:"session,1" json:"session"`
	GranteeName string                `thrift:"granteeName,2" json:"granteeName"`
	ObjectName  string                `thrift:"ObjectName,3" json:"ObjectName"`
	ObjectType  TDBObjectType         `thrift:"objectType,4" json:"objectType"`
	Permissions *TDBObjectPermissions `thrift:"permissions,5" json:"permissions"`
}

func NewOmniSciHasObjectPrivilegeArgs() *OmniSciHasObjectPrivilegeArgs {
	return &OmniSciHasObjectPrivilegeArgs{}
}

func (p *OmniSciHasObjectPrivilegeArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciHasObjectPrivilegeArgs) GetGranteeName() string {
	return p.GranteeName
}

func (p *OmniSciHasObjectPrivilegeArgs) GetObjectName() string {
	return p.ObjectName
}

func (p *OmniSciHasObjectPrivilegeArgs) GetObjectType() TDBObjectType {
	return p.ObjectType
}

var OmniSciHasObjectPrivilegeArgs_Permissions_DEFAULT *TDBObjectPermissions

func (p *OmniSciHasObjectPrivilegeArgs) GetPermissions() *TDBObjectPermissions {
	if !p.IsSetPermissions() {
		return OmniSciHasObjectPrivilegeArgs_Permissions_DEFAULT
	}
	return p.Permissions
}
func (p *OmniSciHasObjectPrivilegeArgs) IsSetPermissions() bool {
	return p.Permissions != nil
}

func (p *OmniSciHasObjectPrivilegeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciHasObjectPrivilegeArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciHasObjectPrivilegeArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GranteeName = v
	}
	return nil
}

func (p *OmniSciHasObjectPrivilegeArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ObjectName = v
	}
	return nil
}

func (p *OmniSciHasObjectPrivilegeArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := TDBObjectType(v)
		p.ObjectType = temp
	}
	return nil
}

func (p *OmniSciHasObjectPrivilegeArgs) readField5(iprot thrift.TProtocol) error {
	p.Permissions = &TDBObjectPermissions{}
	if err := p.Permissions.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Permissions), err)
	}
	return nil
}

func (p *OmniSciHasObjectPrivilegeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("has_object_privilege_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciHasObjectPrivilegeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciHasObjectPrivilegeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("granteeName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:granteeName: ", p), err)
	}
	if err := oprot.WriteString(string(p.GranteeName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.granteeName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:granteeName: ", p), err)
	}
	return err
}

func (p *OmniSciHasObjectPrivilegeArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ObjectName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ObjectName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ObjectName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ObjectName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ObjectName: ", p), err)
	}
	return err
}

func (p *OmniSciHasObjectPrivilegeArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("objectType", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:objectType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ObjectType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.objectType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:objectType: ", p), err)
	}
	return err
}

func (p *OmniSciHasObjectPrivilegeArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("permissions", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:permissions: ", p), err)
	}
	if err := p.Permissions.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Permissions), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:permissions: ", p), err)
	}
	return err
}

func (p *OmniSciHasObjectPrivilegeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciHasObjectPrivilegeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciHasObjectPrivilegeResult struct {
	Success *bool              `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciHasObjectPrivilegeResult() *OmniSciHasObjectPrivilegeResult {
	return &OmniSciHasObjectPrivilegeResult{}
}

var OmniSciHasObjectPrivilegeResult_Success_DEFAULT bool

func (p *OmniSciHasObjectPrivilegeResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return OmniSciHasObjectPrivilegeResult_Success_DEFAULT
	}
	return *p.Success
}

var OmniSciHasObjectPrivilegeResult_E_DEFAULT *TOmniSciException

func (p *OmniSciHasObjectPrivilegeResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciHasObjectPrivilegeResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciHasObjectPrivilegeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciHasObjectPrivilegeResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciHasObjectPrivilegeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciHasObjectPrivilegeResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *OmniSciHasObjectPrivilegeResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciHasObjectPrivilegeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("has_object_privilege_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciHasObjectPrivilegeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciHasObjectPrivilegeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciHasObjectPrivilegeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciHasObjectPrivilegeResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Key
//  - Nonce
type OmniSciSetLicenseKeyArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
	Key     string     `thrift:"key,2" json:"key"`
	Nonce   string     `thrift:"nonce,3" json:"nonce"`
}

func NewOmniSciSetLicenseKeyArgs() *OmniSciSetLicenseKeyArgs {
	return &OmniSciSetLicenseKeyArgs{}
}

func (p *OmniSciSetLicenseKeyArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciSetLicenseKeyArgs) GetKey() string {
	return p.Key
}

func (p *OmniSciSetLicenseKeyArgs) GetNonce() string {
	return p.Nonce
}
func (p *OmniSciSetLicenseKeyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciSetLicenseKeyArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciSetLicenseKeyArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *OmniSciSetLicenseKeyArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Nonce = v
	}
	return nil
}

func (p *OmniSciSetLicenseKeyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("set_license_key_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciSetLicenseKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciSetLicenseKeyArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err)
	}
	return err
}

func (p *OmniSciSetLicenseKeyArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nonce: ", p), err)
	}
	if err := oprot.WriteString(string(p.Nonce)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nonce (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nonce: ", p), err)
	}
	return err
}

func (p *OmniSciSetLicenseKeyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciSetLicenseKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciSetLicenseKeyResult struct {
	Success *TLicenseInfo      `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciSetLicenseKeyResult() *OmniSciSetLicenseKeyResult {
	return &OmniSciSetLicenseKeyResult{}
}

var OmniSciSetLicenseKeyResult_Success_DEFAULT *TLicenseInfo

func (p *OmniSciSetLicenseKeyResult) GetSuccess() *TLicenseInfo {
	if !p.IsSetSuccess() {
		return OmniSciSetLicenseKeyResult_Success_DEFAULT
	}
	return p.Success
}

var OmniSciSetLicenseKeyResult_E_DEFAULT *TOmniSciException

func (p *OmniSciSetLicenseKeyResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciSetLicenseKeyResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciSetLicenseKeyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciSetLicenseKeyResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciSetLicenseKeyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciSetLicenseKeyResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TLicenseInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *OmniSciSetLicenseKeyResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciSetLicenseKeyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("set_license_key_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciSetLicenseKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciSetLicenseKeyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciSetLicenseKeyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciSetLicenseKeyResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Nonce
type OmniSciGetLicenseClaimsArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
	Nonce   string     `thrift:"nonce,2" json:"nonce"`
}

func NewOmniSciGetLicenseClaimsArgs() *OmniSciGetLicenseClaimsArgs {
	return &OmniSciGetLicenseClaimsArgs{}
}

func (p *OmniSciGetLicenseClaimsArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciGetLicenseClaimsArgs) GetNonce() string {
	return p.Nonce
}
func (p *OmniSciGetLicenseClaimsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetLicenseClaimsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetLicenseClaimsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Nonce = v
	}
	return nil
}

func (p *OmniSciGetLicenseClaimsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_license_claims_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetLicenseClaimsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetLicenseClaimsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nonce: ", p), err)
	}
	if err := oprot.WriteString(string(p.Nonce)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nonce (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nonce: ", p), err)
	}
	return err
}

func (p *OmniSciGetLicenseClaimsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetLicenseClaimsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetLicenseClaimsResult struct {
	Success *TLicenseInfo      `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetLicenseClaimsResult() *OmniSciGetLicenseClaimsResult {
	return &OmniSciGetLicenseClaimsResult{}
}

var OmniSciGetLicenseClaimsResult_Success_DEFAULT *TLicenseInfo

func (p *OmniSciGetLicenseClaimsResult) GetSuccess() *TLicenseInfo {
	if !p.IsSetSuccess() {
		return OmniSciGetLicenseClaimsResult_Success_DEFAULT
	}
	return p.Success
}

var OmniSciGetLicenseClaimsResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetLicenseClaimsResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetLicenseClaimsResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetLicenseClaimsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetLicenseClaimsResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetLicenseClaimsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetLicenseClaimsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TLicenseInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *OmniSciGetLicenseClaimsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetLicenseClaimsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_license_claims_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetLicenseClaimsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetLicenseClaimsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetLicenseClaimsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetLicenseClaimsResult(%+v)", *p)
}

// Attributes:
//  - Session
type OmniSciGetDeviceParametersArgs struct {
	Session TSessionId `thrift:"session,1" json:"session"`
}

func NewOmniSciGetDeviceParametersArgs() *OmniSciGetDeviceParametersArgs {
	return &OmniSciGetDeviceParametersArgs{}
}

func (p *OmniSciGetDeviceParametersArgs) GetSession() TSessionId {
	return p.Session
}
func (p *OmniSciGetDeviceParametersArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetDeviceParametersArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciGetDeviceParametersArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_device_parameters_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetDeviceParametersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciGetDeviceParametersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetDeviceParametersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type OmniSciGetDeviceParametersResult struct {
	Success map[string]string  `thrift:"success,0" json:"success,omitempty"`
	E       *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciGetDeviceParametersResult() *OmniSciGetDeviceParametersResult {
	return &OmniSciGetDeviceParametersResult{}
}

var OmniSciGetDeviceParametersResult_Success_DEFAULT map[string]string

func (p *OmniSciGetDeviceParametersResult) GetSuccess() map[string]string {
	return p.Success
}

var OmniSciGetDeviceParametersResult_E_DEFAULT *TOmniSciException

func (p *OmniSciGetDeviceParametersResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciGetDeviceParametersResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciGetDeviceParametersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OmniSciGetDeviceParametersResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciGetDeviceParametersResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciGetDeviceParametersResult) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key265 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key265 = v
		}
		var _val266 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val266 = v
		}
		p.Success[_key265] = _val266
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *OmniSciGetDeviceParametersResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciGetDeviceParametersResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_device_parameters_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciGetDeviceParametersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetDeviceParametersResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciGetDeviceParametersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciGetDeviceParametersResult(%+v)", *p)
}

// Attributes:
//  - Session
//  - Udfs
//  - Udtfs
//  - DeviceIrMap
type OmniSciRegisterRuntimeExtensionFunctionsArgs struct {
	Session     TSessionId                                       `thrift:"session,1" json:"session"`
	Udfs        []*extension_functions.TUserDefinedFunction      `thrift:"udfs,2" json:"udfs"`
	Udtfs       []*extension_functions.TUserDefinedTableFunction `thrift:"udtfs,3" json:"udtfs"`
	DeviceIrMap map[string]string                                `thrift:"device_ir_map,4" json:"device_ir_map"`
}

func NewOmniSciRegisterRuntimeExtensionFunctionsArgs() *OmniSciRegisterRuntimeExtensionFunctionsArgs {
	return &OmniSciRegisterRuntimeExtensionFunctionsArgs{}
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) GetSession() TSessionId {
	return p.Session
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) GetUdfs() []*extension_functions.TUserDefinedFunction {
	return p.Udfs
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) GetUdtfs() []*extension_functions.TUserDefinedTableFunction {
	return p.Udtfs
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) GetDeviceIrMap() map[string]string {
	return p.DeviceIrMap
}
func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.Session = temp
	}
	return nil
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*extension_functions.TUserDefinedFunction, 0, size)
	p.Udfs = tSlice
	for i := 0; i < size; i++ {
		_elem267 := &extension_functions.TUserDefinedFunction{}
		if err := _elem267.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem267), err)
		}
		p.Udfs = append(p.Udfs, _elem267)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*extension_functions.TUserDefinedTableFunction, 0, size)
	p.Udtfs = tSlice
	for i := 0; i < size; i++ {
		_elem268 := &extension_functions.TUserDefinedTableFunction{}
		if err := _elem268.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem268), err)
		}
		p.Udtfs = append(p.Udtfs, _elem268)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.DeviceIrMap = tMap
	for i := 0; i < size; i++ {
		var _key269 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key269 = v
		}
		var _val270 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val270 = v
		}
		p.DeviceIrMap[_key269] = _val270
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("register_runtime_extension_functions_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("udfs", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:udfs: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Udfs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Udfs {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:udfs: ", p), err)
	}
	return err
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("udtfs", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:udtfs: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Udtfs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Udtfs {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:udtfs: ", p), err)
	}
	return err
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("device_ir_map", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:device_ir_map: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.DeviceIrMap)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.DeviceIrMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:device_ir_map: ", p), err)
	}
	return err
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciRegisterRuntimeExtensionFunctionsArgs(%+v)", *p)
}

// Attributes:
//  - E
type OmniSciRegisterRuntimeExtensionFunctionsResult struct {
	E *TOmniSciException `thrift:"e,1" json:"e,omitempty"`
}

func NewOmniSciRegisterRuntimeExtensionFunctionsResult() *OmniSciRegisterRuntimeExtensionFunctionsResult {
	return &OmniSciRegisterRuntimeExtensionFunctionsResult{}
}

var OmniSciRegisterRuntimeExtensionFunctionsResult_E_DEFAULT *TOmniSciException

func (p *OmniSciRegisterRuntimeExtensionFunctionsResult) GetE() *TOmniSciException {
	if !p.IsSetE() {
		return OmniSciRegisterRuntimeExtensionFunctionsResult_E_DEFAULT
	}
	return p.E
}
func (p *OmniSciRegisterRuntimeExtensionFunctionsResult) IsSetE() bool {
	return p.E != nil
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsResult) readField1(iprot thrift.TProtocol) error {
	p.E = &TOmniSciException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("register_runtime_extension_functions_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *OmniSciRegisterRuntimeExtensionFunctionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OmniSciRegisterRuntimeExtensionFunctionsResult(%+v)", *p)
}
