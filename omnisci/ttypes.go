// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package omnisci

import (
	"bytes"
	"common"
	"completion_hints"
	"extension_functions"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"serialized_result_set"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = completion_hints.GoUnusedProtection__
var _ = serialized_result_set.GoUnusedProtection__
var _ = extension_functions.GoUnusedProtection__
var GoUnusedProtection__ int

type TExecuteMode int64

const (
	TExecuteMode_GPU TExecuteMode = 1
	TExecuteMode_CPU TExecuteMode = 2
)

func (p TExecuteMode) String() string {
	switch p {
	case TExecuteMode_GPU:
		return "GPU"
	case TExecuteMode_CPU:
		return "CPU"
	}
	return "<UNSET>"
}

func TExecuteModeFromString(s string) (TExecuteMode, error) {
	switch s {
	case "GPU":
		return TExecuteMode_GPU, nil
	case "CPU":
		return TExecuteMode_CPU, nil
	}
	return TExecuteMode(0), fmt.Errorf("not a valid TExecuteMode string")
}

func TExecuteModePtr(v TExecuteMode) *TExecuteMode { return &v }

func (p TExecuteMode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TExecuteMode) UnmarshalText(text []byte) error {
	q, err := TExecuteModeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type TFileType int64

const (
	TFileType_DELIMITED TFileType = 0
	TFileType_POLYGON   TFileType = 1
	TFileType_PARQUET   TFileType = 2
)

func (p TFileType) String() string {
	switch p {
	case TFileType_DELIMITED:
		return "DELIMITED"
	case TFileType_POLYGON:
		return "POLYGON"
	case TFileType_PARQUET:
		return "PARQUET"
	}
	return "<UNSET>"
}

func TFileTypeFromString(s string) (TFileType, error) {
	switch s {
	case "DELIMITED":
		return TFileType_DELIMITED, nil
	case "POLYGON":
		return TFileType_POLYGON, nil
	case "PARQUET":
		return TFileType_PARQUET, nil
	}
	return TFileType(0), fmt.Errorf("not a valid TFileType string")
}

func TFileTypePtr(v TFileType) *TFileType { return &v }

func (p TFileType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TFileType) UnmarshalText(text []byte) error {
	q, err := TFileTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type TPartitionDetail int64

const (
	TPartitionDetail_DEFAULT    TPartitionDetail = 0
	TPartitionDetail_REPLICATED TPartitionDetail = 1
	TPartitionDetail_SHARDED    TPartitionDetail = 2
	TPartitionDetail_OTHER      TPartitionDetail = 3
)

func (p TPartitionDetail) String() string {
	switch p {
	case TPartitionDetail_DEFAULT:
		return "DEFAULT"
	case TPartitionDetail_REPLICATED:
		return "REPLICATED"
	case TPartitionDetail_SHARDED:
		return "SHARDED"
	case TPartitionDetail_OTHER:
		return "OTHER"
	}
	return "<UNSET>"
}

func TPartitionDetailFromString(s string) (TPartitionDetail, error) {
	switch s {
	case "DEFAULT":
		return TPartitionDetail_DEFAULT, nil
	case "REPLICATED":
		return TPartitionDetail_REPLICATED, nil
	case "SHARDED":
		return TPartitionDetail_SHARDED, nil
	case "OTHER":
		return TPartitionDetail_OTHER, nil
	}
	return TPartitionDetail(0), fmt.Errorf("not a valid TPartitionDetail string")
}

func TPartitionDetailPtr(v TPartitionDetail) *TPartitionDetail { return &v }

func (p TPartitionDetail) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TPartitionDetail) UnmarshalText(text []byte) error {
	q, err := TPartitionDetailFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type TGeoFileLayerContents int64

const (
	TGeoFileLayerContents_EMPTY           TGeoFileLayerContents = 0
	TGeoFileLayerContents_GEO             TGeoFileLayerContents = 1
	TGeoFileLayerContents_NON_GEO         TGeoFileLayerContents = 2
	TGeoFileLayerContents_UNSUPPORTED_GEO TGeoFileLayerContents = 3
)

func (p TGeoFileLayerContents) String() string {
	switch p {
	case TGeoFileLayerContents_EMPTY:
		return "EMPTY"
	case TGeoFileLayerContents_GEO:
		return "GEO"
	case TGeoFileLayerContents_NON_GEO:
		return "NON_GEO"
	case TGeoFileLayerContents_UNSUPPORTED_GEO:
		return "UNSUPPORTED_GEO"
	}
	return "<UNSET>"
}

func TGeoFileLayerContentsFromString(s string) (TGeoFileLayerContents, error) {
	switch s {
	case "EMPTY":
		return TGeoFileLayerContents_EMPTY, nil
	case "GEO":
		return TGeoFileLayerContents_GEO, nil
	case "NON_GEO":
		return TGeoFileLayerContents_NON_GEO, nil
	case "UNSUPPORTED_GEO":
		return TGeoFileLayerContents_UNSUPPORTED_GEO, nil
	}
	return TGeoFileLayerContents(0), fmt.Errorf("not a valid TGeoFileLayerContents string")
}

func TGeoFileLayerContentsPtr(v TGeoFileLayerContents) *TGeoFileLayerContents { return &v }

func (p TGeoFileLayerContents) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TGeoFileLayerContents) UnmarshalText(text []byte) error {
	q, err := TGeoFileLayerContentsFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type TImportHeaderRow int64

const (
	TImportHeaderRow_AUTODETECT TImportHeaderRow = 0
	TImportHeaderRow_NO_HEADER  TImportHeaderRow = 1
	TImportHeaderRow_HAS_HEADER TImportHeaderRow = 2
)

func (p TImportHeaderRow) String() string {
	switch p {
	case TImportHeaderRow_AUTODETECT:
		return "AUTODETECT"
	case TImportHeaderRow_NO_HEADER:
		return "NO_HEADER"
	case TImportHeaderRow_HAS_HEADER:
		return "HAS_HEADER"
	}
	return "<UNSET>"
}

func TImportHeaderRowFromString(s string) (TImportHeaderRow, error) {
	switch s {
	case "AUTODETECT":
		return TImportHeaderRow_AUTODETECT, nil
	case "NO_HEADER":
		return TImportHeaderRow_NO_HEADER, nil
	case "HAS_HEADER":
		return TImportHeaderRow_HAS_HEADER, nil
	}
	return TImportHeaderRow(0), fmt.Errorf("not a valid TImportHeaderRow string")
}

func TImportHeaderRowPtr(v TImportHeaderRow) *TImportHeaderRow { return &v }

func (p TImportHeaderRow) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TImportHeaderRow) UnmarshalText(text []byte) error {
	q, err := TImportHeaderRowFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type TRole int64

const (
	TRole_SERVER            TRole = 0
	TRole_AGGREGATOR        TRole = 1
	TRole_LEAF              TRole = 2
	TRole_STRING_DICTIONARY TRole = 3
)

func (p TRole) String() string {
	switch p {
	case TRole_SERVER:
		return "SERVER"
	case TRole_AGGREGATOR:
		return "AGGREGATOR"
	case TRole_LEAF:
		return "LEAF"
	case TRole_STRING_DICTIONARY:
		return "STRING_DICTIONARY"
	}
	return "<UNSET>"
}

func TRoleFromString(s string) (TRole, error) {
	switch s {
	case "SERVER":
		return TRole_SERVER, nil
	case "AGGREGATOR":
		return TRole_AGGREGATOR, nil
	case "LEAF":
		return TRole_LEAF, nil
	case "STRING_DICTIONARY":
		return TRole_STRING_DICTIONARY, nil
	}
	return TRole(0), fmt.Errorf("not a valid TRole string")
}

func TRolePtr(v TRole) *TRole { return &v }

func (p TRole) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TRole) UnmarshalText(text []byte) error {
	q, err := TRoleFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type TMergeType int64

const (
	TMergeType_UNION  TMergeType = 0
	TMergeType_REDUCE TMergeType = 1
)

func (p TMergeType) String() string {
	switch p {
	case TMergeType_UNION:
		return "UNION"
	case TMergeType_REDUCE:
		return "REDUCE"
	}
	return "<UNSET>"
}

func TMergeTypeFromString(s string) (TMergeType, error) {
	switch s {
	case "UNION":
		return TMergeType_UNION, nil
	case "REDUCE":
		return TMergeType_REDUCE, nil
	}
	return TMergeType(0), fmt.Errorf("not a valid TMergeType string")
}

func TMergeTypePtr(v TMergeType) *TMergeType { return &v }

func (p TMergeType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TMergeType) UnmarshalText(text []byte) error {
	q, err := TMergeTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type TQueryType int64

const (
	TQueryType_UNKNOWN      TQueryType = 0
	TQueryType_READ         TQueryType = 1
	TQueryType_WRITE        TQueryType = 2
	TQueryType_SCHEMA_READ  TQueryType = 3
	TQueryType_SCHEMA_WRITE TQueryType = 4
)

func (p TQueryType) String() string {
	switch p {
	case TQueryType_UNKNOWN:
		return "UNKNOWN"
	case TQueryType_READ:
		return "READ"
	case TQueryType_WRITE:
		return "WRITE"
	case TQueryType_SCHEMA_READ:
		return "SCHEMA_READ"
	case TQueryType_SCHEMA_WRITE:
		return "SCHEMA_WRITE"
	}
	return "<UNSET>"
}

func TQueryTypeFromString(s string) (TQueryType, error) {
	switch s {
	case "UNKNOWN":
		return TQueryType_UNKNOWN, nil
	case "READ":
		return TQueryType_READ, nil
	case "WRITE":
		return TQueryType_WRITE, nil
	case "SCHEMA_READ":
		return TQueryType_SCHEMA_READ, nil
	case "SCHEMA_WRITE":
		return TQueryType_SCHEMA_WRITE, nil
	}
	return TQueryType(0), fmt.Errorf("not a valid TQueryType string")
}

func TQueryTypePtr(v TQueryType) *TQueryType { return &v }

func (p TQueryType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TQueryType) UnmarshalText(text []byte) error {
	q, err := TQueryTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type TArrowTransport int64

const (
	TArrowTransport_SHARED_MEMORY TArrowTransport = 0
	TArrowTransport_WIRE          TArrowTransport = 1
)

func (p TArrowTransport) String() string {
	switch p {
	case TArrowTransport_SHARED_MEMORY:
		return "SHARED_MEMORY"
	case TArrowTransport_WIRE:
		return "WIRE"
	}
	return "<UNSET>"
}

func TArrowTransportFromString(s string) (TArrowTransport, error) {
	switch s {
	case "SHARED_MEMORY":
		return TArrowTransport_SHARED_MEMORY, nil
	case "WIRE":
		return TArrowTransport_WIRE, nil
	}
	return TArrowTransport(0), fmt.Errorf("not a valid TArrowTransport string")
}

func TArrowTransportPtr(v TArrowTransport) *TArrowTransport { return &v }

func (p TArrowTransport) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TArrowTransport) UnmarshalText(text []byte) error {
	q, err := TArrowTransportFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type TExpressionRangeType int64

const (
	TExpressionRangeType_INVALID TExpressionRangeType = 0
	TExpressionRangeType_INTEGER TExpressionRangeType = 1
	TExpressionRangeType_FLOAT   TExpressionRangeType = 2
	TExpressionRangeType_DOUBLE  TExpressionRangeType = 3
)

func (p TExpressionRangeType) String() string {
	switch p {
	case TExpressionRangeType_INVALID:
		return "INVALID"
	case TExpressionRangeType_INTEGER:
		return "INTEGER"
	case TExpressionRangeType_FLOAT:
		return "FLOAT"
	case TExpressionRangeType_DOUBLE:
		return "DOUBLE"
	}
	return "<UNSET>"
}

func TExpressionRangeTypeFromString(s string) (TExpressionRangeType, error) {
	switch s {
	case "INVALID":
		return TExpressionRangeType_INVALID, nil
	case "INTEGER":
		return TExpressionRangeType_INTEGER, nil
	case "FLOAT":
		return TExpressionRangeType_FLOAT, nil
	case "DOUBLE":
		return TExpressionRangeType_DOUBLE, nil
	}
	return TExpressionRangeType(0), fmt.Errorf("not a valid TExpressionRangeType string")
}

func TExpressionRangeTypePtr(v TExpressionRangeType) *TExpressionRangeType { return &v }

func (p TExpressionRangeType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TExpressionRangeType) UnmarshalText(text []byte) error {
	q, err := TExpressionRangeTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type TDBObjectType int64

const (
	TDBObjectType_AbstractDBObjectType  TDBObjectType = 0
	TDBObjectType_DatabaseDBObjectType  TDBObjectType = 1
	TDBObjectType_TableDBObjectType     TDBObjectType = 2
	TDBObjectType_DashboardDBObjectType TDBObjectType = 3
	TDBObjectType_ViewDBObjectType      TDBObjectType = 4
	TDBObjectType_ServerDBObjectType    TDBObjectType = 5
)

func (p TDBObjectType) String() string {
	switch p {
	case TDBObjectType_AbstractDBObjectType:
		return "AbstractDBObjectType"
	case TDBObjectType_DatabaseDBObjectType:
		return "DatabaseDBObjectType"
	case TDBObjectType_TableDBObjectType:
		return "TableDBObjectType"
	case TDBObjectType_DashboardDBObjectType:
		return "DashboardDBObjectType"
	case TDBObjectType_ViewDBObjectType:
		return "ViewDBObjectType"
	case TDBObjectType_ServerDBObjectType:
		return "ServerDBObjectType"
	}
	return "<UNSET>"
}

func TDBObjectTypeFromString(s string) (TDBObjectType, error) {
	switch s {
	case "AbstractDBObjectType":
		return TDBObjectType_AbstractDBObjectType, nil
	case "DatabaseDBObjectType":
		return TDBObjectType_DatabaseDBObjectType, nil
	case "TableDBObjectType":
		return TDBObjectType_TableDBObjectType, nil
	case "DashboardDBObjectType":
		return TDBObjectType_DashboardDBObjectType, nil
	case "ViewDBObjectType":
		return TDBObjectType_ViewDBObjectType, nil
	case "ServerDBObjectType":
		return TDBObjectType_ServerDBObjectType, nil
	}
	return TDBObjectType(0), fmt.Errorf("not a valid TDBObjectType string")
}

func TDBObjectTypePtr(v TDBObjectType) *TDBObjectType { return &v }

func (p TDBObjectType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TDBObjectType) UnmarshalText(text []byte) error {
	q, err := TDBObjectTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type TRowDescriptor []*TColumnType

func TRowDescriptorPtr(v TRowDescriptor) *TRowDescriptor { return &v }

type TSessionId string

func TSessionIdPtr(v TSessionId) *TSessionId { return &v }

type TKrb5Token string

func TKrb5TokenPtr(v TKrb5Token) *TKrb5Token { return &v }

type TQueryId int64

func TQueryIdPtr(v TQueryId) *TQueryId { return &v }

type TSubqueryId int64

func TSubqueryIdPtr(v TSubqueryId) *TSubqueryId { return &v }

type TRenderPassMap map[int32]*TRawRenderPassDataResult_

func TRenderPassMapPtr(v TRenderPassMap) *TRenderPassMap { return &v }

type TRenderAggDataMap map[string]map[string]map[string]map[string][]*TRenderDatum

func TRenderAggDataMapPtr(v TRenderAggDataMap) *TRenderAggDataMap { return &v }

// Attributes:
//  - IntVal
//  - RealVal
//  - StrVal
//  - ArrVal
type TDatumVal struct {
	IntVal  int64     `thrift:"int_val,1" json:"int_val"`
	RealVal float64   `thrift:"real_val,2" json:"real_val"`
	StrVal  string    `thrift:"str_val,3" json:"str_val"`
	ArrVal  []*TDatum `thrift:"arr_val,4" json:"arr_val"`
}

func NewTDatumVal() *TDatumVal {
	return &TDatumVal{}
}

func (p *TDatumVal) GetIntVal() int64 {
	return p.IntVal
}

func (p *TDatumVal) GetRealVal() float64 {
	return p.RealVal
}

func (p *TDatumVal) GetStrVal() string {
	return p.StrVal
}

func (p *TDatumVal) GetArrVal() []*TDatum {
	return p.ArrVal
}
func (p *TDatumVal) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDatumVal) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IntVal = v
	}
	return nil
}

func (p *TDatumVal) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RealVal = v
	}
	return nil
}

func (p *TDatumVal) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StrVal = v
	}
	return nil
}

func (p *TDatumVal) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TDatum, 0, size)
	p.ArrVal = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &TDatum{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.ArrVal = append(p.ArrVal, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TDatumVal) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDatumVal"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDatumVal) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("int_val", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:int_val: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.IntVal)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.int_val (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:int_val: ", p), err)
	}
	return err
}

func (p *TDatumVal) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("real_val", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:real_val: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.RealVal)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.real_val (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:real_val: ", p), err)
	}
	return err
}

func (p *TDatumVal) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("str_val", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:str_val: ", p), err)
	}
	if err := oprot.WriteString(string(p.StrVal)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.str_val (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:str_val: ", p), err)
	}
	return err
}

func (p *TDatumVal) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arr_val", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:arr_val: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ArrVal)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ArrVal {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:arr_val: ", p), err)
	}
	return err
}

func (p *TDatumVal) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDatumVal(%+v)", *p)
}

// Attributes:
//  - Val
//  - IsNull
type TDatum struct {
	Val    *TDatumVal `thrift:"val,1" json:"val"`
	IsNull bool       `thrift:"is_null,2" json:"is_null"`
}

func NewTDatum() *TDatum {
	return &TDatum{}
}

var TDatum_Val_DEFAULT *TDatumVal

func (p *TDatum) GetVal() *TDatumVal {
	if !p.IsSetVal() {
		return TDatum_Val_DEFAULT
	}
	return p.Val
}

func (p *TDatum) GetIsNull() bool {
	return p.IsNull
}
func (p *TDatum) IsSetVal() bool {
	return p.Val != nil
}

func (p *TDatum) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDatum) readField1(iprot thrift.TProtocol) error {
	p.Val = &TDatumVal{}
	if err := p.Val.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Val), err)
	}
	return nil
}

func (p *TDatum) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IsNull = v
	}
	return nil
}

func (p *TDatum) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDatum"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDatum) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("val", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:val: ", p), err)
	}
	if err := p.Val.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Val), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:val: ", p), err)
	}
	return err
}

func (p *TDatum) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_null", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:is_null: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsNull)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_null (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:is_null: ", p), err)
	}
	return err
}

func (p *TDatum) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDatum(%+v)", *p)
}

// Attributes:
//  - StrVal
//  - IsNull
type TStringValue struct {
	StrVal string `thrift:"str_val,1" json:"str_val"`
	IsNull bool   `thrift:"is_null,2" json:"is_null"`
}

func NewTStringValue() *TStringValue {
	return &TStringValue{}
}

func (p *TStringValue) GetStrVal() string {
	return p.StrVal
}

func (p *TStringValue) GetIsNull() bool {
	return p.IsNull
}
func (p *TStringValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringValue) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StrVal = v
	}
	return nil
}

func (p *TStringValue) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IsNull = v
	}
	return nil
}

func (p *TStringValue) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TStringValue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringValue) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("str_val", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:str_val: ", p), err)
	}
	if err := oprot.WriteString(string(p.StrVal)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.str_val (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:str_val: ", p), err)
	}
	return err
}

func (p *TStringValue) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_null", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:is_null: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsNull)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_null (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:is_null: ", p), err)
	}
	return err
}

func (p *TStringValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringValue(%+v)", *p)
}

// Attributes:
//  - ColName
//  - ColType
//  - IsReservedKeyword
//  - SrcName
//  - IsSystem
//  - IsPhysical
//  - ColID
type TColumnType struct {
	ColName           string            `thrift:"col_name,1" json:"col_name"`
	ColType           *common.TTypeInfo `thrift:"col_type,2" json:"col_type"`
	IsReservedKeyword bool              `thrift:"is_reserved_keyword,3" json:"is_reserved_keyword"`
	SrcName           string            `thrift:"src_name,4" json:"src_name"`
	IsSystem          bool              `thrift:"is_system,5" json:"is_system"`
	IsPhysical        bool              `thrift:"is_physical,6" json:"is_physical"`
	ColID             int64             `thrift:"col_id,7" json:"col_id"`
}

func NewTColumnType() *TColumnType {
	return &TColumnType{}
}

func (p *TColumnType) GetColName() string {
	return p.ColName
}

var TColumnType_ColType_DEFAULT *common.TTypeInfo

func (p *TColumnType) GetColType() *common.TTypeInfo {
	if !p.IsSetColType() {
		return TColumnType_ColType_DEFAULT
	}
	return p.ColType
}

func (p *TColumnType) GetIsReservedKeyword() bool {
	return p.IsReservedKeyword
}

func (p *TColumnType) GetSrcName() string {
	return p.SrcName
}

func (p *TColumnType) GetIsSystem() bool {
	return p.IsSystem
}

func (p *TColumnType) GetIsPhysical() bool {
	return p.IsPhysical
}

func (p *TColumnType) GetColID() int64 {
	return p.ColID
}
func (p *TColumnType) IsSetColType() bool {
	return p.ColType != nil
}

func (p *TColumnType) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TColumnType) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ColName = v
	}
	return nil
}

func (p *TColumnType) readField2(iprot thrift.TProtocol) error {
	p.ColType = &common.TTypeInfo{
		Size: -1,
	}
	if err := p.ColType.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ColType), err)
	}
	return nil
}

func (p *TColumnType) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IsReservedKeyword = v
	}
	return nil
}

func (p *TColumnType) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SrcName = v
	}
	return nil
}

func (p *TColumnType) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IsSystem = v
	}
	return nil
}

func (p *TColumnType) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.IsPhysical = v
	}
	return nil
}

func (p *TColumnType) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ColID = v
	}
	return nil
}

func (p *TColumnType) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TColumnType"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TColumnType) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("col_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:col_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.ColName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.col_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:col_name: ", p), err)
	}
	return err
}

func (p *TColumnType) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("col_type", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:col_type: ", p), err)
	}
	if err := p.ColType.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ColType), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:col_type: ", p), err)
	}
	return err
}

func (p *TColumnType) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_reserved_keyword", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:is_reserved_keyword: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsReservedKeyword)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_reserved_keyword (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:is_reserved_keyword: ", p), err)
	}
	return err
}

func (p *TColumnType) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("src_name", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:src_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.SrcName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.src_name (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:src_name: ", p), err)
	}
	return err
}

func (p *TColumnType) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_system", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:is_system: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsSystem)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_system (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:is_system: ", p), err)
	}
	return err
}

func (p *TColumnType) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_physical", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:is_physical: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsPhysical)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_physical (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:is_physical: ", p), err)
	}
	return err
}

func (p *TColumnType) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("col_id", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:col_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ColID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.col_id (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:col_id: ", p), err)
	}
	return err
}

func (p *TColumnType) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumnType(%+v)", *p)
}

// Attributes:
//  - Cols
type TRow struct {
	Cols []*TDatum `thrift:"cols,1" json:"cols"`
}

func NewTRow() *TRow {
	return &TRow{}
}

func (p *TRow) GetCols() []*TDatum {
	return p.Cols
}
func (p *TRow) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TRow) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TDatum, 0, size)
	p.Cols = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &TDatum{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.Cols = append(p.Cols, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TRow) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRow"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TRow) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cols", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cols: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Cols)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Cols {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cols: ", p), err)
	}
	return err
}

func (p *TRow) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRow(%+v)", *p)
}

// Attributes:
//  - IntCol
//  - RealCol
//  - StrCol
//  - ArrCol
type TColumnData struct {
	IntCol  []int64    `thrift:"int_col,1" json:"int_col"`
	RealCol []float64  `thrift:"real_col,2" json:"real_col"`
	StrCol  []string   `thrift:"str_col,3" json:"str_col"`
	ArrCol  []*TColumn `thrift:"arr_col,4" json:"arr_col"`
}

func NewTColumnData() *TColumnData {
	return &TColumnData{}
}

func (p *TColumnData) GetIntCol() []int64 {
	return p.IntCol
}

func (p *TColumnData) GetRealCol() []float64 {
	return p.RealCol
}

func (p *TColumnData) GetStrCol() []string {
	return p.StrCol
}

func (p *TColumnData) GetArrCol() []*TColumn {
	return p.ArrCol
}
func (p *TColumnData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TColumnData) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.IntCol = tSlice
	for i := 0; i < size; i++ {
		var _elem2 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem2 = v
		}
		p.IntCol = append(p.IntCol, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TColumnData) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]float64, 0, size)
	p.RealCol = tSlice
	for i := 0; i < size; i++ {
		var _elem3 float64
		if v, err := iprot.ReadDouble(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem3 = v
		}
		p.RealCol = append(p.RealCol, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TColumnData) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.StrCol = tSlice
	for i := 0; i < size; i++ {
		var _elem4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem4 = v
		}
		p.StrCol = append(p.StrCol, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TColumnData) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TColumn, 0, size)
	p.ArrCol = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &TColumn{}
		if err := _elem5.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
		}
		p.ArrCol = append(p.ArrCol, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TColumnData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TColumnData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TColumnData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("int_col", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:int_col: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.IntCol)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.IntCol {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:int_col: ", p), err)
	}
	return err
}

func (p *TColumnData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("real_col", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:real_col: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.RealCol)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RealCol {
		if err := oprot.WriteDouble(float64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:real_col: ", p), err)
	}
	return err
}

func (p *TColumnData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("str_col", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:str_col: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.StrCol)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.StrCol {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:str_col: ", p), err)
	}
	return err
}

func (p *TColumnData) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arr_col", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:arr_col: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ArrCol)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ArrCol {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:arr_col: ", p), err)
	}
	return err
}

func (p *TColumnData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumnData(%+v)", *p)
}

// Attributes:
//  - Data
//  - Nulls
type TColumn struct {
	Data  *TColumnData `thrift:"data,1" json:"data"`
	Nulls []bool       `thrift:"nulls,2" json:"nulls"`
}

func NewTColumn() *TColumn {
	return &TColumn{}
}

var TColumn_Data_DEFAULT *TColumnData

func (p *TColumn) GetData() *TColumnData {
	if !p.IsSetData() {
		return TColumn_Data_DEFAULT
	}
	return p.Data
}

func (p *TColumn) GetNulls() []bool {
	return p.Nulls
}
func (p *TColumn) IsSetData() bool {
	return p.Data != nil
}

func (p *TColumn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TColumn) readField1(iprot thrift.TProtocol) error {
	p.Data = &TColumnData{}
	if err := p.Data.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
	}
	return nil
}

func (p *TColumn) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]bool, 0, size)
	p.Nulls = tSlice
	for i := 0; i < size; i++ {
		var _elem6 bool
		if v, err := iprot.ReadBool(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem6 = v
		}
		p.Nulls = append(p.Nulls, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TColumn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TColumn"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TColumn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data: ", p), err)
	}
	if err := p.Data.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data: ", p), err)
	}
	return err
}

func (p *TColumn) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nulls", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nulls: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.BOOL, len(p.Nulls)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Nulls {
		if err := oprot.WriteBool(bool(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nulls: ", p), err)
	}
	return err
}

func (p *TColumn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumn(%+v)", *p)
}

// Attributes:
//  - Cols
type TStringRow struct {
	Cols []*TStringValue `thrift:"cols,1" json:"cols"`
}

func NewTStringRow() *TStringRow {
	return &TStringRow{}
}

func (p *TStringRow) GetCols() []*TStringValue {
	return p.Cols
}
func (p *TStringRow) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringRow) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TStringValue, 0, size)
	p.Cols = tSlice
	for i := 0; i < size; i++ {
		_elem7 := &TStringValue{}
		if err := _elem7.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
		}
		p.Cols = append(p.Cols, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TStringRow) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TStringRow"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringRow) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cols", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cols: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Cols)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Cols {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cols: ", p), err)
	}
	return err
}

func (p *TStringRow) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringRow(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - KrbToken
type TKrb5Session struct {
	SessionId TSessionId `thrift:"sessionId,1" json:"sessionId"`
	KrbToken  TKrb5Token `thrift:"krbToken,2" json:"krbToken"`
}

func NewTKrb5Session() *TKrb5Session {
	return &TKrb5Session{}
}

func (p *TKrb5Session) GetSessionId() TSessionId {
	return p.SessionId
}

func (p *TKrb5Session) GetKrbToken() TKrb5Token {
	return p.KrbToken
}
func (p *TKrb5Session) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TKrb5Session) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TSessionId(v)
		p.SessionId = temp
	}
	return nil
}

func (p *TKrb5Session) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TKrb5Token(v)
		p.KrbToken = temp
	}
	return nil
}

func (p *TKrb5Session) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TKrb5Session"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TKrb5Session) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *TKrb5Session) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("krbToken", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:krbToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.KrbToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.krbToken (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:krbToken: ", p), err)
	}
	return err
}

func (p *TKrb5Session) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TKrb5Session(%+v)", *p)
}

// Attributes:
//  - SerializedRows
//  - ExecutionFinished
//  - MergeType
//  - Sharded
//  - RowDesc
//  - NodeID
type TStepResult_ struct {
	SerializedRows    *serialized_result_set.TSerializedRows `thrift:"serialized_rows,1" json:"serialized_rows"`
	ExecutionFinished bool                                   `thrift:"execution_finished,2" json:"execution_finished"`
	MergeType         TMergeType                             `thrift:"merge_type,3" json:"merge_type"`
	Sharded           bool                                   `thrift:"sharded,4" json:"sharded"`
	RowDesc           TRowDescriptor                         `thrift:"row_desc,5" json:"row_desc"`
	NodeID            int32                                  `thrift:"node_id,6" json:"node_id"`
}

func NewTStepResult_() *TStepResult_ {
	return &TStepResult_{}
}

var TStepResult__SerializedRows_DEFAULT *serialized_result_set.TSerializedRows

func (p *TStepResult_) GetSerializedRows() *serialized_result_set.TSerializedRows {
	if !p.IsSetSerializedRows() {
		return TStepResult__SerializedRows_DEFAULT
	}
	return p.SerializedRows
}

func (p *TStepResult_) GetExecutionFinished() bool {
	return p.ExecutionFinished
}

func (p *TStepResult_) GetMergeType() TMergeType {
	return p.MergeType
}

func (p *TStepResult_) GetSharded() bool {
	return p.Sharded
}

func (p *TStepResult_) GetRowDesc() TRowDescriptor {
	return p.RowDesc
}

func (p *TStepResult_) GetNodeID() int32 {
	return p.NodeID
}
func (p *TStepResult_) IsSetSerializedRows() bool {
	return p.SerializedRows != nil
}

func (p *TStepResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStepResult_) readField1(iprot thrift.TProtocol) error {
	p.SerializedRows = &serialized_result_set.TSerializedRows{}
	if err := p.SerializedRows.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SerializedRows), err)
	}
	return nil
}

func (p *TStepResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ExecutionFinished = v
	}
	return nil
}

func (p *TStepResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := TMergeType(v)
		p.MergeType = temp
	}
	return nil
}

func (p *TStepResult_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Sharded = v
	}
	return nil
}

func (p *TStepResult_) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(TRowDescriptor, 0, size)
	p.RowDesc = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &TColumnType{}
		if err := _elem8.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
		}
		p.RowDesc = append(p.RowDesc, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TStepResult_) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.NodeID = v
	}
	return nil
}

func (p *TStepResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TStepResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStepResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serialized_rows", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serialized_rows: ", p), err)
	}
	if err := p.SerializedRows.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SerializedRows), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serialized_rows: ", p), err)
	}
	return err
}

func (p *TStepResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("execution_finished", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:execution_finished: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.ExecutionFinished)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.execution_finished (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:execution_finished: ", p), err)
	}
	return err
}

func (p *TStepResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("merge_type", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:merge_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MergeType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.merge_type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:merge_type: ", p), err)
	}
	return err
}

func (p *TStepResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sharded", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sharded: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Sharded)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sharded (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sharded: ", p), err)
	}
	return err
}

func (p *TStepResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row_desc", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:row_desc: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowDesc)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RowDesc {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:row_desc: ", p), err)
	}
	return err
}

func (p *TStepResult_) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("node_id", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:node_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NodeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.node_id (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:node_id: ", p), err)
	}
	return err
}

func (p *TStepResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStepResult_(%+v)", *p)
}

// Attributes:
//  - RowDesc
//  - Rows
//  - Columns
//  - IsColumnar
type TRowSet struct {
	RowDesc    TRowDescriptor `thrift:"row_desc,1" json:"row_desc"`
	Rows       []*TRow        `thrift:"rows,2" json:"rows"`
	Columns    []*TColumn     `thrift:"columns,3" json:"columns"`
	IsColumnar bool           `thrift:"is_columnar,4" json:"is_columnar"`
}

func NewTRowSet() *TRowSet {
	return &TRowSet{}
}

func (p *TRowSet) GetRowDesc() TRowDescriptor {
	return p.RowDesc
}

func (p *TRowSet) GetRows() []*TRow {
	return p.Rows
}

func (p *TRowSet) GetColumns() []*TColumn {
	return p.Columns
}

func (p *TRowSet) GetIsColumnar() bool {
	return p.IsColumnar
}
func (p *TRowSet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TRowSet) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(TRowDescriptor, 0, size)
	p.RowDesc = tSlice
	for i := 0; i < size; i++ {
		_elem9 := &TColumnType{}
		if err := _elem9.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
		}
		p.RowDesc = append(p.RowDesc, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TRowSet) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TRow, 0, size)
	p.Rows = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &TRow{}
		if err := _elem10.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
		}
		p.Rows = append(p.Rows, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TRowSet) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TColumn, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		_elem11 := &TColumn{}
		if err := _elem11.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
		}
		p.Columns = append(p.Columns, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TRowSet) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IsColumnar = v
	}
	return nil
}

func (p *TRowSet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRowSet"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TRowSet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row_desc", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row_desc: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowDesc)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RowDesc {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row_desc: ", p), err)
	}
	return err
}

func (p *TRowSet) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rows", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rows: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Rows)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Rows {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rows: ", p), err)
	}
	return err
}

func (p *TRowSet) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columns", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:columns: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Columns {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:columns: ", p), err)
	}
	return err
}

func (p *TRowSet) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_columnar", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:is_columnar: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsColumnar)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_columnar (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:is_columnar: ", p), err)
	}
	return err
}

func (p *TRowSet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRowSet(%+v)", *p)
}

// Attributes:
//  - RowSet
//  - ExecutionTimeMs
//  - TotalTimeMs
//  - Nonce
//  - Debug
//  - Success
//  - QueryType
type TQueryResult_ struct {
	RowSet          *TRowSet   `thrift:"row_set,1" json:"row_set"`
	ExecutionTimeMs int64      `thrift:"execution_time_ms,2" json:"execution_time_ms"`
	TotalTimeMs     int64      `thrift:"total_time_ms,3" json:"total_time_ms"`
	Nonce           string     `thrift:"nonce,4" json:"nonce"`
	Debug           string     `thrift:"debug,5" json:"debug"`
	Success         bool       `thrift:"success,6" json:"success"`
	QueryType       TQueryType `thrift:"query_type,7" json:"query_type"`
}

func NewTQueryResult_() *TQueryResult_ {
	return &TQueryResult_{
		Success: true,

		QueryType: 0,
	}
}

var TQueryResult__RowSet_DEFAULT *TRowSet

func (p *TQueryResult_) GetRowSet() *TRowSet {
	if !p.IsSetRowSet() {
		return TQueryResult__RowSet_DEFAULT
	}
	return p.RowSet
}

func (p *TQueryResult_) GetExecutionTimeMs() int64 {
	return p.ExecutionTimeMs
}

func (p *TQueryResult_) GetTotalTimeMs() int64 {
	return p.TotalTimeMs
}

func (p *TQueryResult_) GetNonce() string {
	return p.Nonce
}

func (p *TQueryResult_) GetDebug() string {
	return p.Debug
}

func (p *TQueryResult_) GetSuccess() bool {
	return p.Success
}

func (p *TQueryResult_) GetQueryType() TQueryType {
	return p.QueryType
}
func (p *TQueryResult_) IsSetRowSet() bool {
	return p.RowSet != nil
}

func (p *TQueryResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TQueryResult_) readField1(iprot thrift.TProtocol) error {
	p.RowSet = &TRowSet{}
	if err := p.RowSet.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RowSet), err)
	}
	return nil
}

func (p *TQueryResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ExecutionTimeMs = v
	}
	return nil
}

func (p *TQueryResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TotalTimeMs = v
	}
	return nil
}

func (p *TQueryResult_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Nonce = v
	}
	return nil
}

func (p *TQueryResult_) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Debug = v
	}
	return nil
}

func (p *TQueryResult_) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *TQueryResult_) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := TQueryType(v)
		p.QueryType = temp
	}
	return nil
}

func (p *TQueryResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TQueryResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TQueryResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row_set", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row_set: ", p), err)
	}
	if err := p.RowSet.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RowSet), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row_set: ", p), err)
	}
	return err
}

func (p *TQueryResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("execution_time_ms", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:execution_time_ms: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ExecutionTimeMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.execution_time_ms (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:execution_time_ms: ", p), err)
	}
	return err
}

func (p *TQueryResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total_time_ms", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total_time_ms: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalTimeMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total_time_ms (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total_time_ms: ", p), err)
	}
	return err
}

func (p *TQueryResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nonce: ", p), err)
	}
	if err := oprot.WriteString(string(p.Nonce)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nonce (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nonce: ", p), err)
	}
	return err
}

func (p *TQueryResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("debug", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:debug: ", p), err)
	}
	if err := oprot.WriteString(string(p.Debug)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.debug (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:debug: ", p), err)
	}
	return err
}

func (p *TQueryResult_) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:success: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.success (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:success: ", p), err)
	}
	return err
}

func (p *TQueryResult_) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query_type", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:query_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.QueryType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.query_type (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:query_type: ", p), err)
	}
	return err
}

func (p *TQueryResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TQueryResult_(%+v)", *p)
}

// Attributes:
//  - SmHandle
//  - SmSize
//  - DfHandle
//  - DfSize
//  - ExecutionTimeMs
//  - ArrowConversionTimeMs
//  - DfBuffer
type TDataFrame struct {
	SmHandle              []byte `thrift:"sm_handle,1" json:"sm_handle"`
	SmSize                int64  `thrift:"sm_size,2" json:"sm_size"`
	DfHandle              []byte `thrift:"df_handle,3" json:"df_handle"`
	DfSize                int64  `thrift:"df_size,4" json:"df_size"`
	ExecutionTimeMs       int64  `thrift:"execution_time_ms,5" json:"execution_time_ms"`
	ArrowConversionTimeMs int64  `thrift:"arrow_conversion_time_ms,6" json:"arrow_conversion_time_ms"`
	DfBuffer              []byte `thrift:"df_buffer,7" json:"df_buffer"`
}

func NewTDataFrame() *TDataFrame {
	return &TDataFrame{}
}

func (p *TDataFrame) GetSmHandle() []byte {
	return p.SmHandle
}

func (p *TDataFrame) GetSmSize() int64 {
	return p.SmSize
}

func (p *TDataFrame) GetDfHandle() []byte {
	return p.DfHandle
}

func (p *TDataFrame) GetDfSize() int64 {
	return p.DfSize
}

func (p *TDataFrame) GetExecutionTimeMs() int64 {
	return p.ExecutionTimeMs
}

func (p *TDataFrame) GetArrowConversionTimeMs() int64 {
	return p.ArrowConversionTimeMs
}

func (p *TDataFrame) GetDfBuffer() []byte {
	return p.DfBuffer
}
func (p *TDataFrame) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDataFrame) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SmHandle = v
	}
	return nil
}

func (p *TDataFrame) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SmSize = v
	}
	return nil
}

func (p *TDataFrame) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DfHandle = v
	}
	return nil
}

func (p *TDataFrame) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.DfSize = v
	}
	return nil
}

func (p *TDataFrame) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ExecutionTimeMs = v
	}
	return nil
}

func (p *TDataFrame) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ArrowConversionTimeMs = v
	}
	return nil
}

func (p *TDataFrame) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.DfBuffer = v
	}
	return nil
}

func (p *TDataFrame) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDataFrame"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDataFrame) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sm_handle", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sm_handle: ", p), err)
	}
	if err := oprot.WriteBinary(p.SmHandle); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sm_handle (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sm_handle: ", p), err)
	}
	return err
}

func (p *TDataFrame) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sm_size", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sm_size: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SmSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sm_size (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sm_size: ", p), err)
	}
	return err
}

func (p *TDataFrame) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("df_handle", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:df_handle: ", p), err)
	}
	if err := oprot.WriteBinary(p.DfHandle); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.df_handle (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:df_handle: ", p), err)
	}
	return err
}

func (p *TDataFrame) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("df_size", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:df_size: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DfSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.df_size (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:df_size: ", p), err)
	}
	return err
}

func (p *TDataFrame) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("execution_time_ms", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:execution_time_ms: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ExecutionTimeMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.execution_time_ms (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:execution_time_ms: ", p), err)
	}
	return err
}

func (p *TDataFrame) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arrow_conversion_time_ms", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:arrow_conversion_time_ms: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ArrowConversionTimeMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.arrow_conversion_time_ms (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:arrow_conversion_time_ms: ", p), err)
	}
	return err
}

func (p *TDataFrame) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("df_buffer", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:df_buffer: ", p), err)
	}
	if err := oprot.WriteBinary(p.DfBuffer); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.df_buffer (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:df_buffer: ", p), err)
	}
	return err
}

func (p *TDataFrame) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDataFrame(%+v)", *p)
}

// Attributes:
//  - DbName
//  - DbOwner
type TDBInfo struct {
	DbName  string `thrift:"db_name,1" json:"db_name"`
	DbOwner string `thrift:"db_owner,2" json:"db_owner"`
}

func NewTDBInfo() *TDBInfo {
	return &TDBInfo{}
}

func (p *TDBInfo) GetDbName() string {
	return p.DbName
}

func (p *TDBInfo) GetDbOwner() string {
	return p.DbOwner
}
func (p *TDBInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDBInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *TDBInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DbOwner = v
	}
	return nil
}

func (p *TDBInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDBInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDBInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *TDBInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_owner", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:db_owner: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbOwner)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_owner (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:db_owner: ", p), err)
	}
	return err
}

func (p *TDBInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDBInfo(%+v)", *p)
}

// Attributes:
//  - ErrorMsg
type TOmniSciException struct {
	ErrorMsg string `thrift:"error_msg,1" json:"error_msg"`
}

func NewTOmniSciException() *TOmniSciException {
	return &TOmniSciException{}
}

func (p *TOmniSciException) GetErrorMsg() string {
	return p.ErrorMsg
}
func (p *TOmniSciException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TOmniSciException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ErrorMsg = v
	}
	return nil
}

func (p *TOmniSciException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TOmniSciException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TOmniSciException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error_msg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.ErrorMsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error_msg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_msg: ", p), err)
	}
	return err
}

func (p *TOmniSciException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TOmniSciException(%+v)", *p)
}

func (p *TOmniSciException) Error() string {
	return p.String()
}

// Attributes:
//  - Delimiter
//  - NullStr
//  - HasHeader
//  - Quoted
//  - Quote
//  - Escape
//  - LineDelim
//  - ArrayDelim
//  - ArrayBegin
//  - ArrayEnd
//  - Threads
//  - FileType
//  - S3AccessKey
//  - S3SecretKey
//  - S3Region
//  - GeoCoordsEncoding
//  - GeoCoordsCompParam
//  - GeoCoordsType
//  - GeoCoordsSrid
//  - SanitizeColumnNames
//  - GeoLayerName
//  - S3Endpoint
//  - GeoAssignRenderGroups
//  - GeoExplodeCollections
//  - SourceSrid
type TCopyParams struct {
	Delimiter             string               `thrift:"delimiter,1" json:"delimiter"`
	NullStr               string               `thrift:"null_str,2" json:"null_str"`
	HasHeader             TImportHeaderRow     `thrift:"has_header,3" json:"has_header"`
	Quoted                bool                 `thrift:"quoted,4" json:"quoted"`
	Quote                 string               `thrift:"quote,5" json:"quote"`
	Escape                string               `thrift:"escape,6" json:"escape"`
	LineDelim             string               `thrift:"line_delim,7" json:"line_delim"`
	ArrayDelim            string               `thrift:"array_delim,8" json:"array_delim"`
	ArrayBegin            string               `thrift:"array_begin,9" json:"array_begin"`
	ArrayEnd              string               `thrift:"array_end,10" json:"array_end"`
	Threads               int32                `thrift:"threads,11" json:"threads"`
	FileType              TFileType            `thrift:"file_type,12" json:"file_type"`
	S3AccessKey           string               `thrift:"s3_access_key,13" json:"s3_access_key"`
	S3SecretKey           string               `thrift:"s3_secret_key,14" json:"s3_secret_key"`
	S3Region              string               `thrift:"s3_region,15" json:"s3_region"`
	GeoCoordsEncoding     common.TEncodingType `thrift:"geo_coords_encoding,16" json:"geo_coords_encoding"`
	GeoCoordsCompParam    int32                `thrift:"geo_coords_comp_param,17" json:"geo_coords_comp_param"`
	GeoCoordsType         common.TDatumType    `thrift:"geo_coords_type,18" json:"geo_coords_type"`
	GeoCoordsSrid         int32                `thrift:"geo_coords_srid,19" json:"geo_coords_srid"`
	SanitizeColumnNames   bool                 `thrift:"sanitize_column_names,20" json:"sanitize_column_names"`
	GeoLayerName          string               `thrift:"geo_layer_name,21" json:"geo_layer_name"`
	S3Endpoint            string               `thrift:"s3_endpoint,22" json:"s3_endpoint"`
	GeoAssignRenderGroups bool                 `thrift:"geo_assign_render_groups,23" json:"geo_assign_render_groups"`
	GeoExplodeCollections bool                 `thrift:"geo_explode_collections,24" json:"geo_explode_collections"`
	SourceSrid            int32                `thrift:"source_srid,25" json:"source_srid"`
}

func NewTCopyParams() *TCopyParams {
	return &TCopyParams{
		HasHeader: 0,

		FileType: 0,

		GeoCoordsEncoding: 6,

		GeoCoordsCompParam: 32,

		GeoCoordsType: 18,

		GeoCoordsSrid: 4326,

		SanitizeColumnNames: true,

		GeoAssignRenderGroups: true,
	}
}

func (p *TCopyParams) GetDelimiter() string {
	return p.Delimiter
}

func (p *TCopyParams) GetNullStr() string {
	return p.NullStr
}

func (p *TCopyParams) GetHasHeader() TImportHeaderRow {
	return p.HasHeader
}

func (p *TCopyParams) GetQuoted() bool {
	return p.Quoted
}

func (p *TCopyParams) GetQuote() string {
	return p.Quote
}

func (p *TCopyParams) GetEscape() string {
	return p.Escape
}

func (p *TCopyParams) GetLineDelim() string {
	return p.LineDelim
}

func (p *TCopyParams) GetArrayDelim() string {
	return p.ArrayDelim
}

func (p *TCopyParams) GetArrayBegin() string {
	return p.ArrayBegin
}

func (p *TCopyParams) GetArrayEnd() string {
	return p.ArrayEnd
}

func (p *TCopyParams) GetThreads() int32 {
	return p.Threads
}

func (p *TCopyParams) GetFileType() TFileType {
	return p.FileType
}

func (p *TCopyParams) GetS3AccessKey() string {
	return p.S3AccessKey
}

func (p *TCopyParams) GetS3SecretKey() string {
	return p.S3SecretKey
}

func (p *TCopyParams) GetS3Region() string {
	return p.S3Region
}

func (p *TCopyParams) GetGeoCoordsEncoding() common.TEncodingType {
	return p.GeoCoordsEncoding
}

func (p *TCopyParams) GetGeoCoordsCompParam() int32 {
	return p.GeoCoordsCompParam
}

func (p *TCopyParams) GetGeoCoordsType() common.TDatumType {
	return p.GeoCoordsType
}

func (p *TCopyParams) GetGeoCoordsSrid() int32 {
	return p.GeoCoordsSrid
}

func (p *TCopyParams) GetSanitizeColumnNames() bool {
	return p.SanitizeColumnNames
}

func (p *TCopyParams) GetGeoLayerName() string {
	return p.GeoLayerName
}

func (p *TCopyParams) GetS3Endpoint() string {
	return p.S3Endpoint
}

func (p *TCopyParams) GetGeoAssignRenderGroups() bool {
	return p.GeoAssignRenderGroups
}

func (p *TCopyParams) GetGeoExplodeCollections() bool {
	return p.GeoExplodeCollections
}

func (p *TCopyParams) GetSourceSrid() int32 {
	return p.SourceSrid
}
func (p *TCopyParams) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.readField25(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCopyParams) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Delimiter = v
	}
	return nil
}

func (p *TCopyParams) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NullStr = v
	}
	return nil
}

func (p *TCopyParams) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := TImportHeaderRow(v)
		p.HasHeader = temp
	}
	return nil
}

func (p *TCopyParams) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Quoted = v
	}
	return nil
}

func (p *TCopyParams) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Quote = v
	}
	return nil
}

func (p *TCopyParams) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Escape = v
	}
	return nil
}

func (p *TCopyParams) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.LineDelim = v
	}
	return nil
}

func (p *TCopyParams) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.ArrayDelim = v
	}
	return nil
}

func (p *TCopyParams) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.ArrayBegin = v
	}
	return nil
}

func (p *TCopyParams) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.ArrayEnd = v
	}
	return nil
}

func (p *TCopyParams) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Threads = v
	}
	return nil
}

func (p *TCopyParams) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		temp := TFileType(v)
		p.FileType = temp
	}
	return nil
}

func (p *TCopyParams) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.S3AccessKey = v
	}
	return nil
}

func (p *TCopyParams) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.S3SecretKey = v
	}
	return nil
}

func (p *TCopyParams) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.S3Region = v
	}
	return nil
}

func (p *TCopyParams) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		temp := common.TEncodingType(v)
		p.GeoCoordsEncoding = temp
	}
	return nil
}

func (p *TCopyParams) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.GeoCoordsCompParam = v
	}
	return nil
}

func (p *TCopyParams) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		temp := common.TDatumType(v)
		p.GeoCoordsType = temp
	}
	return nil
}

func (p *TCopyParams) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.GeoCoordsSrid = v
	}
	return nil
}

func (p *TCopyParams) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.SanitizeColumnNames = v
	}
	return nil
}

func (p *TCopyParams) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.GeoLayerName = v
	}
	return nil
}

func (p *TCopyParams) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.S3Endpoint = v
	}
	return nil
}

func (p *TCopyParams) readField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.GeoAssignRenderGroups = v
	}
	return nil
}

func (p *TCopyParams) readField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.GeoExplodeCollections = v
	}
	return nil
}

func (p *TCopyParams) readField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		p.SourceSrid = v
	}
	return nil
}

func (p *TCopyParams) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCopyParams"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCopyParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("delimiter", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:delimiter: ", p), err)
	}
	if err := oprot.WriteString(string(p.Delimiter)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.delimiter (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:delimiter: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("null_str", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:null_str: ", p), err)
	}
	if err := oprot.WriteString(string(p.NullStr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.null_str (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:null_str: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("has_header", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:has_header: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.HasHeader)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.has_header (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:has_header: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("quoted", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:quoted: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Quoted)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.quoted (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:quoted: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("quote", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:quote: ", p), err)
	}
	if err := oprot.WriteString(string(p.Quote)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.quote (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:quote: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("escape", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:escape: ", p), err)
	}
	if err := oprot.WriteString(string(p.Escape)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.escape (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:escape: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("line_delim", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:line_delim: ", p), err)
	}
	if err := oprot.WriteString(string(p.LineDelim)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.line_delim (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:line_delim: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("array_delim", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:array_delim: ", p), err)
	}
	if err := oprot.WriteString(string(p.ArrayDelim)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.array_delim (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:array_delim: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("array_begin", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:array_begin: ", p), err)
	}
	if err := oprot.WriteString(string(p.ArrayBegin)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.array_begin (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:array_begin: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("array_end", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:array_end: ", p), err)
	}
	if err := oprot.WriteString(string(p.ArrayEnd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.array_end (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:array_end: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("threads", thrift.I32, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:threads: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Threads)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.threads (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:threads: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("file_type", thrift.I32, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:file_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FileType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.file_type (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:file_type: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("s3_access_key", thrift.STRING, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:s3_access_key: ", p), err)
	}
	if err := oprot.WriteString(string(p.S3AccessKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.s3_access_key (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:s3_access_key: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("s3_secret_key", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:s3_secret_key: ", p), err)
	}
	if err := oprot.WriteString(string(p.S3SecretKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.s3_secret_key (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:s3_secret_key: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("s3_region", thrift.STRING, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:s3_region: ", p), err)
	}
	if err := oprot.WriteString(string(p.S3Region)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.s3_region (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:s3_region: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("geo_coords_encoding", thrift.I32, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:geo_coords_encoding: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.GeoCoordsEncoding)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.geo_coords_encoding (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:geo_coords_encoding: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("geo_coords_comp_param", thrift.I32, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:geo_coords_comp_param: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.GeoCoordsCompParam)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.geo_coords_comp_param (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:geo_coords_comp_param: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("geo_coords_type", thrift.I32, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:geo_coords_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.GeoCoordsType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.geo_coords_type (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:geo_coords_type: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("geo_coords_srid", thrift.I32, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:geo_coords_srid: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.GeoCoordsSrid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.geo_coords_srid (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:geo_coords_srid: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sanitize_column_names", thrift.BOOL, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:sanitize_column_names: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.SanitizeColumnNames)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sanitize_column_names (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:sanitize_column_names: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("geo_layer_name", thrift.STRING, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:geo_layer_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.GeoLayerName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.geo_layer_name (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:geo_layer_name: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("s3_endpoint", thrift.STRING, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:s3_endpoint: ", p), err)
	}
	if err := oprot.WriteString(string(p.S3Endpoint)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.s3_endpoint (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:s3_endpoint: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("geo_assign_render_groups", thrift.BOOL, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:geo_assign_render_groups: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.GeoAssignRenderGroups)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.geo_assign_render_groups (23) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:geo_assign_render_groups: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("geo_explode_collections", thrift.BOOL, 24); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:geo_explode_collections: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.GeoExplodeCollections)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.geo_explode_collections (24) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 24:geo_explode_collections: ", p), err)
	}
	return err
}

func (p *TCopyParams) writeField25(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source_srid", thrift.I32, 25); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:source_srid: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SourceSrid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.source_srid (25) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 25:source_srid: ", p), err)
	}
	return err
}

func (p *TCopyParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCopyParams(%+v)", *p)
}

// Attributes:
//  - IsReplicated
type TCreateParams struct {
	IsReplicated bool `thrift:"is_replicated,1" json:"is_replicated"`
}

func NewTCreateParams() *TCreateParams {
	return &TCreateParams{}
}

func (p *TCreateParams) GetIsReplicated() bool {
	return p.IsReplicated
}
func (p *TCreateParams) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCreateParams) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IsReplicated = v
	}
	return nil
}

func (p *TCreateParams) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCreateParams"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCreateParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_replicated", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:is_replicated: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsReplicated)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_replicated (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:is_replicated: ", p), err)
	}
	return err
}

func (p *TCreateParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCreateParams(%+v)", *p)
}

// Attributes:
//  - RowSet
//  - CopyParams
type TDetectResult_ struct {
	RowSet     *TRowSet     `thrift:"row_set,1" json:"row_set"`
	CopyParams *TCopyParams `thrift:"copy_params,2" json:"copy_params"`
}

func NewTDetectResult_() *TDetectResult_ {
	return &TDetectResult_{}
}

var TDetectResult__RowSet_DEFAULT *TRowSet

func (p *TDetectResult_) GetRowSet() *TRowSet {
	if !p.IsSetRowSet() {
		return TDetectResult__RowSet_DEFAULT
	}
	return p.RowSet
}

var TDetectResult__CopyParams_DEFAULT *TCopyParams

func (p *TDetectResult_) GetCopyParams() *TCopyParams {
	if !p.IsSetCopyParams() {
		return TDetectResult__CopyParams_DEFAULT
	}
	return p.CopyParams
}
func (p *TDetectResult_) IsSetRowSet() bool {
	return p.RowSet != nil
}

func (p *TDetectResult_) IsSetCopyParams() bool {
	return p.CopyParams != nil
}

func (p *TDetectResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDetectResult_) readField1(iprot thrift.TProtocol) error {
	p.RowSet = &TRowSet{}
	if err := p.RowSet.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RowSet), err)
	}
	return nil
}

func (p *TDetectResult_) readField2(iprot thrift.TProtocol) error {
	p.CopyParams = &TCopyParams{
		HasHeader: 0,

		FileType: 0,

		GeoCoordsEncoding: 6,

		GeoCoordsCompParam: 32,

		GeoCoordsType: 18,

		GeoCoordsSrid: 4326,

		SanitizeColumnNames: true,

		GeoAssignRenderGroups: true,
	}
	if err := p.CopyParams.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CopyParams), err)
	}
	return nil
}

func (p *TDetectResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDetectResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDetectResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row_set", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row_set: ", p), err)
	}
	if err := p.RowSet.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RowSet), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row_set: ", p), err)
	}
	return err
}

func (p *TDetectResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("copy_params", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:copy_params: ", p), err)
	}
	if err := p.CopyParams.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CopyParams), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:copy_params: ", p), err)
	}
	return err
}

func (p *TDetectResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDetectResult_(%+v)", *p)
}

// Attributes:
//  - Elapsed
//  - RowsCompleted
//  - RowsEstimated
//  - RowsRejected
type TImportStatus struct {
	Elapsed       int64 `thrift:"elapsed,1" json:"elapsed"`
	RowsCompleted int64 `thrift:"rows_completed,2" json:"rows_completed"`
	RowsEstimated int64 `thrift:"rows_estimated,3" json:"rows_estimated"`
	RowsRejected  int64 `thrift:"rows_rejected,4" json:"rows_rejected"`
}

func NewTImportStatus() *TImportStatus {
	return &TImportStatus{}
}

func (p *TImportStatus) GetElapsed() int64 {
	return p.Elapsed
}

func (p *TImportStatus) GetRowsCompleted() int64 {
	return p.RowsCompleted
}

func (p *TImportStatus) GetRowsEstimated() int64 {
	return p.RowsEstimated
}

func (p *TImportStatus) GetRowsRejected() int64 {
	return p.RowsRejected
}
func (p *TImportStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TImportStatus) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Elapsed = v
	}
	return nil
}

func (p *TImportStatus) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RowsCompleted = v
	}
	return nil
}

func (p *TImportStatus) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RowsEstimated = v
	}
	return nil
}

func (p *TImportStatus) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.RowsRejected = v
	}
	return nil
}

func (p *TImportStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TImportStatus"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TImportStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("elapsed", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:elapsed: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Elapsed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.elapsed (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:elapsed: ", p), err)
	}
	return err
}

func (p *TImportStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rows_completed", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rows_completed: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RowsCompleted)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rows_completed (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rows_completed: ", p), err)
	}
	return err
}

func (p *TImportStatus) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rows_estimated", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rows_estimated: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RowsEstimated)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rows_estimated (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rows_estimated: ", p), err)
	}
	return err
}

func (p *TImportStatus) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rows_rejected", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:rows_rejected: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RowsRejected)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rows_rejected (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:rows_rejected: ", p), err)
	}
	return err
}

func (p *TImportStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TImportStatus(%+v)", *p)
}

// Attributes:
//  - ViewName
//  - ViewState
//  - ImageHash
//  - UpdateTime
//  - ViewMetadata
type TFrontendView struct {
	ViewName     string `thrift:"view_name,1" json:"view_name"`
	ViewState    string `thrift:"view_state,2" json:"view_state"`
	ImageHash    string `thrift:"image_hash,3" json:"image_hash"`
	UpdateTime   string `thrift:"update_time,4" json:"update_time"`
	ViewMetadata string `thrift:"view_metadata,5" json:"view_metadata"`
}

func NewTFrontendView() *TFrontendView {
	return &TFrontendView{}
}

func (p *TFrontendView) GetViewName() string {
	return p.ViewName
}

func (p *TFrontendView) GetViewState() string {
	return p.ViewState
}

func (p *TFrontendView) GetImageHash() string {
	return p.ImageHash
}

func (p *TFrontendView) GetUpdateTime() string {
	return p.UpdateTime
}

func (p *TFrontendView) GetViewMetadata() string {
	return p.ViewMetadata
}
func (p *TFrontendView) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TFrontendView) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ViewName = v
	}
	return nil
}

func (p *TFrontendView) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ViewState = v
	}
	return nil
}

func (p *TFrontendView) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ImageHash = v
	}
	return nil
}

func (p *TFrontendView) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *TFrontendView) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ViewMetadata = v
	}
	return nil
}

func (p *TFrontendView) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TFrontendView"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TFrontendView) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("view_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:view_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.ViewName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.view_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:view_name: ", p), err)
	}
	return err
}

func (p *TFrontendView) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("view_state", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:view_state: ", p), err)
	}
	if err := oprot.WriteString(string(p.ViewState)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.view_state (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:view_state: ", p), err)
	}
	return err
}

func (p *TFrontendView) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("image_hash", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:image_hash: ", p), err)
	}
	if err := oprot.WriteString(string(p.ImageHash)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.image_hash (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:image_hash: ", p), err)
	}
	return err
}

func (p *TFrontendView) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("update_time", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:update_time: ", p), err)
	}
	if err := oprot.WriteString(string(p.UpdateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.update_time (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:update_time: ", p), err)
	}
	return err
}

func (p *TFrontendView) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("view_metadata", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:view_metadata: ", p), err)
	}
	if err := oprot.WriteString(string(p.ViewMetadata)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.view_metadata (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:view_metadata: ", p), err)
	}
	return err
}

func (p *TFrontendView) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFrontendView(%+v)", *p)
}

// Attributes:
//  - ReadOnly
//  - Version
//  - RenderingEnabled
//  - StartTime
//  - Edition
//  - HostName
//  - PolyRenderingEnabled
//  - Role
type TServerStatus struct {
	ReadOnly             bool   `thrift:"read_only,1" json:"read_only"`
	Version              string `thrift:"version,2" json:"version"`
	RenderingEnabled     bool   `thrift:"rendering_enabled,3" json:"rendering_enabled"`
	StartTime            int64  `thrift:"start_time,4" json:"start_time"`
	Edition              string `thrift:"edition,5" json:"edition"`
	HostName             string `thrift:"host_name,6" json:"host_name"`
	PolyRenderingEnabled bool   `thrift:"poly_rendering_enabled,7" json:"poly_rendering_enabled"`
	Role                 TRole  `thrift:"role,8" json:"role"`
}

func NewTServerStatus() *TServerStatus {
	return &TServerStatus{}
}

func (p *TServerStatus) GetReadOnly() bool {
	return p.ReadOnly
}

func (p *TServerStatus) GetVersion() string {
	return p.Version
}

func (p *TServerStatus) GetRenderingEnabled() bool {
	return p.RenderingEnabled
}

func (p *TServerStatus) GetStartTime() int64 {
	return p.StartTime
}

func (p *TServerStatus) GetEdition() string {
	return p.Edition
}

func (p *TServerStatus) GetHostName() string {
	return p.HostName
}

func (p *TServerStatus) GetPolyRenderingEnabled() bool {
	return p.PolyRenderingEnabled
}

func (p *TServerStatus) GetRole() TRole {
	return p.Role
}
func (p *TServerStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TServerStatus) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReadOnly = v
	}
	return nil
}

func (p *TServerStatus) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *TServerStatus) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RenderingEnabled = v
	}
	return nil
}

func (p *TServerStatus) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *TServerStatus) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Edition = v
	}
	return nil
}

func (p *TServerStatus) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.HostName = v
	}
	return nil
}

func (p *TServerStatus) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.PolyRenderingEnabled = v
	}
	return nil
}

func (p *TServerStatus) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := TRole(v)
		p.Role = temp
	}
	return nil
}

func (p *TServerStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TServerStatus"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TServerStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("read_only", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:read_only: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.ReadOnly)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.read_only (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:read_only: ", p), err)
	}
	return err
}

func (p *TServerStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:version: ", p), err)
	}
	if err := oprot.WriteString(string(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:version: ", p), err)
	}
	return err
}

func (p *TServerStatus) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rendering_enabled", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rendering_enabled: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.RenderingEnabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rendering_enabled (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rendering_enabled: ", p), err)
	}
	return err
}

func (p *TServerStatus) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_time", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:start_time: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start_time (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:start_time: ", p), err)
	}
	return err
}

func (p *TServerStatus) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("edition", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:edition: ", p), err)
	}
	if err := oprot.WriteString(string(p.Edition)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.edition (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:edition: ", p), err)
	}
	return err
}

func (p *TServerStatus) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("host_name", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:host_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.HostName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.host_name (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:host_name: ", p), err)
	}
	return err
}

func (p *TServerStatus) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("poly_rendering_enabled", thrift.BOOL, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:poly_rendering_enabled: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PolyRenderingEnabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.poly_rendering_enabled (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:poly_rendering_enabled: ", p), err)
	}
	return err
}

func (p *TServerStatus) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("role", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:role: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Role)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.role (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:role: ", p), err)
	}
	return err
}

func (p *TServerStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TServerStatus(%+v)", *p)
}

// Attributes:
//  - X
//  - Y
type TPixel struct {
	X int64 `thrift:"x,1" json:"x"`
	Y int64 `thrift:"y,2" json:"y"`
}

func NewTPixel() *TPixel {
	return &TPixel{}
}

func (p *TPixel) GetX() int64 {
	return p.X
}

func (p *TPixel) GetY() int64 {
	return p.Y
}
func (p *TPixel) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TPixel) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.X = v
	}
	return nil
}

func (p *TPixel) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Y = v
	}
	return nil
}

func (p *TPixel) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TPixel"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TPixel) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("x", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:x: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.X)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.x (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:x: ", p), err)
	}
	return err
}

func (p *TPixel) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("y", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:y: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Y)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.y (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:y: ", p), err)
	}
	return err
}

func (p *TPixel) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPixel(%+v)", *p)
}

// Attributes:
//  - Pixel
//  - VegaTableName
//  - TableID
//  - RowID
//  - RowSet
//  - Nonce
type TPixelTableRowResult_ struct {
	Pixel         *TPixel  `thrift:"pixel,1" json:"pixel"`
	VegaTableName string   `thrift:"vega_table_name,2" json:"vega_table_name"`
	TableID       []int64  `thrift:"table_id,3" json:"table_id"`
	RowID         []int64  `thrift:"row_id,4" json:"row_id"`
	RowSet        *TRowSet `thrift:"row_set,5" json:"row_set"`
	Nonce         string   `thrift:"nonce,6" json:"nonce"`
}

func NewTPixelTableRowResult_() *TPixelTableRowResult_ {
	return &TPixelTableRowResult_{}
}

var TPixelTableRowResult__Pixel_DEFAULT *TPixel

func (p *TPixelTableRowResult_) GetPixel() *TPixel {
	if !p.IsSetPixel() {
		return TPixelTableRowResult__Pixel_DEFAULT
	}
	return p.Pixel
}

func (p *TPixelTableRowResult_) GetVegaTableName() string {
	return p.VegaTableName
}

func (p *TPixelTableRowResult_) GetTableID() []int64 {
	return p.TableID
}

func (p *TPixelTableRowResult_) GetRowID() []int64 {
	return p.RowID
}

var TPixelTableRowResult__RowSet_DEFAULT *TRowSet

func (p *TPixelTableRowResult_) GetRowSet() *TRowSet {
	if !p.IsSetRowSet() {
		return TPixelTableRowResult__RowSet_DEFAULT
	}
	return p.RowSet
}

func (p *TPixelTableRowResult_) GetNonce() string {
	return p.Nonce
}
func (p *TPixelTableRowResult_) IsSetPixel() bool {
	return p.Pixel != nil
}

func (p *TPixelTableRowResult_) IsSetRowSet() bool {
	return p.RowSet != nil
}

func (p *TPixelTableRowResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TPixelTableRowResult_) readField1(iprot thrift.TProtocol) error {
	p.Pixel = &TPixel{}
	if err := p.Pixel.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pixel), err)
	}
	return nil
}

func (p *TPixelTableRowResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.VegaTableName = v
	}
	return nil
}

func (p *TPixelTableRowResult_) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.TableID = tSlice
	for i := 0; i < size; i++ {
		var _elem12 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem12 = v
		}
		p.TableID = append(p.TableID, _elem12)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TPixelTableRowResult_) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.RowID = tSlice
	for i := 0; i < size; i++ {
		var _elem13 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem13 = v
		}
		p.RowID = append(p.RowID, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TPixelTableRowResult_) readField5(iprot thrift.TProtocol) error {
	p.RowSet = &TRowSet{}
	if err := p.RowSet.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RowSet), err)
	}
	return nil
}

func (p *TPixelTableRowResult_) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Nonce = v
	}
	return nil
}

func (p *TPixelTableRowResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TPixelTableRowResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TPixelTableRowResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pixel", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pixel: ", p), err)
	}
	if err := p.Pixel.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pixel), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pixel: ", p), err)
	}
	return err
}

func (p *TPixelTableRowResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vega_table_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vega_table_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.VegaTableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vega_table_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vega_table_name: ", p), err)
	}
	return err
}

func (p *TPixelTableRowResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_id", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:table_id: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.TableID)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.TableID {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:table_id: ", p), err)
	}
	return err
}

func (p *TPixelTableRowResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row_id", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:row_id: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.RowID)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RowID {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:row_id: ", p), err)
	}
	return err
}

func (p *TPixelTableRowResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row_set", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:row_set: ", p), err)
	}
	if err := p.RowSet.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RowSet), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:row_set: ", p), err)
	}
	return err
}

func (p *TPixelTableRowResult_) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nonce: ", p), err)
	}
	if err := oprot.WriteString(string(p.Nonce)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nonce (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nonce: ", p), err)
	}
	return err
}

func (p *TPixelTableRowResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPixelTableRowResult_(%+v)", *p)
}

// Attributes:
//  - Image
//  - Nonce
//  - ExecutionTimeMs
//  - RenderTimeMs
//  - TotalTimeMs
//  - VegaMetadata
type TRenderResult_ struct {
	Image           []byte `thrift:"image,1" json:"image"`
	Nonce           string `thrift:"nonce,2" json:"nonce"`
	ExecutionTimeMs int64  `thrift:"execution_time_ms,3" json:"execution_time_ms"`
	RenderTimeMs    int64  `thrift:"render_time_ms,4" json:"render_time_ms"`
	TotalTimeMs     int64  `thrift:"total_time_ms,5" json:"total_time_ms"`
	VegaMetadata    string `thrift:"vega_metadata,6" json:"vega_metadata"`
}

func NewTRenderResult_() *TRenderResult_ {
	return &TRenderResult_{}
}

func (p *TRenderResult_) GetImage() []byte {
	return p.Image
}

func (p *TRenderResult_) GetNonce() string {
	return p.Nonce
}

func (p *TRenderResult_) GetExecutionTimeMs() int64 {
	return p.ExecutionTimeMs
}

func (p *TRenderResult_) GetRenderTimeMs() int64 {
	return p.RenderTimeMs
}

func (p *TRenderResult_) GetTotalTimeMs() int64 {
	return p.TotalTimeMs
}

func (p *TRenderResult_) GetVegaMetadata() string {
	return p.VegaMetadata
}
func (p *TRenderResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TRenderResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Image = v
	}
	return nil
}

func (p *TRenderResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Nonce = v
	}
	return nil
}

func (p *TRenderResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ExecutionTimeMs = v
	}
	return nil
}

func (p *TRenderResult_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.RenderTimeMs = v
	}
	return nil
}

func (p *TRenderResult_) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.TotalTimeMs = v
	}
	return nil
}

func (p *TRenderResult_) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.VegaMetadata = v
	}
	return nil
}

func (p *TRenderResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRenderResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TRenderResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("image", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:image: ", p), err)
	}
	if err := oprot.WriteBinary(p.Image); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.image (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:image: ", p), err)
	}
	return err
}

func (p *TRenderResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nonce: ", p), err)
	}
	if err := oprot.WriteString(string(p.Nonce)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nonce (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nonce: ", p), err)
	}
	return err
}

func (p *TRenderResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("execution_time_ms", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:execution_time_ms: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ExecutionTimeMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.execution_time_ms (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:execution_time_ms: ", p), err)
	}
	return err
}

func (p *TRenderResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("render_time_ms", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:render_time_ms: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RenderTimeMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.render_time_ms (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:render_time_ms: ", p), err)
	}
	return err
}

func (p *TRenderResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total_time_ms", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:total_time_ms: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalTimeMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total_time_ms (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:total_time_ms: ", p), err)
	}
	return err
}

func (p *TRenderResult_) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vega_metadata", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:vega_metadata: ", p), err)
	}
	if err := oprot.WriteString(string(p.VegaMetadata)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vega_metadata (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:vega_metadata: ", p), err)
	}
	return err
}

func (p *TRenderResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRenderResult_(%+v)", *p)
}

// Attributes:
//  - NumSm
//  - ClockFrequencyKHz
//  - Memory
//  - ComputeCapabilityMajor
//  - ComputeCapabilityMinor
type TGpuSpecification struct {
	NumSm                  int32 `thrift:"num_sm,1" json:"num_sm"`
	ClockFrequencyKHz      int64 `thrift:"clock_frequency_kHz,2" json:"clock_frequency_kHz"`
	Memory                 int64 `thrift:"memory,3" json:"memory"`
	ComputeCapabilityMajor int16 `thrift:"compute_capability_major,4" json:"compute_capability_major"`
	ComputeCapabilityMinor int16 `thrift:"compute_capability_minor,5" json:"compute_capability_minor"`
}

func NewTGpuSpecification() *TGpuSpecification {
	return &TGpuSpecification{}
}

func (p *TGpuSpecification) GetNumSm() int32 {
	return p.NumSm
}

func (p *TGpuSpecification) GetClockFrequencyKHz() int64 {
	return p.ClockFrequencyKHz
}

func (p *TGpuSpecification) GetMemory() int64 {
	return p.Memory
}

func (p *TGpuSpecification) GetComputeCapabilityMajor() int16 {
	return p.ComputeCapabilityMajor
}

func (p *TGpuSpecification) GetComputeCapabilityMinor() int16 {
	return p.ComputeCapabilityMinor
}
func (p *TGpuSpecification) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TGpuSpecification) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NumSm = v
	}
	return nil
}

func (p *TGpuSpecification) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ClockFrequencyKHz = v
	}
	return nil
}

func (p *TGpuSpecification) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Memory = v
	}
	return nil
}

func (p *TGpuSpecification) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ComputeCapabilityMajor = v
	}
	return nil
}

func (p *TGpuSpecification) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ComputeCapabilityMinor = v
	}
	return nil
}

func (p *TGpuSpecification) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TGpuSpecification"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TGpuSpecification) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_sm", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num_sm: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NumSm)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_sm (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num_sm: ", p), err)
	}
	return err
}

func (p *TGpuSpecification) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clock_frequency_kHz", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clock_frequency_kHz: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ClockFrequencyKHz)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.clock_frequency_kHz (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clock_frequency_kHz: ", p), err)
	}
	return err
}

func (p *TGpuSpecification) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("memory", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:memory: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Memory)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.memory (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:memory: ", p), err)
	}
	return err
}

func (p *TGpuSpecification) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("compute_capability_major", thrift.I16, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:compute_capability_major: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.ComputeCapabilityMajor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.compute_capability_major (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:compute_capability_major: ", p), err)
	}
	return err
}

func (p *TGpuSpecification) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("compute_capability_minor", thrift.I16, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:compute_capability_minor: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.ComputeCapabilityMinor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.compute_capability_minor (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:compute_capability_minor: ", p), err)
	}
	return err
}

func (p *TGpuSpecification) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGpuSpecification(%+v)", *p)
}

// Attributes:
//  - NumGpuHw
//  - NumCPUHw
//  - NumGpuAllocated
//  - StartGpu
//  - HostName
//  - GpuInfo
type THardwareInfo struct {
	NumGpuHw        int16                `thrift:"num_gpu_hw,1" json:"num_gpu_hw"`
	NumCPUHw        int16                `thrift:"num_cpu_hw,2" json:"num_cpu_hw"`
	NumGpuAllocated int16                `thrift:"num_gpu_allocated,3" json:"num_gpu_allocated"`
	StartGpu        int16                `thrift:"start_gpu,4" json:"start_gpu"`
	HostName        string               `thrift:"host_name,5" json:"host_name"`
	GpuInfo         []*TGpuSpecification `thrift:"gpu_info,6" json:"gpu_info"`
}

func NewTHardwareInfo() *THardwareInfo {
	return &THardwareInfo{}
}

func (p *THardwareInfo) GetNumGpuHw() int16 {
	return p.NumGpuHw
}

func (p *THardwareInfo) GetNumCPUHw() int16 {
	return p.NumCPUHw
}

func (p *THardwareInfo) GetNumGpuAllocated() int16 {
	return p.NumGpuAllocated
}

func (p *THardwareInfo) GetStartGpu() int16 {
	return p.StartGpu
}

func (p *THardwareInfo) GetHostName() string {
	return p.HostName
}

func (p *THardwareInfo) GetGpuInfo() []*TGpuSpecification {
	return p.GpuInfo
}
func (p *THardwareInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *THardwareInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NumGpuHw = v
	}
	return nil
}

func (p *THardwareInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NumCPUHw = v
	}
	return nil
}

func (p *THardwareInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NumGpuAllocated = v
	}
	return nil
}

func (p *THardwareInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.StartGpu = v
	}
	return nil
}

func (p *THardwareInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.HostName = v
	}
	return nil
}

func (p *THardwareInfo) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TGpuSpecification, 0, size)
	p.GpuInfo = tSlice
	for i := 0; i < size; i++ {
		_elem14 := &TGpuSpecification{}
		if err := _elem14.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
		}
		p.GpuInfo = append(p.GpuInfo, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *THardwareInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("THardwareInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *THardwareInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_gpu_hw", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num_gpu_hw: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.NumGpuHw)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_gpu_hw (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num_gpu_hw: ", p), err)
	}
	return err
}

func (p *THardwareInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_cpu_hw", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num_cpu_hw: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.NumCPUHw)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_cpu_hw (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num_cpu_hw: ", p), err)
	}
	return err
}

func (p *THardwareInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_gpu_allocated", thrift.I16, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:num_gpu_allocated: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.NumGpuAllocated)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_gpu_allocated (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:num_gpu_allocated: ", p), err)
	}
	return err
}

func (p *THardwareInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_gpu", thrift.I16, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:start_gpu: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.StartGpu)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start_gpu (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:start_gpu: ", p), err)
	}
	return err
}

func (p *THardwareInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("host_name", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:host_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.HostName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.host_name (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:host_name: ", p), err)
	}
	return err
}

func (p *THardwareInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("gpu_info", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:gpu_info: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.GpuInfo)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.GpuInfo {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:gpu_info: ", p), err)
	}
	return err
}

func (p *THardwareInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("THardwareInfo(%+v)", *p)
}

// Attributes:
//  - HardwareInfo
type TClusterHardwareInfo struct {
	HardwareInfo []*THardwareInfo `thrift:"hardware_info,1" json:"hardware_info"`
}

func NewTClusterHardwareInfo() *TClusterHardwareInfo {
	return &TClusterHardwareInfo{}
}

func (p *TClusterHardwareInfo) GetHardwareInfo() []*THardwareInfo {
	return p.HardwareInfo
}
func (p *TClusterHardwareInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TClusterHardwareInfo) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*THardwareInfo, 0, size)
	p.HardwareInfo = tSlice
	for i := 0; i < size; i++ {
		_elem15 := &THardwareInfo{}
		if err := _elem15.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem15), err)
		}
		p.HardwareInfo = append(p.HardwareInfo, _elem15)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TClusterHardwareInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TClusterHardwareInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TClusterHardwareInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hardware_info", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hardware_info: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HardwareInfo)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.HardwareInfo {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hardware_info: ", p), err)
	}
	return err
}

func (p *TClusterHardwareInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TClusterHardwareInfo(%+v)", *p)
}

// Attributes:
//  - Slab
//  - StartPage
//  - NumPages
//  - Touch
//  - ChunkKey
//  - BufferEpoch
//  - IsFree
type TMemoryData struct {
	Slab        int64   `thrift:"slab,1" json:"slab"`
	StartPage   int32   `thrift:"start_page,2" json:"start_page"`
	NumPages    int64   `thrift:"num_pages,3" json:"num_pages"`
	Touch       int32   `thrift:"touch,4" json:"touch"`
	ChunkKey    []int64 `thrift:"chunk_key,5" json:"chunk_key"`
	BufferEpoch int32   `thrift:"buffer_epoch,6" json:"buffer_epoch"`
	IsFree      bool    `thrift:"is_free,7" json:"is_free"`
}

func NewTMemoryData() *TMemoryData {
	return &TMemoryData{}
}

func (p *TMemoryData) GetSlab() int64 {
	return p.Slab
}

func (p *TMemoryData) GetStartPage() int32 {
	return p.StartPage
}

func (p *TMemoryData) GetNumPages() int64 {
	return p.NumPages
}

func (p *TMemoryData) GetTouch() int32 {
	return p.Touch
}

func (p *TMemoryData) GetChunkKey() []int64 {
	return p.ChunkKey
}

func (p *TMemoryData) GetBufferEpoch() int32 {
	return p.BufferEpoch
}

func (p *TMemoryData) GetIsFree() bool {
	return p.IsFree
}
func (p *TMemoryData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMemoryData) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Slab = v
	}
	return nil
}

func (p *TMemoryData) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.StartPage = v
	}
	return nil
}

func (p *TMemoryData) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NumPages = v
	}
	return nil
}

func (p *TMemoryData) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Touch = v
	}
	return nil
}

func (p *TMemoryData) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.ChunkKey = tSlice
	for i := 0; i < size; i++ {
		var _elem16 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem16 = v
		}
		p.ChunkKey = append(p.ChunkKey, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMemoryData) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.BufferEpoch = v
	}
	return nil
}

func (p *TMemoryData) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.IsFree = v
	}
	return nil
}

func (p *TMemoryData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMemoryData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMemoryData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("slab", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:slab: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Slab)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.slab (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:slab: ", p), err)
	}
	return err
}

func (p *TMemoryData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_page", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:start_page: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.StartPage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start_page (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:start_page: ", p), err)
	}
	return err
}

func (p *TMemoryData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_pages", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:num_pages: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NumPages)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_pages (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:num_pages: ", p), err)
	}
	return err
}

func (p *TMemoryData) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("touch", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:touch: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Touch)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.touch (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:touch: ", p), err)
	}
	return err
}

func (p *TMemoryData) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chunk_key", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:chunk_key: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.ChunkKey)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ChunkKey {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:chunk_key: ", p), err)
	}
	return err
}

func (p *TMemoryData) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("buffer_epoch", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:buffer_epoch: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.BufferEpoch)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.buffer_epoch (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:buffer_epoch: ", p), err)
	}
	return err
}

func (p *TMemoryData) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_free", thrift.BOOL, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:is_free: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsFree)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_free (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:is_free: ", p), err)
	}
	return err
}

func (p *TMemoryData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMemoryData(%+v)", *p)
}

// Attributes:
//  - HostName
//  - PageSize
//  - MaxNumPages
//  - NumPagesAllocated
//  - IsAllocationCapped
//  - NodeMemoryData
type TNodeMemoryInfo struct {
	HostName           string         `thrift:"host_name,1" json:"host_name"`
	PageSize           int64          `thrift:"page_size,2" json:"page_size"`
	MaxNumPages        int64          `thrift:"max_num_pages,3" json:"max_num_pages"`
	NumPagesAllocated  int64          `thrift:"num_pages_allocated,4" json:"num_pages_allocated"`
	IsAllocationCapped bool           `thrift:"is_allocation_capped,5" json:"is_allocation_capped"`
	NodeMemoryData     []*TMemoryData `thrift:"node_memory_data,6" json:"node_memory_data"`
}

func NewTNodeMemoryInfo() *TNodeMemoryInfo {
	return &TNodeMemoryInfo{}
}

func (p *TNodeMemoryInfo) GetHostName() string {
	return p.HostName
}

func (p *TNodeMemoryInfo) GetPageSize() int64 {
	return p.PageSize
}

func (p *TNodeMemoryInfo) GetMaxNumPages() int64 {
	return p.MaxNumPages
}

func (p *TNodeMemoryInfo) GetNumPagesAllocated() int64 {
	return p.NumPagesAllocated
}

func (p *TNodeMemoryInfo) GetIsAllocationCapped() bool {
	return p.IsAllocationCapped
}

func (p *TNodeMemoryInfo) GetNodeMemoryData() []*TMemoryData {
	return p.NodeMemoryData
}
func (p *TNodeMemoryInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TNodeMemoryInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HostName = v
	}
	return nil
}

func (p *TNodeMemoryInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *TNodeMemoryInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MaxNumPages = v
	}
	return nil
}

func (p *TNodeMemoryInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NumPagesAllocated = v
	}
	return nil
}

func (p *TNodeMemoryInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IsAllocationCapped = v
	}
	return nil
}

func (p *TNodeMemoryInfo) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TMemoryData, 0, size)
	p.NodeMemoryData = tSlice
	for i := 0; i < size; i++ {
		_elem17 := &TMemoryData{}
		if err := _elem17.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
		}
		p.NodeMemoryData = append(p.NodeMemoryData, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TNodeMemoryInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TNodeMemoryInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TNodeMemoryInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("host_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.HostName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.host_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host_name: ", p), err)
	}
	return err
}

func (p *TNodeMemoryInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("page_size", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:page_size: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.PageSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.page_size (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:page_size: ", p), err)
	}
	return err
}

func (p *TNodeMemoryInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_num_pages", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_num_pages: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MaxNumPages)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_num_pages (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_num_pages: ", p), err)
	}
	return err
}

func (p *TNodeMemoryInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_pages_allocated", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:num_pages_allocated: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NumPagesAllocated)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_pages_allocated (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:num_pages_allocated: ", p), err)
	}
	return err
}

func (p *TNodeMemoryInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_allocation_capped", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:is_allocation_capped: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsAllocationCapped)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_allocation_capped (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:is_allocation_capped: ", p), err)
	}
	return err
}

func (p *TNodeMemoryInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("node_memory_data", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:node_memory_data: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.NodeMemoryData)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.NodeMemoryData {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:node_memory_data: ", p), err)
	}
	return err
}

func (p *TNodeMemoryInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TNodeMemoryInfo(%+v)", *p)
}

// Attributes:
//  - TableName
//  - NumCols
//  - IsView
//  - IsReplicated
//  - ShardCount
//  - MaxRows
//  - TableID
//  - MaxTableID
//  - ColTypes
//  - ColNames
type TTableMeta struct {
	TableName string `thrift:"table_name,1" json:"table_name"`
	NumCols   int64  `thrift:"num_cols,2" json:"num_cols"`
	// unused field # 3
	IsView       bool                `thrift:"is_view,4" json:"is_view"`
	IsReplicated bool                `thrift:"is_replicated,5" json:"is_replicated"`
	ShardCount   int64               `thrift:"shard_count,6" json:"shard_count"`
	MaxRows      int64               `thrift:"max_rows,7" json:"max_rows"`
	TableID      int64               `thrift:"table_id,8" json:"table_id"`
	MaxTableID   int64               `thrift:"max_table_id,9" json:"max_table_id"`
	ColTypes     []*common.TTypeInfo `thrift:"col_types,10" json:"col_types"`
	ColNames     []string            `thrift:"col_names,11" json:"col_names"`
}

func NewTTableMeta() *TTableMeta {
	return &TTableMeta{}
}

func (p *TTableMeta) GetTableName() string {
	return p.TableName
}

func (p *TTableMeta) GetNumCols() int64 {
	return p.NumCols
}

func (p *TTableMeta) GetIsView() bool {
	return p.IsView
}

func (p *TTableMeta) GetIsReplicated() bool {
	return p.IsReplicated
}

func (p *TTableMeta) GetShardCount() int64 {
	return p.ShardCount
}

func (p *TTableMeta) GetMaxRows() int64 {
	return p.MaxRows
}

func (p *TTableMeta) GetTableID() int64 {
	return p.TableID
}

func (p *TTableMeta) GetMaxTableID() int64 {
	return p.MaxTableID
}

func (p *TTableMeta) GetColTypes() []*common.TTypeInfo {
	return p.ColTypes
}

func (p *TTableMeta) GetColNames() []string {
	return p.ColNames
}
func (p *TTableMeta) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TTableMeta) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *TTableMeta) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NumCols = v
	}
	return nil
}

func (p *TTableMeta) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IsView = v
	}
	return nil
}

func (p *TTableMeta) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IsReplicated = v
	}
	return nil
}

func (p *TTableMeta) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ShardCount = v
	}
	return nil
}

func (p *TTableMeta) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.MaxRows = v
	}
	return nil
}

func (p *TTableMeta) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.TableID = v
	}
	return nil
}

func (p *TTableMeta) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.MaxTableID = v
	}
	return nil
}

func (p *TTableMeta) readField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*common.TTypeInfo, 0, size)
	p.ColTypes = tSlice
	for i := 0; i < size; i++ {
		_elem18 := &common.TTypeInfo{
			Size: -1,
		}
		if err := _elem18.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
		}
		p.ColTypes = append(p.ColTypes, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TTableMeta) readField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ColNames = tSlice
	for i := 0; i < size; i++ {
		var _elem19 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem19 = v
		}
		p.ColNames = append(p.ColNames, _elem19)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TTableMeta) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTableMeta"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TTableMeta) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table_name: ", p), err)
	}
	return err
}

func (p *TTableMeta) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_cols", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num_cols: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NumCols)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_cols (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num_cols: ", p), err)
	}
	return err
}

func (p *TTableMeta) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_view", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:is_view: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsView)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_view (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:is_view: ", p), err)
	}
	return err
}

func (p *TTableMeta) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_replicated", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:is_replicated: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsReplicated)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_replicated (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:is_replicated: ", p), err)
	}
	return err
}

func (p *TTableMeta) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("shard_count", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:shard_count: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ShardCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.shard_count (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:shard_count: ", p), err)
	}
	return err
}

func (p *TTableMeta) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_rows", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:max_rows: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MaxRows)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_rows (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:max_rows: ", p), err)
	}
	return err
}

func (p *TTableMeta) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_id", thrift.I64, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:table_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TableID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_id (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:table_id: ", p), err)
	}
	return err
}

func (p *TTableMeta) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_table_id", thrift.I64, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:max_table_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MaxTableID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_table_id (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:max_table_id: ", p), err)
	}
	return err
}

func (p *TTableMeta) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("col_types", thrift.LIST, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:col_types: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColTypes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ColTypes {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:col_types: ", p), err)
	}
	return err
}

func (p *TTableMeta) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("col_names", thrift.LIST, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:col_names: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ColNames)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ColNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:col_names: ", p), err)
	}
	return err
}

func (p *TTableMeta) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTableMeta(%+v)", *p)
}

// Attributes:
//  - RowDesc
//  - FragmentSize
//  - PageSize
//  - MaxRows
//  - ViewSql
//  - ShardCount
//  - KeyMetainfo
//  - IsTemporary
//  - PartitionDetail
type TTableDetails struct {
	RowDesc         TRowDescriptor   `thrift:"row_desc,1" json:"row_desc"`
	FragmentSize    int64            `thrift:"fragment_size,2" json:"fragment_size"`
	PageSize        int64            `thrift:"page_size,3" json:"page_size"`
	MaxRows         int64            `thrift:"max_rows,4" json:"max_rows"`
	ViewSql         string           `thrift:"view_sql,5" json:"view_sql"`
	ShardCount      int64            `thrift:"shard_count,6" json:"shard_count"`
	KeyMetainfo     string           `thrift:"key_metainfo,7" json:"key_metainfo"`
	IsTemporary     bool             `thrift:"is_temporary,8" json:"is_temporary"`
	PartitionDetail TPartitionDetail `thrift:"partition_detail,9" json:"partition_detail"`
}

func NewTTableDetails() *TTableDetails {
	return &TTableDetails{}
}

func (p *TTableDetails) GetRowDesc() TRowDescriptor {
	return p.RowDesc
}

func (p *TTableDetails) GetFragmentSize() int64 {
	return p.FragmentSize
}

func (p *TTableDetails) GetPageSize() int64 {
	return p.PageSize
}

func (p *TTableDetails) GetMaxRows() int64 {
	return p.MaxRows
}

func (p *TTableDetails) GetViewSql() string {
	return p.ViewSql
}

func (p *TTableDetails) GetShardCount() int64 {
	return p.ShardCount
}

func (p *TTableDetails) GetKeyMetainfo() string {
	return p.KeyMetainfo
}

func (p *TTableDetails) GetIsTemporary() bool {
	return p.IsTemporary
}

func (p *TTableDetails) GetPartitionDetail() TPartitionDetail {
	return p.PartitionDetail
}
func (p *TTableDetails) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TTableDetails) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(TRowDescriptor, 0, size)
	p.RowDesc = tSlice
	for i := 0; i < size; i++ {
		_elem20 := &TColumnType{}
		if err := _elem20.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem20), err)
		}
		p.RowDesc = append(p.RowDesc, _elem20)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TTableDetails) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FragmentSize = v
	}
	return nil
}

func (p *TTableDetails) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *TTableDetails) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MaxRows = v
	}
	return nil
}

func (p *TTableDetails) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ViewSql = v
	}
	return nil
}

func (p *TTableDetails) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ShardCount = v
	}
	return nil
}

func (p *TTableDetails) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.KeyMetainfo = v
	}
	return nil
}

func (p *TTableDetails) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.IsTemporary = v
	}
	return nil
}

func (p *TTableDetails) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		temp := TPartitionDetail(v)
		p.PartitionDetail = temp
	}
	return nil
}

func (p *TTableDetails) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTableDetails"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TTableDetails) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row_desc", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row_desc: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowDesc)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RowDesc {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row_desc: ", p), err)
	}
	return err
}

func (p *TTableDetails) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fragment_size", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fragment_size: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FragmentSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fragment_size (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fragment_size: ", p), err)
	}
	return err
}

func (p *TTableDetails) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("page_size", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:page_size: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.PageSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.page_size (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:page_size: ", p), err)
	}
	return err
}

func (p *TTableDetails) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_rows", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_rows: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MaxRows)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_rows (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_rows: ", p), err)
	}
	return err
}

func (p *TTableDetails) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("view_sql", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:view_sql: ", p), err)
	}
	if err := oprot.WriteString(string(p.ViewSql)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.view_sql (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:view_sql: ", p), err)
	}
	return err
}

func (p *TTableDetails) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("shard_count", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:shard_count: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ShardCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.shard_count (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:shard_count: ", p), err)
	}
	return err
}

func (p *TTableDetails) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key_metainfo", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:key_metainfo: ", p), err)
	}
	if err := oprot.WriteString(string(p.KeyMetainfo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key_metainfo (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:key_metainfo: ", p), err)
	}
	return err
}

func (p *TTableDetails) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_temporary", thrift.BOOL, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:is_temporary: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsTemporary)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_temporary (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:is_temporary: ", p), err)
	}
	return err
}

func (p *TTableDetails) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partition_detail", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:partition_detail: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PartitionDetail)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.partition_detail (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:partition_detail: ", p), err)
	}
	return err
}

func (p *TTableDetails) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTableDetails(%+v)", *p)
}

// Attributes:
//  - Type
//  - ColID
//  - TableID
//  - HasNulls
//  - IntMin
//  - IntMax
//  - Bucket
//  - FpMin
//  - FpMax
type TColumnRange struct {
	Type     TExpressionRangeType `thrift:"type,1" json:"type"`
	ColID    int32                `thrift:"col_id,2" json:"col_id"`
	TableID  int32                `thrift:"table_id,3" json:"table_id"`
	HasNulls bool                 `thrift:"has_nulls,4" json:"has_nulls"`
	IntMin   int64                `thrift:"int_min,5" json:"int_min"`
	IntMax   int64                `thrift:"int_max,6" json:"int_max"`
	Bucket   int64                `thrift:"bucket,7" json:"bucket"`
	FpMin    float64              `thrift:"fp_min,8" json:"fp_min"`
	FpMax    float64              `thrift:"fp_max,9" json:"fp_max"`
}

func NewTColumnRange() *TColumnRange {
	return &TColumnRange{}
}

func (p *TColumnRange) GetType() TExpressionRangeType {
	return p.Type
}

func (p *TColumnRange) GetColID() int32 {
	return p.ColID
}

func (p *TColumnRange) GetTableID() int32 {
	return p.TableID
}

func (p *TColumnRange) GetHasNulls() bool {
	return p.HasNulls
}

func (p *TColumnRange) GetIntMin() int64 {
	return p.IntMin
}

func (p *TColumnRange) GetIntMax() int64 {
	return p.IntMax
}

func (p *TColumnRange) GetBucket() int64 {
	return p.Bucket
}

func (p *TColumnRange) GetFpMin() float64 {
	return p.FpMin
}

func (p *TColumnRange) GetFpMax() float64 {
	return p.FpMax
}
func (p *TColumnRange) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TColumnRange) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TExpressionRangeType(v)
		p.Type = temp
	}
	return nil
}

func (p *TColumnRange) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ColID = v
	}
	return nil
}

func (p *TColumnRange) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TableID = v
	}
	return nil
}

func (p *TColumnRange) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.HasNulls = v
	}
	return nil
}

func (p *TColumnRange) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IntMin = v
	}
	return nil
}

func (p *TColumnRange) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.IntMax = v
	}
	return nil
}

func (p *TColumnRange) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Bucket = v
	}
	return nil
}

func (p *TColumnRange) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.FpMin = v
	}
	return nil
}

func (p *TColumnRange) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.FpMax = v
	}
	return nil
}

func (p *TColumnRange) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TColumnRange"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TColumnRange) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *TColumnRange) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("col_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:col_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ColID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.col_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:col_id: ", p), err)
	}
	return err
}

func (p *TColumnRange) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_id", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:table_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TableID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:table_id: ", p), err)
	}
	return err
}

func (p *TColumnRange) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("has_nulls", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:has_nulls: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.HasNulls)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.has_nulls (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:has_nulls: ", p), err)
	}
	return err
}

func (p *TColumnRange) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("int_min", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:int_min: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.IntMin)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.int_min (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:int_min: ", p), err)
	}
	return err
}

func (p *TColumnRange) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("int_max", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:int_max: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.IntMax)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.int_max (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:int_max: ", p), err)
	}
	return err
}

func (p *TColumnRange) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bucket", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:bucket: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Bucket)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bucket (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:bucket: ", p), err)
	}
	return err
}

func (p *TColumnRange) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fp_min", thrift.DOUBLE, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:fp_min: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.FpMin)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fp_min (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:fp_min: ", p), err)
	}
	return err
}

func (p *TColumnRange) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fp_max", thrift.DOUBLE, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:fp_max: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.FpMax)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fp_max (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:fp_max: ", p), err)
	}
	return err
}

func (p *TColumnRange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumnRange(%+v)", *p)
}

// Attributes:
//  - DictID
//  - EntryCount
type TDictionaryGeneration struct {
	DictID     int32 `thrift:"dict_id,1" json:"dict_id"`
	EntryCount int64 `thrift:"entry_count,2" json:"entry_count"`
}

func NewTDictionaryGeneration() *TDictionaryGeneration {
	return &TDictionaryGeneration{}
}

func (p *TDictionaryGeneration) GetDictID() int32 {
	return p.DictID
}

func (p *TDictionaryGeneration) GetEntryCount() int64 {
	return p.EntryCount
}
func (p *TDictionaryGeneration) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDictionaryGeneration) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DictID = v
	}
	return nil
}

func (p *TDictionaryGeneration) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EntryCount = v
	}
	return nil
}

func (p *TDictionaryGeneration) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDictionaryGeneration"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDictionaryGeneration) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dict_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dict_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DictID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dict_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dict_id: ", p), err)
	}
	return err
}

func (p *TDictionaryGeneration) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("entry_count", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entry_count: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.EntryCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.entry_count (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entry_count: ", p), err)
	}
	return err
}

func (p *TDictionaryGeneration) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDictionaryGeneration(%+v)", *p)
}

// Attributes:
//  - TableID
//  - TupleCount
//  - StartRowid
type TTableGeneration struct {
	TableID    int32 `thrift:"table_id,1" json:"table_id"`
	TupleCount int64 `thrift:"tuple_count,2" json:"tuple_count"`
	StartRowid int64 `thrift:"start_rowid,3" json:"start_rowid"`
}

func NewTTableGeneration() *TTableGeneration {
	return &TTableGeneration{}
}

func (p *TTableGeneration) GetTableID() int32 {
	return p.TableID
}

func (p *TTableGeneration) GetTupleCount() int64 {
	return p.TupleCount
}

func (p *TTableGeneration) GetStartRowid() int64 {
	return p.StartRowid
}
func (p *TTableGeneration) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TTableGeneration) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TableID = v
	}
	return nil
}

func (p *TTableGeneration) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TupleCount = v
	}
	return nil
}

func (p *TTableGeneration) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StartRowid = v
	}
	return nil
}

func (p *TTableGeneration) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTableGeneration"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TTableGeneration) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TableID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table_id: ", p), err)
	}
	return err
}

func (p *TTableGeneration) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tuple_count", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tuple_count: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TupleCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tuple_count (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tuple_count: ", p), err)
	}
	return err
}

func (p *TTableGeneration) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_rowid", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:start_rowid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.StartRowid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start_rowid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:start_rowid: ", p), err)
	}
	return err
}

func (p *TTableGeneration) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTableGeneration(%+v)", *p)
}

// Attributes:
//  - ID
//  - ColumnRanges
//  - DictionaryGenerations
//  - TableGenerations
//  - ParentSessionID
type TPendingQuery struct {
	ID                    TQueryId                 `thrift:"id,1" json:"id"`
	ColumnRanges          []*TColumnRange          `thrift:"column_ranges,2" json:"column_ranges"`
	DictionaryGenerations []*TDictionaryGeneration `thrift:"dictionary_generations,3" json:"dictionary_generations"`
	TableGenerations      []*TTableGeneration      `thrift:"table_generations,4" json:"table_generations"`
	ParentSessionID       TSessionId               `thrift:"parent_session_id,5" json:"parent_session_id"`
}

func NewTPendingQuery() *TPendingQuery {
	return &TPendingQuery{}
}

func (p *TPendingQuery) GetID() TQueryId {
	return p.ID
}

func (p *TPendingQuery) GetColumnRanges() []*TColumnRange {
	return p.ColumnRanges
}

func (p *TPendingQuery) GetDictionaryGenerations() []*TDictionaryGeneration {
	return p.DictionaryGenerations
}

func (p *TPendingQuery) GetTableGenerations() []*TTableGeneration {
	return p.TableGenerations
}

func (p *TPendingQuery) GetParentSessionID() TSessionId {
	return p.ParentSessionID
}
func (p *TPendingQuery) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TPendingQuery) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TQueryId(v)
		p.ID = temp
	}
	return nil
}

func (p *TPendingQuery) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TColumnRange, 0, size)
	p.ColumnRanges = tSlice
	for i := 0; i < size; i++ {
		_elem21 := &TColumnRange{}
		if err := _elem21.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem21), err)
		}
		p.ColumnRanges = append(p.ColumnRanges, _elem21)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TPendingQuery) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TDictionaryGeneration, 0, size)
	p.DictionaryGenerations = tSlice
	for i := 0; i < size; i++ {
		_elem22 := &TDictionaryGeneration{}
		if err := _elem22.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
		}
		p.DictionaryGenerations = append(p.DictionaryGenerations, _elem22)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TPendingQuery) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TTableGeneration, 0, size)
	p.TableGenerations = tSlice
	for i := 0; i < size; i++ {
		_elem23 := &TTableGeneration{}
		if err := _elem23.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem23), err)
		}
		p.TableGenerations = append(p.TableGenerations, _elem23)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TPendingQuery) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := TSessionId(v)
		p.ParentSessionID = temp
	}
	return nil
}

func (p *TPendingQuery) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TPendingQuery"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TPendingQuery) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *TPendingQuery) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("column_ranges", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:column_ranges: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnRanges)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ColumnRanges {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:column_ranges: ", p), err)
	}
	return err
}

func (p *TPendingQuery) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dictionary_generations", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dictionary_generations: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DictionaryGenerations)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.DictionaryGenerations {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dictionary_generations: ", p), err)
	}
	return err
}

func (p *TPendingQuery) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_generations", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:table_generations: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TableGenerations)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.TableGenerations {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:table_generations: ", p), err)
	}
	return err
}

func (p *TPendingQuery) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parent_session_id", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:parent_session_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ParentSessionID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.parent_session_id (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:parent_session_id: ", p), err)
	}
	return err
}

func (p *TPendingQuery) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPendingQuery(%+v)", *p)
}

// Attributes:
//  - Payload
//  - IsNull
type TVarLen struct {
	Payload []byte `thrift:"payload,1" json:"payload"`
	IsNull  bool   `thrift:"is_null,2" json:"is_null"`
}

func NewTVarLen() *TVarLen {
	return &TVarLen{}
}

func (p *TVarLen) GetPayload() []byte {
	return p.Payload
}

func (p *TVarLen) GetIsNull() bool {
	return p.IsNull
}
func (p *TVarLen) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TVarLen) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Payload = v
	}
	return nil
}

func (p *TVarLen) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IsNull = v
	}
	return nil
}

func (p *TVarLen) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TVarLen"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TVarLen) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("payload", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:payload: ", p), err)
	}
	if err := oprot.WriteBinary(p.Payload); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.payload (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:payload: ", p), err)
	}
	return err
}

func (p *TVarLen) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_null", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:is_null: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsNull)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_null (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:is_null: ", p), err)
	}
	return err
}

func (p *TVarLen) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TVarLen(%+v)", *p)
}

// Attributes:
//  - FixedLenData
//  - VarLenData
type TDataBlockPtr struct {
	FixedLenData []byte     `thrift:"fixed_len_data,1" json:"fixed_len_data,omitempty"`
	VarLenData   []*TVarLen `thrift:"var_len_data,2" json:"var_len_data,omitempty"`
}

func NewTDataBlockPtr() *TDataBlockPtr {
	return &TDataBlockPtr{}
}

var TDataBlockPtr_FixedLenData_DEFAULT []byte

func (p *TDataBlockPtr) GetFixedLenData() []byte {
	return p.FixedLenData
}

var TDataBlockPtr_VarLenData_DEFAULT []*TVarLen

func (p *TDataBlockPtr) GetVarLenData() []*TVarLen {
	return p.VarLenData
}
func (p *TDataBlockPtr) IsSetFixedLenData() bool {
	return p.FixedLenData != nil
}

func (p *TDataBlockPtr) IsSetVarLenData() bool {
	return p.VarLenData != nil
}

func (p *TDataBlockPtr) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDataBlockPtr) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.FixedLenData = v
	}
	return nil
}

func (p *TDataBlockPtr) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TVarLen, 0, size)
	p.VarLenData = tSlice
	for i := 0; i < size; i++ {
		_elem24 := &TVarLen{}
		if err := _elem24.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem24), err)
		}
		p.VarLenData = append(p.VarLenData, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TDataBlockPtr) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDataBlockPtr"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDataBlockPtr) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFixedLenData() {
		if err := oprot.WriteFieldBegin("fixed_len_data", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fixed_len_data: ", p), err)
		}
		if err := oprot.WriteBinary(p.FixedLenData); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fixed_len_data (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fixed_len_data: ", p), err)
		}
	}
	return err
}

func (p *TDataBlockPtr) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVarLenData() {
		if err := oprot.WriteFieldBegin("var_len_data", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:var_len_data: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VarLenData)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.VarLenData {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:var_len_data: ", p), err)
		}
	}
	return err
}

func (p *TDataBlockPtr) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDataBlockPtr(%+v)", *p)
}

// Attributes:
//  - DbID
//  - TableID
//  - ColumnIds
//  - Data
//  - NumRows
type TInsertData struct {
	DbID      int32            `thrift:"db_id,1" json:"db_id"`
	TableID   int32            `thrift:"table_id,2" json:"table_id"`
	ColumnIds []int32          `thrift:"column_ids,3" json:"column_ids"`
	Data      []*TDataBlockPtr `thrift:"data,4" json:"data"`
	NumRows   int64            `thrift:"num_rows,5" json:"num_rows"`
}

func NewTInsertData() *TInsertData {
	return &TInsertData{}
}

func (p *TInsertData) GetDbID() int32 {
	return p.DbID
}

func (p *TInsertData) GetTableID() int32 {
	return p.TableID
}

func (p *TInsertData) GetColumnIds() []int32 {
	return p.ColumnIds
}

func (p *TInsertData) GetData() []*TDataBlockPtr {
	return p.Data
}

func (p *TInsertData) GetNumRows() int64 {
	return p.NumRows
}
func (p *TInsertData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TInsertData) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbID = v
	}
	return nil
}

func (p *TInsertData) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableID = v
	}
	return nil
}

func (p *TInsertData) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.ColumnIds = tSlice
	for i := 0; i < size; i++ {
		var _elem25 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem25 = v
		}
		p.ColumnIds = append(p.ColumnIds, _elem25)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TInsertData) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TDataBlockPtr, 0, size)
	p.Data = tSlice
	for i := 0; i < size; i++ {
		_elem26 := &TDataBlockPtr{}
		if err := _elem26.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem26), err)
		}
		p.Data = append(p.Data, _elem26)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TInsertData) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.NumRows = v
	}
	return nil
}

func (p *TInsertData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TInsertData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TInsertData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DbID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_id: ", p), err)
	}
	return err
}

func (p *TInsertData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TableID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_id: ", p), err)
	}
	return err
}

func (p *TInsertData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("column_ids", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:column_ids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.ColumnIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ColumnIds {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:column_ids: ", p), err)
	}
	return err
}

func (p *TInsertData) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:data: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:data: ", p), err)
	}
	return err
}

func (p *TInsertData) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_rows", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:num_rows: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NumRows)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_rows (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:num_rows: ", p), err)
	}
	return err
}

func (p *TInsertData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TInsertData(%+v)", *p)
}

// Attributes:
//  - ID
type TPendingRenderQuery struct {
	ID TQueryId `thrift:"id,1" json:"id"`
}

func NewTPendingRenderQuery() *TPendingRenderQuery {
	return &TPendingRenderQuery{}
}

func (p *TPendingRenderQuery) GetID() TQueryId {
	return p.ID
}
func (p *TPendingRenderQuery) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TPendingRenderQuery) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TQueryId(v)
		p.ID = temp
	}
	return nil
}

func (p *TPendingRenderQuery) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TPendingRenderQuery"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TPendingRenderQuery) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *TPendingRenderQuery) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPendingRenderQuery(%+v)", *p)
}

// Attributes:
//  - MergeType
//  - NodeID
//  - ExecutionTimeMs
//  - RenderTimeMs
//  - TotalTimeMs
type TRenderParseResult_ struct {
	MergeType       TMergeType `thrift:"merge_type,1" json:"merge_type"`
	NodeID          int32      `thrift:"node_id,2" json:"node_id"`
	ExecutionTimeMs int64      `thrift:"execution_time_ms,3" json:"execution_time_ms"`
	RenderTimeMs    int64      `thrift:"render_time_ms,4" json:"render_time_ms"`
	TotalTimeMs     int64      `thrift:"total_time_ms,5" json:"total_time_ms"`
}

func NewTRenderParseResult_() *TRenderParseResult_ {
	return &TRenderParseResult_{}
}

func (p *TRenderParseResult_) GetMergeType() TMergeType {
	return p.MergeType
}

func (p *TRenderParseResult_) GetNodeID() int32 {
	return p.NodeID
}

func (p *TRenderParseResult_) GetExecutionTimeMs() int64 {
	return p.ExecutionTimeMs
}

func (p *TRenderParseResult_) GetRenderTimeMs() int64 {
	return p.RenderTimeMs
}

func (p *TRenderParseResult_) GetTotalTimeMs() int64 {
	return p.TotalTimeMs
}
func (p *TRenderParseResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TRenderParseResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TMergeType(v)
		p.MergeType = temp
	}
	return nil
}

func (p *TRenderParseResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NodeID = v
	}
	return nil
}

func (p *TRenderParseResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ExecutionTimeMs = v
	}
	return nil
}

func (p *TRenderParseResult_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.RenderTimeMs = v
	}
	return nil
}

func (p *TRenderParseResult_) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.TotalTimeMs = v
	}
	return nil
}

func (p *TRenderParseResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRenderParseResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TRenderParseResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("merge_type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:merge_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MergeType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.merge_type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:merge_type: ", p), err)
	}
	return err
}

func (p *TRenderParseResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("node_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:node_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NodeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.node_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:node_id: ", p), err)
	}
	return err
}

func (p *TRenderParseResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("execution_time_ms", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:execution_time_ms: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ExecutionTimeMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.execution_time_ms (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:execution_time_ms: ", p), err)
	}
	return err
}

func (p *TRenderParseResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("render_time_ms", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:render_time_ms: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RenderTimeMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.render_time_ms (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:render_time_ms: ", p), err)
	}
	return err
}

func (p *TRenderParseResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total_time_ms", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:total_time_ms: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalTimeMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total_time_ms (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:total_time_ms: ", p), err)
	}
	return err
}

func (p *TRenderParseResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRenderParseResult_(%+v)", *p)
}

// Attributes:
//  - NumPixelChannels
//  - NumPixelSamples
//  - Pixels
//  - RowIds_A
//  - RowIds_B
//  - TableIds
//  - AccumData
//  - AccumDepth
type TRawRenderPassDataResult_ struct {
	NumPixelChannels int32  `thrift:"num_pixel_channels,1" json:"num_pixel_channels"`
	NumPixelSamples  int32  `thrift:"num_pixel_samples,2" json:"num_pixel_samples"`
	Pixels           []byte `thrift:"pixels,3" json:"pixels"`
	RowIds_A         []byte `thrift:"row_ids_A,4" json:"row_ids_A"`
	RowIds_B         []byte `thrift:"row_ids_B,5" json:"row_ids_B"`
	TableIds         []byte `thrift:"table_ids,6" json:"table_ids"`
	AccumData        []byte `thrift:"accum_data,7" json:"accum_data"`
	AccumDepth       int32  `thrift:"accum_depth,8" json:"accum_depth"`
}

func NewTRawRenderPassDataResult_() *TRawRenderPassDataResult_ {
	return &TRawRenderPassDataResult_{}
}

func (p *TRawRenderPassDataResult_) GetNumPixelChannels() int32 {
	return p.NumPixelChannels
}

func (p *TRawRenderPassDataResult_) GetNumPixelSamples() int32 {
	return p.NumPixelSamples
}

func (p *TRawRenderPassDataResult_) GetPixels() []byte {
	return p.Pixels
}

func (p *TRawRenderPassDataResult_) GetRowIds_A() []byte {
	return p.RowIds_A
}

func (p *TRawRenderPassDataResult_) GetRowIds_B() []byte {
	return p.RowIds_B
}

func (p *TRawRenderPassDataResult_) GetTableIds() []byte {
	return p.TableIds
}

func (p *TRawRenderPassDataResult_) GetAccumData() []byte {
	return p.AccumData
}

func (p *TRawRenderPassDataResult_) GetAccumDepth() int32 {
	return p.AccumDepth
}
func (p *TRawRenderPassDataResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TRawRenderPassDataResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NumPixelChannels = v
	}
	return nil
}

func (p *TRawRenderPassDataResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NumPixelSamples = v
	}
	return nil
}

func (p *TRawRenderPassDataResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Pixels = v
	}
	return nil
}

func (p *TRawRenderPassDataResult_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.RowIds_A = v
	}
	return nil
}

func (p *TRawRenderPassDataResult_) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.RowIds_B = v
	}
	return nil
}

func (p *TRawRenderPassDataResult_) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.TableIds = v
	}
	return nil
}

func (p *TRawRenderPassDataResult_) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.AccumData = v
	}
	return nil
}

func (p *TRawRenderPassDataResult_) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.AccumDepth = v
	}
	return nil
}

func (p *TRawRenderPassDataResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRawRenderPassDataResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TRawRenderPassDataResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_pixel_channels", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num_pixel_channels: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NumPixelChannels)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_pixel_channels (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num_pixel_channels: ", p), err)
	}
	return err
}

func (p *TRawRenderPassDataResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_pixel_samples", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num_pixel_samples: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NumPixelSamples)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_pixel_samples (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num_pixel_samples: ", p), err)
	}
	return err
}

func (p *TRawRenderPassDataResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pixels", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pixels: ", p), err)
	}
	if err := oprot.WriteBinary(p.Pixels); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pixels (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pixels: ", p), err)
	}
	return err
}

func (p *TRawRenderPassDataResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row_ids_A", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:row_ids_A: ", p), err)
	}
	if err := oprot.WriteBinary(p.RowIds_A); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row_ids_A (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:row_ids_A: ", p), err)
	}
	return err
}

func (p *TRawRenderPassDataResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row_ids_B", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:row_ids_B: ", p), err)
	}
	if err := oprot.WriteBinary(p.RowIds_B); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row_ids_B (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:row_ids_B: ", p), err)
	}
	return err
}

func (p *TRawRenderPassDataResult_) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_ids", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:table_ids: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableIds); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_ids (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:table_ids: ", p), err)
	}
	return err
}

func (p *TRawRenderPassDataResult_) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accum_data", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:accum_data: ", p), err)
	}
	if err := oprot.WriteBinary(p.AccumData); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.accum_data (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:accum_data: ", p), err)
	}
	return err
}

func (p *TRawRenderPassDataResult_) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accum_depth", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:accum_depth: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AccumDepth)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.accum_depth (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:accum_depth: ", p), err)
	}
	return err
}

func (p *TRawRenderPassDataResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRawRenderPassDataResult_(%+v)", *p)
}

// Attributes:
//  - Width
//  - Height
//  - RenderPassMap
type TRawPixelData struct {
	Width         int32          `thrift:"width,1" json:"width"`
	Height        int32          `thrift:"height,2" json:"height"`
	RenderPassMap TRenderPassMap `thrift:"render_pass_map,3" json:"render_pass_map"`
}

func NewTRawPixelData() *TRawPixelData {
	return &TRawPixelData{}
}

func (p *TRawPixelData) GetWidth() int32 {
	return p.Width
}

func (p *TRawPixelData) GetHeight() int32 {
	return p.Height
}

func (p *TRawPixelData) GetRenderPassMap() TRenderPassMap {
	return p.RenderPassMap
}
func (p *TRawPixelData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TRawPixelData) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Width = v
	}
	return nil
}

func (p *TRawPixelData) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Height = v
	}
	return nil
}

func (p *TRawPixelData) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(TRenderPassMap, size)
	p.RenderPassMap = tMap
	for i := 0; i < size; i++ {
		var _key27 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key27 = v
		}
		_val28 := &TRawRenderPassDataResult_{}
		if err := _val28.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val28), err)
		}
		p.RenderPassMap[_key27] = _val28
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TRawPixelData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRawPixelData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TRawPixelData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("width", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:width: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Width)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.width (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:width: ", p), err)
	}
	return err
}

func (p *TRawPixelData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("height", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:height: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Height)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.height (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:height: ", p), err)
	}
	return err
}

func (p *TRawPixelData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("render_pass_map", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:render_pass_map: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.RenderPassMap)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.RenderPassMap {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:render_pass_map: ", p), err)
	}
	return err
}

func (p *TRawPixelData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRawPixelData(%+v)", *p)
}

// Attributes:
//  - Type
//  - Cnt
//  - Value
type TRenderDatum struct {
	Type  common.TDatumType `thrift:"type,1" json:"type"`
	Cnt   int32             `thrift:"cnt,2" json:"cnt"`
	Value []byte            `thrift:"value,3" json:"value"`
}

func NewTRenderDatum() *TRenderDatum {
	return &TRenderDatum{}
}

func (p *TRenderDatum) GetType() common.TDatumType {
	return p.Type
}

func (p *TRenderDatum) GetCnt() int32 {
	return p.Cnt
}

func (p *TRenderDatum) GetValue() []byte {
	return p.Value
}
func (p *TRenderDatum) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TRenderDatum) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := common.TDatumType(v)
		p.Type = temp
	}
	return nil
}

func (p *TRenderDatum) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Cnt = v
	}
	return nil
}

func (p *TRenderDatum) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *TRenderDatum) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRenderDatum"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TRenderDatum) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *TRenderDatum) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cnt", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cnt: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Cnt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cnt (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cnt: ", p), err)
	}
	return err
}

func (p *TRenderDatum) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err)
	}
	if err := oprot.WriteBinary(p.Value); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err)
	}
	return err
}

func (p *TRenderDatum) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRenderDatum(%+v)", *p)
}

// Attributes:
//  - MergeData
//  - RawPixelData
//  - ExecutionTimeMs
//  - RenderTimeMs
//  - TotalTimeMs
type TRenderStepResult_ struct {
	MergeData       TRenderAggDataMap `thrift:"merge_data,1" json:"merge_data"`
	RawPixelData    *TRawPixelData    `thrift:"raw_pixel_data,2" json:"raw_pixel_data"`
	ExecutionTimeMs int64             `thrift:"execution_time_ms,3" json:"execution_time_ms"`
	RenderTimeMs    int64             `thrift:"render_time_ms,4" json:"render_time_ms"`
	TotalTimeMs     int64             `thrift:"total_time_ms,5" json:"total_time_ms"`
}

func NewTRenderStepResult_() *TRenderStepResult_ {
	return &TRenderStepResult_{}
}

func (p *TRenderStepResult_) GetMergeData() TRenderAggDataMap {
	return p.MergeData
}

var TRenderStepResult__RawPixelData_DEFAULT *TRawPixelData

func (p *TRenderStepResult_) GetRawPixelData() *TRawPixelData {
	if !p.IsSetRawPixelData() {
		return TRenderStepResult__RawPixelData_DEFAULT
	}
	return p.RawPixelData
}

func (p *TRenderStepResult_) GetExecutionTimeMs() int64 {
	return p.ExecutionTimeMs
}

func (p *TRenderStepResult_) GetRenderTimeMs() int64 {
	return p.RenderTimeMs
}

func (p *TRenderStepResult_) GetTotalTimeMs() int64 {
	return p.TotalTimeMs
}
func (p *TRenderStepResult_) IsSetRawPixelData() bool {
	return p.RawPixelData != nil
}

func (p *TRenderStepResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TRenderStepResult_) readField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(TRenderAggDataMap, size)
	p.MergeData = tMap
	for i := 0; i < size; i++ {
		var _key29 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key29 = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[string]map[string]map[string][]*TRenderDatum, size)
		_val30 := tMap
		for i := 0; i < size; i++ {
			var _key31 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key31 = v
			}
			_, _, size, err := iprot.ReadMapBegin()
			if err != nil {
				return thrift.PrependError("error reading map begin: ", err)
			}
			tMap := make(map[string]map[string][]*TRenderDatum, size)
			_val32 := tMap
			for i := 0; i < size; i++ {
				var _key33 string
				if v, err := iprot.ReadString(); err != nil {
					return thrift.PrependError("error reading field 0: ", err)
				} else {
					_key33 = v
				}
				_, _, size, err := iprot.ReadMapBegin()
				if err != nil {
					return thrift.PrependError("error reading map begin: ", err)
				}
				tMap := make(map[string][]*TRenderDatum, size)
				_val34 := tMap
				for i := 0; i < size; i++ {
					var _key35 string
					if v, err := iprot.ReadString(); err != nil {
						return thrift.PrependError("error reading field 0: ", err)
					} else {
						_key35 = v
					}
					_, size, err := iprot.ReadListBegin()
					if err != nil {
						return thrift.PrependError("error reading list begin: ", err)
					}
					tSlice := make([]*TRenderDatum, 0, size)
					_val36 := tSlice
					for i := 0; i < size; i++ {
						_elem37 := &TRenderDatum{}
						if err := _elem37.Read(iprot); err != nil {
							return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem37), err)
						}
						_val36 = append(_val36, _elem37)
					}
					if err := iprot.ReadListEnd(); err != nil {
						return thrift.PrependError("error reading list end: ", err)
					}
					_val34[_key35] = _val36
				}
				if err := iprot.ReadMapEnd(); err != nil {
					return thrift.PrependError("error reading map end: ", err)
				}
				_val32[_key33] = _val34
			}
			if err := iprot.ReadMapEnd(); err != nil {
				return thrift.PrependError("error reading map end: ", err)
			}
			_val30[_key31] = _val32
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.MergeData[_key29] = _val30
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TRenderStepResult_) readField2(iprot thrift.TProtocol) error {
	p.RawPixelData = &TRawPixelData{}
	if err := p.RawPixelData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RawPixelData), err)
	}
	return nil
}

func (p *TRenderStepResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ExecutionTimeMs = v
	}
	return nil
}

func (p *TRenderStepResult_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.RenderTimeMs = v
	}
	return nil
}

func (p *TRenderStepResult_) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.TotalTimeMs = v
	}
	return nil
}

func (p *TRenderStepResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRenderStepResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TRenderStepResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("merge_data", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:merge_data: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.MergeData)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.MergeData {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(v)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range v {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteString(string(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(v)); err != nil {
					return thrift.PrependError("error writing map begin: ", err)
				}
				for k, v := range v {
					if err := oprot.WriteString(string(k)); err != nil {
						return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
					}
					if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
						return thrift.PrependError("error writing list begin: ", err)
					}
					for _, v := range v {
						if err := v.Write(oprot); err != nil {
							return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
						}
					}
					if err := oprot.WriteListEnd(); err != nil {
						return thrift.PrependError("error writing list end: ", err)
					}
				}
				if err := oprot.WriteMapEnd(); err != nil {
					return thrift.PrependError("error writing map end: ", err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:merge_data: ", p), err)
	}
	return err
}

func (p *TRenderStepResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("raw_pixel_data", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:raw_pixel_data: ", p), err)
	}
	if err := p.RawPixelData.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RawPixelData), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:raw_pixel_data: ", p), err)
	}
	return err
}

func (p *TRenderStepResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("execution_time_ms", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:execution_time_ms: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ExecutionTimeMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.execution_time_ms (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:execution_time_ms: ", p), err)
	}
	return err
}

func (p *TRenderStepResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("render_time_ms", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:render_time_ms: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RenderTimeMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.render_time_ms (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:render_time_ms: ", p), err)
	}
	return err
}

func (p *TRenderStepResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total_time_ms", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:total_time_ms: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalTimeMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total_time_ms (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:total_time_ms: ", p), err)
	}
	return err
}

func (p *TRenderStepResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRenderStepResult_(%+v)", *p)
}

// Attributes:
//  - Create_
//  - Delete_
//  - ViewSqlEditor_
//  - Access_
type TDatabasePermissions struct {
	Create_        bool `thrift:"create_,1" json:"create_"`
	Delete_        bool `thrift:"delete_,2" json:"delete_"`
	ViewSqlEditor_ bool `thrift:"view_sql_editor_,3" json:"view_sql_editor_"`
	Access_        bool `thrift:"access_,4" json:"access_"`
}

func NewTDatabasePermissions() *TDatabasePermissions {
	return &TDatabasePermissions{}
}

func (p *TDatabasePermissions) GetCreate_() bool {
	return p.Create_
}

func (p *TDatabasePermissions) GetDelete_() bool {
	return p.Delete_
}

func (p *TDatabasePermissions) GetViewSqlEditor_() bool {
	return p.ViewSqlEditor_
}

func (p *TDatabasePermissions) GetAccess_() bool {
	return p.Access_
}
func (p *TDatabasePermissions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDatabasePermissions) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Create_ = v
	}
	return nil
}

func (p *TDatabasePermissions) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Delete_ = v
	}
	return nil
}

func (p *TDatabasePermissions) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ViewSqlEditor_ = v
	}
	return nil
}

func (p *TDatabasePermissions) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Access_ = v
	}
	return nil
}

func (p *TDatabasePermissions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDatabasePermissions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDatabasePermissions) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:create_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Create_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.create_ (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:create_: ", p), err)
	}
	return err
}

func (p *TDatabasePermissions) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("delete_", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:delete_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Delete_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.delete_ (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:delete_: ", p), err)
	}
	return err
}

func (p *TDatabasePermissions) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("view_sql_editor_", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:view_sql_editor_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.ViewSqlEditor_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.view_sql_editor_ (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:view_sql_editor_: ", p), err)
	}
	return err
}

func (p *TDatabasePermissions) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("access_", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:access_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Access_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.access_ (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:access_: ", p), err)
	}
	return err
}

func (p *TDatabasePermissions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDatabasePermissions(%+v)", *p)
}

// Attributes:
//  - Create_
//  - Drop_
//  - Select_
//  - Insert_
//  - Update_
//  - Delete_
//  - Truncate_
//  - Alter_
type TTablePermissions struct {
	Create_   bool `thrift:"create_,1" json:"create_"`
	Drop_     bool `thrift:"drop_,2" json:"drop_"`
	Select_   bool `thrift:"select_,3" json:"select_"`
	Insert_   bool `thrift:"insert_,4" json:"insert_"`
	Update_   bool `thrift:"update_,5" json:"update_"`
	Delete_   bool `thrift:"delete_,6" json:"delete_"`
	Truncate_ bool `thrift:"truncate_,7" json:"truncate_"`
	Alter_    bool `thrift:"alter_,8" json:"alter_"`
}

func NewTTablePermissions() *TTablePermissions {
	return &TTablePermissions{}
}

func (p *TTablePermissions) GetCreate_() bool {
	return p.Create_
}

func (p *TTablePermissions) GetDrop_() bool {
	return p.Drop_
}

func (p *TTablePermissions) GetSelect_() bool {
	return p.Select_
}

func (p *TTablePermissions) GetInsert_() bool {
	return p.Insert_
}

func (p *TTablePermissions) GetUpdate_() bool {
	return p.Update_
}

func (p *TTablePermissions) GetDelete_() bool {
	return p.Delete_
}

func (p *TTablePermissions) GetTruncate_() bool {
	return p.Truncate_
}

func (p *TTablePermissions) GetAlter_() bool {
	return p.Alter_
}
func (p *TTablePermissions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TTablePermissions) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Create_ = v
	}
	return nil
}

func (p *TTablePermissions) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Drop_ = v
	}
	return nil
}

func (p *TTablePermissions) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Select_ = v
	}
	return nil
}

func (p *TTablePermissions) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Insert_ = v
	}
	return nil
}

func (p *TTablePermissions) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Update_ = v
	}
	return nil
}

func (p *TTablePermissions) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Delete_ = v
	}
	return nil
}

func (p *TTablePermissions) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Truncate_ = v
	}
	return nil
}

func (p *TTablePermissions) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Alter_ = v
	}
	return nil
}

func (p *TTablePermissions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTablePermissions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TTablePermissions) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:create_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Create_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.create_ (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:create_: ", p), err)
	}
	return err
}

func (p *TTablePermissions) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("drop_", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:drop_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Drop_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.drop_ (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:drop_: ", p), err)
	}
	return err
}

func (p *TTablePermissions) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("select_", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:select_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Select_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.select_ (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:select_: ", p), err)
	}
	return err
}

func (p *TTablePermissions) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("insert_", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:insert_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Insert_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.insert_ (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:insert_: ", p), err)
	}
	return err
}

func (p *TTablePermissions) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("update_", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:update_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Update_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.update_ (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:update_: ", p), err)
	}
	return err
}

func (p *TTablePermissions) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("delete_", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:delete_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Delete_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.delete_ (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:delete_: ", p), err)
	}
	return err
}

func (p *TTablePermissions) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("truncate_", thrift.BOOL, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:truncate_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Truncate_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.truncate_ (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:truncate_: ", p), err)
	}
	return err
}

func (p *TTablePermissions) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("alter_", thrift.BOOL, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:alter_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Alter_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.alter_ (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:alter_: ", p), err)
	}
	return err
}

func (p *TTablePermissions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTablePermissions(%+v)", *p)
}

// Attributes:
//  - Create_
//  - Delete_
//  - View_
//  - Edit_
type TDashboardPermissions struct {
	Create_ bool `thrift:"create_,1" json:"create_"`
	Delete_ bool `thrift:"delete_,2" json:"delete_"`
	View_   bool `thrift:"view_,3" json:"view_"`
	Edit_   bool `thrift:"edit_,4" json:"edit_"`
}

func NewTDashboardPermissions() *TDashboardPermissions {
	return &TDashboardPermissions{}
}

func (p *TDashboardPermissions) GetCreate_() bool {
	return p.Create_
}

func (p *TDashboardPermissions) GetDelete_() bool {
	return p.Delete_
}

func (p *TDashboardPermissions) GetView_() bool {
	return p.View_
}

func (p *TDashboardPermissions) GetEdit_() bool {
	return p.Edit_
}
func (p *TDashboardPermissions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDashboardPermissions) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Create_ = v
	}
	return nil
}

func (p *TDashboardPermissions) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Delete_ = v
	}
	return nil
}

func (p *TDashboardPermissions) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.View_ = v
	}
	return nil
}

func (p *TDashboardPermissions) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Edit_ = v
	}
	return nil
}

func (p *TDashboardPermissions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDashboardPermissions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDashboardPermissions) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:create_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Create_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.create_ (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:create_: ", p), err)
	}
	return err
}

func (p *TDashboardPermissions) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("delete_", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:delete_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Delete_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.delete_ (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:delete_: ", p), err)
	}
	return err
}

func (p *TDashboardPermissions) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("view_", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:view_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.View_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.view_ (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:view_: ", p), err)
	}
	return err
}

func (p *TDashboardPermissions) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("edit_", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:edit_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Edit_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.edit_ (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:edit_: ", p), err)
	}
	return err
}

func (p *TDashboardPermissions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDashboardPermissions(%+v)", *p)
}

// Attributes:
//  - Create_
//  - Drop_
//  - Select_
//  - Insert_
//  - Update_
//  - Delete_
type TViewPermissions struct {
	Create_ bool `thrift:"create_,1" json:"create_"`
	Drop_   bool `thrift:"drop_,2" json:"drop_"`
	Select_ bool `thrift:"select_,3" json:"select_"`
	Insert_ bool `thrift:"insert_,4" json:"insert_"`
	Update_ bool `thrift:"update_,5" json:"update_"`
	Delete_ bool `thrift:"delete_,6" json:"delete_"`
}

func NewTViewPermissions() *TViewPermissions {
	return &TViewPermissions{}
}

func (p *TViewPermissions) GetCreate_() bool {
	return p.Create_
}

func (p *TViewPermissions) GetDrop_() bool {
	return p.Drop_
}

func (p *TViewPermissions) GetSelect_() bool {
	return p.Select_
}

func (p *TViewPermissions) GetInsert_() bool {
	return p.Insert_
}

func (p *TViewPermissions) GetUpdate_() bool {
	return p.Update_
}

func (p *TViewPermissions) GetDelete_() bool {
	return p.Delete_
}
func (p *TViewPermissions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TViewPermissions) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Create_ = v
	}
	return nil
}

func (p *TViewPermissions) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Drop_ = v
	}
	return nil
}

func (p *TViewPermissions) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Select_ = v
	}
	return nil
}

func (p *TViewPermissions) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Insert_ = v
	}
	return nil
}

func (p *TViewPermissions) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Update_ = v
	}
	return nil
}

func (p *TViewPermissions) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Delete_ = v
	}
	return nil
}

func (p *TViewPermissions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TViewPermissions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TViewPermissions) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:create_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Create_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.create_ (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:create_: ", p), err)
	}
	return err
}

func (p *TViewPermissions) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("drop_", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:drop_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Drop_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.drop_ (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:drop_: ", p), err)
	}
	return err
}

func (p *TViewPermissions) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("select_", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:select_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Select_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.select_ (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:select_: ", p), err)
	}
	return err
}

func (p *TViewPermissions) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("insert_", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:insert_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Insert_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.insert_ (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:insert_: ", p), err)
	}
	return err
}

func (p *TViewPermissions) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("update_", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:update_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Update_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.update_ (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:update_: ", p), err)
	}
	return err
}

func (p *TViewPermissions) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("delete_", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:delete_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Delete_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.delete_ (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:delete_: ", p), err)
	}
	return err
}

func (p *TViewPermissions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TViewPermissions(%+v)", *p)
}

// Attributes:
//  - Create_
//  - Drop_
//  - Alter_
//  - Usage_
type TServerPermissions struct {
	Create_ bool `thrift:"create_,1" json:"create_"`
	Drop_   bool `thrift:"drop_,2" json:"drop_"`
	Alter_  bool `thrift:"alter_,3" json:"alter_"`
	Usage_  bool `thrift:"usage_,4" json:"usage_"`
}

func NewTServerPermissions() *TServerPermissions {
	return &TServerPermissions{}
}

func (p *TServerPermissions) GetCreate_() bool {
	return p.Create_
}

func (p *TServerPermissions) GetDrop_() bool {
	return p.Drop_
}

func (p *TServerPermissions) GetAlter_() bool {
	return p.Alter_
}

func (p *TServerPermissions) GetUsage_() bool {
	return p.Usage_
}
func (p *TServerPermissions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TServerPermissions) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Create_ = v
	}
	return nil
}

func (p *TServerPermissions) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Drop_ = v
	}
	return nil
}

func (p *TServerPermissions) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Alter_ = v
	}
	return nil
}

func (p *TServerPermissions) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Usage_ = v
	}
	return nil
}

func (p *TServerPermissions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TServerPermissions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TServerPermissions) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:create_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Create_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.create_ (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:create_: ", p), err)
	}
	return err
}

func (p *TServerPermissions) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("drop_", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:drop_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Drop_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.drop_ (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:drop_: ", p), err)
	}
	return err
}

func (p *TServerPermissions) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("alter_", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:alter_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Alter_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.alter_ (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:alter_: ", p), err)
	}
	return err
}

func (p *TServerPermissions) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("usage_", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:usage_: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Usage_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.usage_ (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:usage_: ", p), err)
	}
	return err
}

func (p *TServerPermissions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TServerPermissions(%+v)", *p)
}

// Attributes:
//  - DatabasePermissions_
//  - TablePermissions_
//  - DashboardPermissions_
//  - ViewPermissions_
//  - ServerPermissions_
type TDBObjectPermissions struct {
	DatabasePermissions_  *TDatabasePermissions  `thrift:"database_permissions_,1" json:"database_permissions_,omitempty"`
	TablePermissions_     *TTablePermissions     `thrift:"table_permissions_,2" json:"table_permissions_,omitempty"`
	DashboardPermissions_ *TDashboardPermissions `thrift:"dashboard_permissions_,3" json:"dashboard_permissions_,omitempty"`
	ViewPermissions_      *TViewPermissions      `thrift:"view_permissions_,4" json:"view_permissions_,omitempty"`
	ServerPermissions_    *TServerPermissions    `thrift:"server_permissions_,5" json:"server_permissions_,omitempty"`
}

func NewTDBObjectPermissions() *TDBObjectPermissions {
	return &TDBObjectPermissions{}
}

var TDBObjectPermissions_DatabasePermissions__DEFAULT *TDatabasePermissions

func (p *TDBObjectPermissions) GetDatabasePermissions_() *TDatabasePermissions {
	if !p.IsSetDatabasePermissions_() {
		return TDBObjectPermissions_DatabasePermissions__DEFAULT
	}
	return p.DatabasePermissions_
}

var TDBObjectPermissions_TablePermissions__DEFAULT *TTablePermissions

func (p *TDBObjectPermissions) GetTablePermissions_() *TTablePermissions {
	if !p.IsSetTablePermissions_() {
		return TDBObjectPermissions_TablePermissions__DEFAULT
	}
	return p.TablePermissions_
}

var TDBObjectPermissions_DashboardPermissions__DEFAULT *TDashboardPermissions

func (p *TDBObjectPermissions) GetDashboardPermissions_() *TDashboardPermissions {
	if !p.IsSetDashboardPermissions_() {
		return TDBObjectPermissions_DashboardPermissions__DEFAULT
	}
	return p.DashboardPermissions_
}

var TDBObjectPermissions_ViewPermissions__DEFAULT *TViewPermissions

func (p *TDBObjectPermissions) GetViewPermissions_() *TViewPermissions {
	if !p.IsSetViewPermissions_() {
		return TDBObjectPermissions_ViewPermissions__DEFAULT
	}
	return p.ViewPermissions_
}

var TDBObjectPermissions_ServerPermissions__DEFAULT *TServerPermissions

func (p *TDBObjectPermissions) GetServerPermissions_() *TServerPermissions {
	if !p.IsSetServerPermissions_() {
		return TDBObjectPermissions_ServerPermissions__DEFAULT
	}
	return p.ServerPermissions_
}
func (p *TDBObjectPermissions) CountSetFieldsTDBObjectPermissions() int {
	count := 0
	if p.IsSetDatabasePermissions_() {
		count++
	}
	if p.IsSetTablePermissions_() {
		count++
	}
	if p.IsSetDashboardPermissions_() {
		count++
	}
	if p.IsSetViewPermissions_() {
		count++
	}
	if p.IsSetServerPermissions_() {
		count++
	}
	return count

}

func (p *TDBObjectPermissions) IsSetDatabasePermissions_() bool {
	return p.DatabasePermissions_ != nil
}

func (p *TDBObjectPermissions) IsSetTablePermissions_() bool {
	return p.TablePermissions_ != nil
}

func (p *TDBObjectPermissions) IsSetDashboardPermissions_() bool {
	return p.DashboardPermissions_ != nil
}

func (p *TDBObjectPermissions) IsSetViewPermissions_() bool {
	return p.ViewPermissions_ != nil
}

func (p *TDBObjectPermissions) IsSetServerPermissions_() bool {
	return p.ServerPermissions_ != nil
}

func (p *TDBObjectPermissions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDBObjectPermissions) readField1(iprot thrift.TProtocol) error {
	p.DatabasePermissions_ = &TDatabasePermissions{}
	if err := p.DatabasePermissions_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DatabasePermissions_), err)
	}
	return nil
}

func (p *TDBObjectPermissions) readField2(iprot thrift.TProtocol) error {
	p.TablePermissions_ = &TTablePermissions{}
	if err := p.TablePermissions_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TablePermissions_), err)
	}
	return nil
}

func (p *TDBObjectPermissions) readField3(iprot thrift.TProtocol) error {
	p.DashboardPermissions_ = &TDashboardPermissions{}
	if err := p.DashboardPermissions_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DashboardPermissions_), err)
	}
	return nil
}

func (p *TDBObjectPermissions) readField4(iprot thrift.TProtocol) error {
	p.ViewPermissions_ = &TViewPermissions{}
	if err := p.ViewPermissions_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ViewPermissions_), err)
	}
	return nil
}

func (p *TDBObjectPermissions) readField5(iprot thrift.TProtocol) error {
	p.ServerPermissions_ = &TServerPermissions{}
	if err := p.ServerPermissions_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerPermissions_), err)
	}
	return nil
}

func (p *TDBObjectPermissions) Write(oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsTDBObjectPermissions(); c != 1 {
		return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
	}
	if err := oprot.WriteStructBegin("TDBObjectPermissions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDBObjectPermissions) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDatabasePermissions_() {
		if err := oprot.WriteFieldBegin("database_permissions_", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:database_permissions_: ", p), err)
		}
		if err := p.DatabasePermissions_.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DatabasePermissions_), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:database_permissions_: ", p), err)
		}
	}
	return err
}

func (p *TDBObjectPermissions) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTablePermissions_() {
		if err := oprot.WriteFieldBegin("table_permissions_", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_permissions_: ", p), err)
		}
		if err := p.TablePermissions_.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TablePermissions_), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_permissions_: ", p), err)
		}
	}
	return err
}

func (p *TDBObjectPermissions) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDashboardPermissions_() {
		if err := oprot.WriteFieldBegin("dashboard_permissions_", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dashboard_permissions_: ", p), err)
		}
		if err := p.DashboardPermissions_.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DashboardPermissions_), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dashboard_permissions_: ", p), err)
		}
	}
	return err
}

func (p *TDBObjectPermissions) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetViewPermissions_() {
		if err := oprot.WriteFieldBegin("view_permissions_", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:view_permissions_: ", p), err)
		}
		if err := p.ViewPermissions_.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ViewPermissions_), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:view_permissions_: ", p), err)
		}
	}
	return err
}

func (p *TDBObjectPermissions) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetServerPermissions_() {
		if err := oprot.WriteFieldBegin("server_permissions_", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:server_permissions_: ", p), err)
		}
		if err := p.ServerPermissions_.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerPermissions_), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:server_permissions_: ", p), err)
		}
	}
	return err
}

func (p *TDBObjectPermissions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDBObjectPermissions(%+v)", *p)
}

// Attributes:
//  - ObjectName
//  - ObjectType
//  - Privs
//  - Grantee
//  - PrivilegeObjectType
type TDBObject struct {
	ObjectName          string        `thrift:"objectName,1" json:"objectName"`
	ObjectType          TDBObjectType `thrift:"objectType,2" json:"objectType"`
	Privs               []bool        `thrift:"privs,3" json:"privs"`
	Grantee             string        `thrift:"grantee,4" json:"grantee"`
	PrivilegeObjectType TDBObjectType `thrift:"privilegeObjectType,5" json:"privilegeObjectType"`
}

func NewTDBObject() *TDBObject {
	return &TDBObject{}
}

func (p *TDBObject) GetObjectName() string {
	return p.ObjectName
}

func (p *TDBObject) GetObjectType() TDBObjectType {
	return p.ObjectType
}

func (p *TDBObject) GetPrivs() []bool {
	return p.Privs
}

func (p *TDBObject) GetGrantee() string {
	return p.Grantee
}

func (p *TDBObject) GetPrivilegeObjectType() TDBObjectType {
	return p.PrivilegeObjectType
}
func (p *TDBObject) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDBObject) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ObjectName = v
	}
	return nil
}

func (p *TDBObject) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TDBObjectType(v)
		p.ObjectType = temp
	}
	return nil
}

func (p *TDBObject) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]bool, 0, size)
	p.Privs = tSlice
	for i := 0; i < size; i++ {
		var _elem38 bool
		if v, err := iprot.ReadBool(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem38 = v
		}
		p.Privs = append(p.Privs, _elem38)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TDBObject) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Grantee = v
	}
	return nil
}

func (p *TDBObject) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := TDBObjectType(v)
		p.PrivilegeObjectType = temp
	}
	return nil
}

func (p *TDBObject) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDBObject"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDBObject) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("objectName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:objectName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ObjectName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.objectName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:objectName: ", p), err)
	}
	return err
}

func (p *TDBObject) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("objectType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:objectType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ObjectType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.objectType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:objectType: ", p), err)
	}
	return err
}

func (p *TDBObject) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privs", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:privs: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.BOOL, len(p.Privs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Privs {
		if err := oprot.WriteBool(bool(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:privs: ", p), err)
	}
	return err
}

func (p *TDBObject) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grantee", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:grantee: ", p), err)
	}
	if err := oprot.WriteString(string(p.Grantee)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.grantee (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:grantee: ", p), err)
	}
	return err
}

func (p *TDBObject) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privilegeObjectType", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:privilegeObjectType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PrivilegeObjectType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privilegeObjectType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:privilegeObjectType: ", p), err)
	}
	return err
}

func (p *TDBObject) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDBObject(%+v)", *p)
}

// Attributes:
//  - Name
//  - IsUser
//  - Permissions
type TDashboardGrantees struct {
	Name        string                 `thrift:"name,1" json:"name"`
	IsUser      bool                   `thrift:"is_user,2" json:"is_user"`
	Permissions *TDashboardPermissions `thrift:"permissions,3" json:"permissions"`
}

func NewTDashboardGrantees() *TDashboardGrantees {
	return &TDashboardGrantees{}
}

func (p *TDashboardGrantees) GetName() string {
	return p.Name
}

func (p *TDashboardGrantees) GetIsUser() bool {
	return p.IsUser
}

var TDashboardGrantees_Permissions_DEFAULT *TDashboardPermissions

func (p *TDashboardGrantees) GetPermissions() *TDashboardPermissions {
	if !p.IsSetPermissions() {
		return TDashboardGrantees_Permissions_DEFAULT
	}
	return p.Permissions
}
func (p *TDashboardGrantees) IsSetPermissions() bool {
	return p.Permissions != nil
}

func (p *TDashboardGrantees) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDashboardGrantees) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TDashboardGrantees) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IsUser = v
	}
	return nil
}

func (p *TDashboardGrantees) readField3(iprot thrift.TProtocol) error {
	p.Permissions = &TDashboardPermissions{}
	if err := p.Permissions.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Permissions), err)
	}
	return nil
}

func (p *TDashboardGrantees) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDashboardGrantees"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDashboardGrantees) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *TDashboardGrantees) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_user", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:is_user: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsUser)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_user (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:is_user: ", p), err)
	}
	return err
}

func (p *TDashboardGrantees) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("permissions", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:permissions: ", p), err)
	}
	if err := p.Permissions.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Permissions), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:permissions: ", p), err)
	}
	return err
}

func (p *TDashboardGrantees) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDashboardGrantees(%+v)", *p)
}

// Attributes:
//  - DashboardName
//  - DashboardState
//  - ImageHash
//  - UpdateTime
//  - DashboardMetadata
//  - DashboardID
//  - DashboardOwner
//  - IsDashShared
//  - DashboardPermissions
type TDashboard struct {
	DashboardName        string                 `thrift:"dashboard_name,1" json:"dashboard_name"`
	DashboardState       string                 `thrift:"dashboard_state,2" json:"dashboard_state"`
	ImageHash            string                 `thrift:"image_hash,3" json:"image_hash"`
	UpdateTime           string                 `thrift:"update_time,4" json:"update_time"`
	DashboardMetadata    string                 `thrift:"dashboard_metadata,5" json:"dashboard_metadata"`
	DashboardID          int32                  `thrift:"dashboard_id,6" json:"dashboard_id"`
	DashboardOwner       string                 `thrift:"dashboard_owner,7" json:"dashboard_owner"`
	IsDashShared         bool                   `thrift:"is_dash_shared,8" json:"is_dash_shared"`
	DashboardPermissions *TDashboardPermissions `thrift:"dashboard_permissions,9" json:"dashboard_permissions"`
}

func NewTDashboard() *TDashboard {
	return &TDashboard{}
}

func (p *TDashboard) GetDashboardName() string {
	return p.DashboardName
}

func (p *TDashboard) GetDashboardState() string {
	return p.DashboardState
}

func (p *TDashboard) GetImageHash() string {
	return p.ImageHash
}

func (p *TDashboard) GetUpdateTime() string {
	return p.UpdateTime
}

func (p *TDashboard) GetDashboardMetadata() string {
	return p.DashboardMetadata
}

func (p *TDashboard) GetDashboardID() int32 {
	return p.DashboardID
}

func (p *TDashboard) GetDashboardOwner() string {
	return p.DashboardOwner
}

func (p *TDashboard) GetIsDashShared() bool {
	return p.IsDashShared
}

var TDashboard_DashboardPermissions_DEFAULT *TDashboardPermissions

func (p *TDashboard) GetDashboardPermissions() *TDashboardPermissions {
	if !p.IsSetDashboardPermissions() {
		return TDashboard_DashboardPermissions_DEFAULT
	}
	return p.DashboardPermissions
}
func (p *TDashboard) IsSetDashboardPermissions() bool {
	return p.DashboardPermissions != nil
}

func (p *TDashboard) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDashboard) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DashboardName = v
	}
	return nil
}

func (p *TDashboard) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DashboardState = v
	}
	return nil
}

func (p *TDashboard) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ImageHash = v
	}
	return nil
}

func (p *TDashboard) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *TDashboard) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.DashboardMetadata = v
	}
	return nil
}

func (p *TDashboard) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.DashboardID = v
	}
	return nil
}

func (p *TDashboard) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.DashboardOwner = v
	}
	return nil
}

func (p *TDashboard) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.IsDashShared = v
	}
	return nil
}

func (p *TDashboard) readField9(iprot thrift.TProtocol) error {
	p.DashboardPermissions = &TDashboardPermissions{}
	if err := p.DashboardPermissions.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DashboardPermissions), err)
	}
	return nil
}

func (p *TDashboard) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDashboard"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDashboard) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dashboard_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dashboard_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DashboardName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dashboard_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dashboard_name: ", p), err)
	}
	return err
}

func (p *TDashboard) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dashboard_state", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dashboard_state: ", p), err)
	}
	if err := oprot.WriteString(string(p.DashboardState)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dashboard_state (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dashboard_state: ", p), err)
	}
	return err
}

func (p *TDashboard) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("image_hash", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:image_hash: ", p), err)
	}
	if err := oprot.WriteString(string(p.ImageHash)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.image_hash (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:image_hash: ", p), err)
	}
	return err
}

func (p *TDashboard) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("update_time", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:update_time: ", p), err)
	}
	if err := oprot.WriteString(string(p.UpdateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.update_time (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:update_time: ", p), err)
	}
	return err
}

func (p *TDashboard) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dashboard_metadata", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:dashboard_metadata: ", p), err)
	}
	if err := oprot.WriteString(string(p.DashboardMetadata)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dashboard_metadata (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:dashboard_metadata: ", p), err)
	}
	return err
}

func (p *TDashboard) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dashboard_id", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:dashboard_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DashboardID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dashboard_id (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:dashboard_id: ", p), err)
	}
	return err
}

func (p *TDashboard) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dashboard_owner", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dashboard_owner: ", p), err)
	}
	if err := oprot.WriteString(string(p.DashboardOwner)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dashboard_owner (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dashboard_owner: ", p), err)
	}
	return err
}

func (p *TDashboard) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_dash_shared", thrift.BOOL, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:is_dash_shared: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsDashShared)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_dash_shared (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:is_dash_shared: ", p), err)
	}
	return err
}

func (p *TDashboard) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dashboard_permissions", thrift.STRUCT, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:dashboard_permissions: ", p), err)
	}
	if err := p.DashboardPermissions.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DashboardPermissions), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:dashboard_permissions: ", p), err)
	}
	return err
}

func (p *TDashboard) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDashboard(%+v)", *p)
}

// Attributes:
//  - Claims
type TLicenseInfo struct {
	Claims []string `thrift:"claims,1" json:"claims"`
}

func NewTLicenseInfo() *TLicenseInfo {
	return &TLicenseInfo{}
}

func (p *TLicenseInfo) GetClaims() []string {
	return p.Claims
}
func (p *TLicenseInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TLicenseInfo) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Claims = tSlice
	for i := 0; i < size; i++ {
		var _elem39 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem39 = v
		}
		p.Claims = append(p.Claims, _elem39)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TLicenseInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TLicenseInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TLicenseInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("claims", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:claims: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Claims)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Claims {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:claims: ", p), err)
	}
	return err
}

func (p *TLicenseInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TLicenseInfo(%+v)", *p)
}

// Attributes:
//  - User
//  - Database
//  - StartTime
//  - IsSuper
type TSessionInfo struct {
	User      string `thrift:"user,1" json:"user"`
	Database  string `thrift:"database,2" json:"database"`
	StartTime int64  `thrift:"start_time,3" json:"start_time"`
	IsSuper   bool   `thrift:"is_super,4" json:"is_super"`
}

func NewTSessionInfo() *TSessionInfo {
	return &TSessionInfo{}
}

func (p *TSessionInfo) GetUser() string {
	return p.User
}

func (p *TSessionInfo) GetDatabase() string {
	return p.Database
}

func (p *TSessionInfo) GetStartTime() int64 {
	return p.StartTime
}

func (p *TSessionInfo) GetIsSuper() bool {
	return p.IsSuper
}
func (p *TSessionInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TSessionInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *TSessionInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Database = v
	}
	return nil
}

func (p *TSessionInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *TSessionInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IsSuper = v
	}
	return nil
}

func (p *TSessionInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSessionInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSessionInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err)
	}
	return err
}

func (p *TSessionInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("database", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:database: ", p), err)
	}
	if err := oprot.WriteString(string(p.Database)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.database (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:database: ", p), err)
	}
	return err
}

func (p *TSessionInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_time", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:start_time: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start_time (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:start_time: ", p), err)
	}
	return err
}

func (p *TSessionInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_super", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:is_super: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsSuper)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_super (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:is_super: ", p), err)
	}
	return err
}

func (p *TSessionInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSessionInfo(%+v)", *p)
}

// Attributes:
//  - Name
//  - Contents
type TGeoFileLayerInfo struct {
	Name     string                `thrift:"name,1" json:"name"`
	Contents TGeoFileLayerContents `thrift:"contents,2" json:"contents"`
}

func NewTGeoFileLayerInfo() *TGeoFileLayerInfo {
	return &TGeoFileLayerInfo{}
}

func (p *TGeoFileLayerInfo) GetName() string {
	return p.Name
}

func (p *TGeoFileLayerInfo) GetContents() TGeoFileLayerContents {
	return p.Contents
}
func (p *TGeoFileLayerInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TGeoFileLayerInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TGeoFileLayerInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TGeoFileLayerContents(v)
		p.Contents = temp
	}
	return nil
}

func (p *TGeoFileLayerInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TGeoFileLayerInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TGeoFileLayerInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *TGeoFileLayerInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contents", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:contents: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Contents)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.contents (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:contents: ", p), err)
	}
	return err
}

func (p *TGeoFileLayerInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGeoFileLayerInfo(%+v)", *p)
}

// Attributes:
//  - TableID
//  - TableEpoch
//  - LeafIndex
type TTableEpochInfo struct {
	TableID    int32 `thrift:"table_id,1" json:"table_id"`
	TableEpoch int32 `thrift:"table_epoch,2" json:"table_epoch"`
	LeafIndex  int32 `thrift:"leaf_index,3" json:"leaf_index"`
}

func NewTTableEpochInfo() *TTableEpochInfo {
	return &TTableEpochInfo{}
}

func (p *TTableEpochInfo) GetTableID() int32 {
	return p.TableID
}

func (p *TTableEpochInfo) GetTableEpoch() int32 {
	return p.TableEpoch
}

func (p *TTableEpochInfo) GetLeafIndex() int32 {
	return p.LeafIndex
}
func (p *TTableEpochInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TTableEpochInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TableID = v
	}
	return nil
}

func (p *TTableEpochInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableEpoch = v
	}
	return nil
}

func (p *TTableEpochInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LeafIndex = v
	}
	return nil
}

func (p *TTableEpochInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTableEpochInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TTableEpochInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TableID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table_id: ", p), err)
	}
	return err
}

func (p *TTableEpochInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_epoch", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_epoch: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TableEpoch)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_epoch (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_epoch: ", p), err)
	}
	return err
}

func (p *TTableEpochInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("leaf_index", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:leaf_index: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LeafIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.leaf_index (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:leaf_index: ", p), err)
	}
	return err
}

func (p *TTableEpochInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTableEpochInfo(%+v)", *p)
}
