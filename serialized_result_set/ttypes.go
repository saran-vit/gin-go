// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package serialized_result_set

import (
	"bytes"
	"common"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var GoUnusedProtection__ int

type TResultSetLayout int64

const (
	TResultSetLayout_GroupByPerfectHash  TResultSetLayout = 0
	TResultSetLayout_GroupByBaselineHash TResultSetLayout = 1
	TResultSetLayout_Projection          TResultSetLayout = 2
	TResultSetLayout_NonGroupedAggregate TResultSetLayout = 3
)

func (p TResultSetLayout) String() string {
	switch p {
	case TResultSetLayout_GroupByPerfectHash:
		return "GroupByPerfectHash"
	case TResultSetLayout_GroupByBaselineHash:
		return "GroupByBaselineHash"
	case TResultSetLayout_Projection:
		return "Projection"
	case TResultSetLayout_NonGroupedAggregate:
		return "NonGroupedAggregate"
	}
	return "<UNSET>"
}

func TResultSetLayoutFromString(s string) (TResultSetLayout, error) {
	switch s {
	case "GroupByPerfectHash":
		return TResultSetLayout_GroupByPerfectHash, nil
	case "GroupByBaselineHash":
		return TResultSetLayout_GroupByBaselineHash, nil
	case "Projection":
		return TResultSetLayout_Projection, nil
	case "NonGroupedAggregate":
		return TResultSetLayout_NonGroupedAggregate, nil
	}
	return TResultSetLayout(0), fmt.Errorf("not a valid TResultSetLayout string")
}

func TResultSetLayoutPtr(v TResultSetLayout) *TResultSetLayout { return &v }

func (p TResultSetLayout) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TResultSetLayout) UnmarshalText(text []byte) error {
	q, err := TResultSetLayoutFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type TCountDistinctImplType int64

const (
	TCountDistinctImplType_Invalid TCountDistinctImplType = 0
	TCountDistinctImplType_Bitmap  TCountDistinctImplType = 1
	TCountDistinctImplType_StdSet  TCountDistinctImplType = 2
)

func (p TCountDistinctImplType) String() string {
	switch p {
	case TCountDistinctImplType_Invalid:
		return "Invalid"
	case TCountDistinctImplType_Bitmap:
		return "Bitmap"
	case TCountDistinctImplType_StdSet:
		return "StdSet"
	}
	return "<UNSET>"
}

func TCountDistinctImplTypeFromString(s string) (TCountDistinctImplType, error) {
	switch s {
	case "Invalid":
		return TCountDistinctImplType_Invalid, nil
	case "Bitmap":
		return TCountDistinctImplType_Bitmap, nil
	case "StdSet":
		return TCountDistinctImplType_StdSet, nil
	}
	return TCountDistinctImplType(0), fmt.Errorf("not a valid TCountDistinctImplType string")
}

func TCountDistinctImplTypePtr(v TCountDistinctImplType) *TCountDistinctImplType { return &v }

func (p TCountDistinctImplType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TCountDistinctImplType) UnmarshalText(text []byte) error {
	q, err := TCountDistinctImplTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type TAggKind int64

const (
	TAggKind_AVG                   TAggKind = 0
	TAggKind_MIN                   TAggKind = 1
	TAggKind_MAX                   TAggKind = 2
	TAggKind_SUM                   TAggKind = 3
	TAggKind_COUNT                 TAggKind = 4
	TAggKind_APPROX_COUNT_DISTINCT TAggKind = 5
	TAggKind_SAMPLE                TAggKind = 6
	TAggKind_SINGLE_VALUE          TAggKind = 7
)

func (p TAggKind) String() string {
	switch p {
	case TAggKind_AVG:
		return "AVG"
	case TAggKind_MIN:
		return "MIN"
	case TAggKind_MAX:
		return "MAX"
	case TAggKind_SUM:
		return "SUM"
	case TAggKind_COUNT:
		return "COUNT"
	case TAggKind_APPROX_COUNT_DISTINCT:
		return "APPROX_COUNT_DISTINCT"
	case TAggKind_SAMPLE:
		return "SAMPLE"
	case TAggKind_SINGLE_VALUE:
		return "SINGLE_VALUE"
	}
	return "<UNSET>"
}

func TAggKindFromString(s string) (TAggKind, error) {
	switch s {
	case "AVG":
		return TAggKind_AVG, nil
	case "MIN":
		return TAggKind_MIN, nil
	case "MAX":
		return TAggKind_MAX, nil
	case "SUM":
		return TAggKind_SUM, nil
	case "COUNT":
		return TAggKind_COUNT, nil
	case "APPROX_COUNT_DISTINCT":
		return TAggKind_APPROX_COUNT_DISTINCT, nil
	case "SAMPLE":
		return TAggKind_SAMPLE, nil
	case "SINGLE_VALUE":
		return TAggKind_SINGLE_VALUE, nil
	}
	return TAggKind(0), fmt.Errorf("not a valid TAggKind string")
}

func TAggKindPtr(v TAggKind) *TAggKind { return &v }

func (p TAggKind) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TAggKind) UnmarshalText(text []byte) error {
	q, err := TAggKindFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type TCountDistinctDescriptors []*TCountDistinctDescriptor

func TCountDistinctDescriptorsPtr(v TCountDistinctDescriptors) *TCountDistinctDescriptors { return &v }

// Attributes:
//  - Padded
//  - Logical
type TSlotSize struct {
	Padded  int16 `thrift:"padded,1" json:"padded"`
	Logical int16 `thrift:"logical,2" json:"logical"`
}

func NewTSlotSize() *TSlotSize {
	return &TSlotSize{}
}

func (p *TSlotSize) GetPadded() int16 {
	return p.Padded
}

func (p *TSlotSize) GetLogical() int16 {
	return p.Logical
}
func (p *TSlotSize) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TSlotSize) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Padded = v
	}
	return nil
}

func (p *TSlotSize) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Logical = v
	}
	return nil
}

func (p *TSlotSize) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSlotSize"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSlotSize) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("padded", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:padded: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Padded)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.padded (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:padded: ", p), err)
	}
	return err
}

func (p *TSlotSize) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("logical", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:logical: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Logical)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.logical (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:logical: ", p), err)
	}
	return err
}

func (p *TSlotSize) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSlotSize(%+v)", *p)
}

// Attributes:
//  - SlotSizes
//  - ColToSlotMap
type TColSlotContext struct {
	SlotSizes    []*TSlotSize `thrift:"slot_sizes,1" json:"slot_sizes"`
	ColToSlotMap [][]int32    `thrift:"col_to_slot_map,2" json:"col_to_slot_map"`
}

func NewTColSlotContext() *TColSlotContext {
	return &TColSlotContext{}
}

func (p *TColSlotContext) GetSlotSizes() []*TSlotSize {
	return p.SlotSizes
}

func (p *TColSlotContext) GetColToSlotMap() [][]int32 {
	return p.ColToSlotMap
}
func (p *TColSlotContext) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TColSlotContext) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TSlotSize, 0, size)
	p.SlotSizes = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &TSlotSize{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.SlotSizes = append(p.SlotSizes, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TColSlotContext) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]int32, 0, size)
	p.ColToSlotMap = tSlice
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]int32, 0, size)
		_elem1 := tSlice
		for i := 0; i < size; i++ {
			var _elem2 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem2 = v
			}
			_elem1 = append(_elem1, _elem2)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.ColToSlotMap = append(p.ColToSlotMap, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TColSlotContext) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TColSlotContext"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TColSlotContext) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("slot_sizes", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:slot_sizes: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SlotSizes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.SlotSizes {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:slot_sizes: ", p), err)
	}
	return err
}

func (p *TColSlotContext) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("col_to_slot_map", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:col_to_slot_map: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.ColToSlotMap)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ColToSlotMap {
		if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:col_to_slot_map: ", p), err)
	}
	return err
}

func (p *TColSlotContext) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColSlotContext(%+v)", *p)
}

// Attributes:
//  - ImplType
//  - MinVal
//  - BitmapSzBits
//  - Approximate
//  - DeviceType
//  - SubBitmapCount
type TCountDistinctDescriptor struct {
	ImplType       TCountDistinctImplType `thrift:"impl_type,1" json:"impl_type"`
	MinVal         int64                  `thrift:"min_val,2" json:"min_val"`
	BitmapSzBits   int64                  `thrift:"bitmap_sz_bits,3" json:"bitmap_sz_bits"`
	Approximate    bool                   `thrift:"approximate,4" json:"approximate"`
	DeviceType     common.TDeviceType     `thrift:"device_type,5" json:"device_type"`
	SubBitmapCount int64                  `thrift:"sub_bitmap_count,6" json:"sub_bitmap_count"`
}

func NewTCountDistinctDescriptor() *TCountDistinctDescriptor {
	return &TCountDistinctDescriptor{}
}

func (p *TCountDistinctDescriptor) GetImplType() TCountDistinctImplType {
	return p.ImplType
}

func (p *TCountDistinctDescriptor) GetMinVal() int64 {
	return p.MinVal
}

func (p *TCountDistinctDescriptor) GetBitmapSzBits() int64 {
	return p.BitmapSzBits
}

func (p *TCountDistinctDescriptor) GetApproximate() bool {
	return p.Approximate
}

func (p *TCountDistinctDescriptor) GetDeviceType() common.TDeviceType {
	return p.DeviceType
}

func (p *TCountDistinctDescriptor) GetSubBitmapCount() int64 {
	return p.SubBitmapCount
}
func (p *TCountDistinctDescriptor) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCountDistinctDescriptor) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TCountDistinctImplType(v)
		p.ImplType = temp
	}
	return nil
}

func (p *TCountDistinctDescriptor) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MinVal = v
	}
	return nil
}

func (p *TCountDistinctDescriptor) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.BitmapSzBits = v
	}
	return nil
}

func (p *TCountDistinctDescriptor) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Approximate = v
	}
	return nil
}

func (p *TCountDistinctDescriptor) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := common.TDeviceType(v)
		p.DeviceType = temp
	}
	return nil
}

func (p *TCountDistinctDescriptor) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.SubBitmapCount = v
	}
	return nil
}

func (p *TCountDistinctDescriptor) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCountDistinctDescriptor"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCountDistinctDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("impl_type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:impl_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ImplType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.impl_type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:impl_type: ", p), err)
	}
	return err
}

func (p *TCountDistinctDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("min_val", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:min_val: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MinVal)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.min_val (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:min_val: ", p), err)
	}
	return err
}

func (p *TCountDistinctDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bitmap_sz_bits", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:bitmap_sz_bits: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BitmapSzBits)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bitmap_sz_bits (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:bitmap_sz_bits: ", p), err)
	}
	return err
}

func (p *TCountDistinctDescriptor) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("approximate", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:approximate: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Approximate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.approximate (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:approximate: ", p), err)
	}
	return err
}

func (p *TCountDistinctDescriptor) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("device_type", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:device_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DeviceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.device_type (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:device_type: ", p), err)
	}
	return err
}

func (p *TCountDistinctDescriptor) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sub_bitmap_count", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sub_bitmap_count: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SubBitmapCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sub_bitmap_count (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sub_bitmap_count: ", p), err)
	}
	return err
}

func (p *TCountDistinctDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCountDistinctDescriptor(%+v)", *p)
}

// Attributes:
//  - Layout
//  - Keyless
//  - EntryCount
//  - IdxTargetAsKey
//  - MinVal
//  - MaxVal
//  - Bucket
//  - GroupColWidths
//  - KeyBytewidth
//  - ColSlotContext
//  - TargetGroupbyIndices
//  - CountDistinctDescriptors
//  - Force_4byteFloat
type TResultSetBufferDescriptor struct {
	Layout                   TResultSetLayout          `thrift:"layout,1" json:"layout"`
	Keyless                  bool                      `thrift:"keyless,2" json:"keyless"`
	EntryCount               int32                     `thrift:"entry_count,3" json:"entry_count"`
	IdxTargetAsKey           int32                     `thrift:"idx_target_as_key,4" json:"idx_target_as_key"`
	MinVal                   int64                     `thrift:"min_val,5" json:"min_val"`
	MaxVal                   int64                     `thrift:"max_val,6" json:"max_val"`
	Bucket                   int64                     `thrift:"bucket,7" json:"bucket"`
	GroupColWidths           []int16                   `thrift:"group_col_widths,8" json:"group_col_widths"`
	KeyBytewidth             int16                     `thrift:"key_bytewidth,9" json:"key_bytewidth"`
	ColSlotContext           *TColSlotContext          `thrift:"col_slot_context,10" json:"col_slot_context"`
	TargetGroupbyIndices     []int32                   `thrift:"target_groupby_indices,11" json:"target_groupby_indices"`
	CountDistinctDescriptors TCountDistinctDescriptors `thrift:"count_distinct_descriptors,12" json:"count_distinct_descriptors"`
	Force_4byteFloat         bool                      `thrift:"force_4byte_float,13" json:"force_4byte_float"`
}

func NewTResultSetBufferDescriptor() *TResultSetBufferDescriptor {
	return &TResultSetBufferDescriptor{}
}

func (p *TResultSetBufferDescriptor) GetLayout() TResultSetLayout {
	return p.Layout
}

func (p *TResultSetBufferDescriptor) GetKeyless() bool {
	return p.Keyless
}

func (p *TResultSetBufferDescriptor) GetEntryCount() int32 {
	return p.EntryCount
}

func (p *TResultSetBufferDescriptor) GetIdxTargetAsKey() int32 {
	return p.IdxTargetAsKey
}

func (p *TResultSetBufferDescriptor) GetMinVal() int64 {
	return p.MinVal
}

func (p *TResultSetBufferDescriptor) GetMaxVal() int64 {
	return p.MaxVal
}

func (p *TResultSetBufferDescriptor) GetBucket() int64 {
	return p.Bucket
}

func (p *TResultSetBufferDescriptor) GetGroupColWidths() []int16 {
	return p.GroupColWidths
}

func (p *TResultSetBufferDescriptor) GetKeyBytewidth() int16 {
	return p.KeyBytewidth
}

var TResultSetBufferDescriptor_ColSlotContext_DEFAULT *TColSlotContext

func (p *TResultSetBufferDescriptor) GetColSlotContext() *TColSlotContext {
	if !p.IsSetColSlotContext() {
		return TResultSetBufferDescriptor_ColSlotContext_DEFAULT
	}
	return p.ColSlotContext
}

func (p *TResultSetBufferDescriptor) GetTargetGroupbyIndices() []int32 {
	return p.TargetGroupbyIndices
}

func (p *TResultSetBufferDescriptor) GetCountDistinctDescriptors() TCountDistinctDescriptors {
	return p.CountDistinctDescriptors
}

func (p *TResultSetBufferDescriptor) GetForce_4byteFloat() bool {
	return p.Force_4byteFloat
}
func (p *TResultSetBufferDescriptor) IsSetColSlotContext() bool {
	return p.ColSlotContext != nil
}

func (p *TResultSetBufferDescriptor) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TResultSetBufferDescriptor) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TResultSetLayout(v)
		p.Layout = temp
	}
	return nil
}

func (p *TResultSetBufferDescriptor) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Keyless = v
	}
	return nil
}

func (p *TResultSetBufferDescriptor) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.EntryCount = v
	}
	return nil
}

func (p *TResultSetBufferDescriptor) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IdxTargetAsKey = v
	}
	return nil
}

func (p *TResultSetBufferDescriptor) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.MinVal = v
	}
	return nil
}

func (p *TResultSetBufferDescriptor) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.MaxVal = v
	}
	return nil
}

func (p *TResultSetBufferDescriptor) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Bucket = v
	}
	return nil
}

func (p *TResultSetBufferDescriptor) readField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int16, 0, size)
	p.GroupColWidths = tSlice
	for i := 0; i < size; i++ {
		var _elem3 int16
		if v, err := iprot.ReadI16(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem3 = v
		}
		p.GroupColWidths = append(p.GroupColWidths, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TResultSetBufferDescriptor) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.KeyBytewidth = v
	}
	return nil
}

func (p *TResultSetBufferDescriptor) readField10(iprot thrift.TProtocol) error {
	p.ColSlotContext = &TColSlotContext{}
	if err := p.ColSlotContext.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ColSlotContext), err)
	}
	return nil
}

func (p *TResultSetBufferDescriptor) readField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.TargetGroupbyIndices = tSlice
	for i := 0; i < size; i++ {
		var _elem4 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem4 = v
		}
		p.TargetGroupbyIndices = append(p.TargetGroupbyIndices, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TResultSetBufferDescriptor) readField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(TCountDistinctDescriptors, 0, size)
	p.CountDistinctDescriptors = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &TCountDistinctDescriptor{}
		if err := _elem5.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
		}
		p.CountDistinctDescriptors = append(p.CountDistinctDescriptors, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TResultSetBufferDescriptor) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Force_4byteFloat = v
	}
	return nil
}

func (p *TResultSetBufferDescriptor) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TResultSetBufferDescriptor"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TResultSetBufferDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("layout", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:layout: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Layout)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.layout (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:layout: ", p), err)
	}
	return err
}

func (p *TResultSetBufferDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keyless", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keyless: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Keyless)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.keyless (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keyless: ", p), err)
	}
	return err
}

func (p *TResultSetBufferDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("entry_count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entry_count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EntryCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.entry_count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entry_count: ", p), err)
	}
	return err
}

func (p *TResultSetBufferDescriptor) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idx_target_as_key", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:idx_target_as_key: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IdxTargetAsKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.idx_target_as_key (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:idx_target_as_key: ", p), err)
	}
	return err
}

func (p *TResultSetBufferDescriptor) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("min_val", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:min_val: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MinVal)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.min_val (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:min_val: ", p), err)
	}
	return err
}

func (p *TResultSetBufferDescriptor) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_val", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:max_val: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MaxVal)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_val (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:max_val: ", p), err)
	}
	return err
}

func (p *TResultSetBufferDescriptor) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bucket", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:bucket: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Bucket)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bucket (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:bucket: ", p), err)
	}
	return err
}

func (p *TResultSetBufferDescriptor) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_col_widths", thrift.LIST, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:group_col_widths: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I16, len(p.GroupColWidths)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.GroupColWidths {
		if err := oprot.WriteI16(int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:group_col_widths: ", p), err)
	}
	return err
}

func (p *TResultSetBufferDescriptor) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key_bytewidth", thrift.I16, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:key_bytewidth: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.KeyBytewidth)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key_bytewidth (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:key_bytewidth: ", p), err)
	}
	return err
}

func (p *TResultSetBufferDescriptor) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("col_slot_context", thrift.STRUCT, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:col_slot_context: ", p), err)
	}
	if err := p.ColSlotContext.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ColSlotContext), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:col_slot_context: ", p), err)
	}
	return err
}

func (p *TResultSetBufferDescriptor) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("target_groupby_indices", thrift.LIST, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:target_groupby_indices: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.TargetGroupbyIndices)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.TargetGroupbyIndices {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:target_groupby_indices: ", p), err)
	}
	return err
}

func (p *TResultSetBufferDescriptor) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count_distinct_descriptors", thrift.LIST, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:count_distinct_descriptors: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CountDistinctDescriptors)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.CountDistinctDescriptors {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:count_distinct_descriptors: ", p), err)
	}
	return err
}

func (p *TResultSetBufferDescriptor) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("force_4byte_float", thrift.BOOL, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:force_4byte_float: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Force_4byteFloat)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.force_4byte_float (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:force_4byte_float: ", p), err)
	}
	return err
}

func (p *TResultSetBufferDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TResultSetBufferDescriptor(%+v)", *p)
}

// Attributes:
//  - IsAgg
//  - Kind
//  - Type
//  - ArgType
//  - SkipNulls
//  - IsDistinct
type TTargetInfo struct {
	IsAgg      bool              `thrift:"is_agg,1" json:"is_agg"`
	Kind       TAggKind          `thrift:"kind,2" json:"kind"`
	Type       *common.TTypeInfo `thrift:"type,3" json:"type"`
	ArgType    *common.TTypeInfo `thrift:"arg_type,4" json:"arg_type"`
	SkipNulls  bool              `thrift:"skip_nulls,5" json:"skip_nulls"`
	IsDistinct bool              `thrift:"is_distinct,6" json:"is_distinct"`
}

func NewTTargetInfo() *TTargetInfo {
	return &TTargetInfo{}
}

func (p *TTargetInfo) GetIsAgg() bool {
	return p.IsAgg
}

func (p *TTargetInfo) GetKind() TAggKind {
	return p.Kind
}

var TTargetInfo_Type_DEFAULT *common.TTypeInfo

func (p *TTargetInfo) GetType() *common.TTypeInfo {
	if !p.IsSetType() {
		return TTargetInfo_Type_DEFAULT
	}
	return p.Type
}

var TTargetInfo_ArgType_DEFAULT *common.TTypeInfo

func (p *TTargetInfo) GetArgType() *common.TTypeInfo {
	if !p.IsSetArgType() {
		return TTargetInfo_ArgType_DEFAULT
	}
	return p.ArgType
}

func (p *TTargetInfo) GetSkipNulls() bool {
	return p.SkipNulls
}

func (p *TTargetInfo) GetIsDistinct() bool {
	return p.IsDistinct
}
func (p *TTargetInfo) IsSetType() bool {
	return p.Type != nil
}

func (p *TTargetInfo) IsSetArgType() bool {
	return p.ArgType != nil
}

func (p *TTargetInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TTargetInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IsAgg = v
	}
	return nil
}

func (p *TTargetInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TAggKind(v)
		p.Kind = temp
	}
	return nil
}

func (p *TTargetInfo) readField3(iprot thrift.TProtocol) error {
	p.Type = &common.TTypeInfo{
		Size: -1,
	}
	if err := p.Type.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Type), err)
	}
	return nil
}

func (p *TTargetInfo) readField4(iprot thrift.TProtocol) error {
	p.ArgType = &common.TTypeInfo{
		Size: -1,
	}
	if err := p.ArgType.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ArgType), err)
	}
	return nil
}

func (p *TTargetInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SkipNulls = v
	}
	return nil
}

func (p *TTargetInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.IsDistinct = v
	}
	return nil
}

func (p *TTargetInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTargetInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TTargetInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_agg", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:is_agg: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsAgg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_agg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:is_agg: ", p), err)
	}
	return err
}

func (p *TTargetInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("kind", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:kind: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Kind)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.kind (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:kind: ", p), err)
	}
	return err
}

func (p *TTargetInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err)
	}
	if err := p.Type.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Type), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err)
	}
	return err
}

func (p *TTargetInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg_type", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:arg_type: ", p), err)
	}
	if err := p.ArgType.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ArgType), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:arg_type: ", p), err)
	}
	return err
}

func (p *TTargetInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("skip_nulls", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:skip_nulls: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.SkipNulls)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.skip_nulls (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:skip_nulls: ", p), err)
	}
	return err
}

func (p *TTargetInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_distinct", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:is_distinct: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsDistinct)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_distinct (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:is_distinct: ", p), err)
	}
	return err
}

func (p *TTargetInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTargetInfo(%+v)", *p)
}

// Attributes:
//  - Bitmap
//  - SparseSet
type TCountDistinctSetStorage struct {
	Bitmap    []byte         `thrift:"bitmap,1" json:"bitmap,omitempty"`
	SparseSet map[int64]bool `thrift:"sparse_set,2" json:"sparse_set,omitempty"`
}

func NewTCountDistinctSetStorage() *TCountDistinctSetStorage {
	return &TCountDistinctSetStorage{}
}

var TCountDistinctSetStorage_Bitmap_DEFAULT []byte

func (p *TCountDistinctSetStorage) GetBitmap() []byte {
	return p.Bitmap
}

var TCountDistinctSetStorage_SparseSet_DEFAULT map[int64]bool

func (p *TCountDistinctSetStorage) GetSparseSet() map[int64]bool {
	return p.SparseSet
}
func (p *TCountDistinctSetStorage) IsSetBitmap() bool {
	return p.Bitmap != nil
}

func (p *TCountDistinctSetStorage) IsSetSparseSet() bool {
	return p.SparseSet != nil
}

func (p *TCountDistinctSetStorage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCountDistinctSetStorage) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Bitmap = v
	}
	return nil
}

func (p *TCountDistinctSetStorage) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[int64]bool, size)
	p.SparseSet = tSet
	for i := 0; i < size; i++ {
		var _elem6 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem6 = v
		}
		p.SparseSet[_elem6] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TCountDistinctSetStorage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCountDistinctSetStorage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCountDistinctSetStorage) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBitmap() {
		if err := oprot.WriteFieldBegin("bitmap", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bitmap: ", p), err)
		}
		if err := oprot.WriteBinary(p.Bitmap); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bitmap (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bitmap: ", p), err)
		}
	}
	return err
}

func (p *TCountDistinctSetStorage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSparseSet() {
		if err := oprot.WriteFieldBegin("sparse_set", thrift.SET, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sparse_set: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.I64, len(p.SparseSet)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.SparseSet {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sparse_set: ", p), err)
		}
	}
	return err
}

func (p *TCountDistinctSetStorage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCountDistinctSetStorage(%+v)", *p)
}

// Attributes:
//  - Type
//  - Storage
//  - RemotePtr
type TCountDistinctSet struct {
	Type      TCountDistinctImplType    `thrift:"type,1" json:"type"`
	Storage   *TCountDistinctSetStorage `thrift:"storage,2" json:"storage"`
	RemotePtr int64                     `thrift:"remote_ptr,3" json:"remote_ptr"`
}

func NewTCountDistinctSet() *TCountDistinctSet {
	return &TCountDistinctSet{}
}

func (p *TCountDistinctSet) GetType() TCountDistinctImplType {
	return p.Type
}

var TCountDistinctSet_Storage_DEFAULT *TCountDistinctSetStorage

func (p *TCountDistinctSet) GetStorage() *TCountDistinctSetStorage {
	if !p.IsSetStorage() {
		return TCountDistinctSet_Storage_DEFAULT
	}
	return p.Storage
}

func (p *TCountDistinctSet) GetRemotePtr() int64 {
	return p.RemotePtr
}
func (p *TCountDistinctSet) IsSetStorage() bool {
	return p.Storage != nil
}

func (p *TCountDistinctSet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCountDistinctSet) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TCountDistinctImplType(v)
		p.Type = temp
	}
	return nil
}

func (p *TCountDistinctSet) readField2(iprot thrift.TProtocol) error {
	p.Storage = &TCountDistinctSetStorage{}
	if err := p.Storage.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Storage), err)
	}
	return nil
}

func (p *TCountDistinctSet) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RemotePtr = v
	}
	return nil
}

func (p *TCountDistinctSet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCountDistinctSet"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCountDistinctSet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *TCountDistinctSet) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("storage", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:storage: ", p), err)
	}
	if err := p.Storage.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Storage), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:storage: ", p), err)
	}
	return err
}

func (p *TCountDistinctSet) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("remote_ptr", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:remote_ptr: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RemotePtr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.remote_ptr (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:remote_ptr: ", p), err)
	}
	return err
}

func (p *TCountDistinctSet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCountDistinctSet(%+v)", *p)
}

// Attributes:
//  - Buffers
//  - BufferLengths
//  - BuffersTotalSize
//  - TotalCompressionTimeMs
//  - Descriptor
//  - Targets
//  - TargetInitVals
//  - VarlenBuffer
//  - CountDistinctSets
//  - Explanation
type TSerializedRows struct {
	Buffers                [][]byte                    `thrift:"buffers,1" json:"buffers"`
	BufferLengths          []int64                     `thrift:"buffer_lengths,2" json:"buffer_lengths"`
	BuffersTotalSize       int64                       `thrift:"buffers_total_size,3" json:"buffers_total_size"`
	TotalCompressionTimeMs int32                       `thrift:"total_compression_time_ms,4" json:"total_compression_time_ms"`
	Descriptor             *TResultSetBufferDescriptor `thrift:"descriptor,5" json:"descriptor"`
	Targets                []*TTargetInfo              `thrift:"targets,6" json:"targets"`
	TargetInitVals         []int64                     `thrift:"target_init_vals,7" json:"target_init_vals"`
	VarlenBuffer           [][]byte                    `thrift:"varlen_buffer,8" json:"varlen_buffer"`
	CountDistinctSets      []*TCountDistinctSet        `thrift:"count_distinct_sets,9" json:"count_distinct_sets"`
	Explanation            string                      `thrift:"explanation,10" json:"explanation"`
}

func NewTSerializedRows() *TSerializedRows {
	return &TSerializedRows{}
}

func (p *TSerializedRows) GetBuffers() [][]byte {
	return p.Buffers
}

func (p *TSerializedRows) GetBufferLengths() []int64 {
	return p.BufferLengths
}

func (p *TSerializedRows) GetBuffersTotalSize() int64 {
	return p.BuffersTotalSize
}

func (p *TSerializedRows) GetTotalCompressionTimeMs() int32 {
	return p.TotalCompressionTimeMs
}

var TSerializedRows_Descriptor_DEFAULT *TResultSetBufferDescriptor

func (p *TSerializedRows) GetDescriptor() *TResultSetBufferDescriptor {
	if !p.IsSetDescriptor() {
		return TSerializedRows_Descriptor_DEFAULT
	}
	return p.Descriptor
}

func (p *TSerializedRows) GetTargets() []*TTargetInfo {
	return p.Targets
}

func (p *TSerializedRows) GetTargetInitVals() []int64 {
	return p.TargetInitVals
}

func (p *TSerializedRows) GetVarlenBuffer() [][]byte {
	return p.VarlenBuffer
}

func (p *TSerializedRows) GetCountDistinctSets() []*TCountDistinctSet {
	return p.CountDistinctSets
}

func (p *TSerializedRows) GetExplanation() string {
	return p.Explanation
}
func (p *TSerializedRows) IsSetDescriptor() bool {
	return p.Descriptor != nil
}

func (p *TSerializedRows) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TSerializedRows) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.Buffers = tSlice
	for i := 0; i < size; i++ {
		var _elem7 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem7 = v
		}
		p.Buffers = append(p.Buffers, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TSerializedRows) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.BufferLengths = tSlice
	for i := 0; i < size; i++ {
		var _elem8 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem8 = v
		}
		p.BufferLengths = append(p.BufferLengths, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TSerializedRows) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.BuffersTotalSize = v
	}
	return nil
}

func (p *TSerializedRows) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TotalCompressionTimeMs = v
	}
	return nil
}

func (p *TSerializedRows) readField5(iprot thrift.TProtocol) error {
	p.Descriptor = &TResultSetBufferDescriptor{}
	if err := p.Descriptor.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Descriptor), err)
	}
	return nil
}

func (p *TSerializedRows) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TTargetInfo, 0, size)
	p.Targets = tSlice
	for i := 0; i < size; i++ {
		_elem9 := &TTargetInfo{}
		if err := _elem9.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
		}
		p.Targets = append(p.Targets, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TSerializedRows) readField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.TargetInitVals = tSlice
	for i := 0; i < size; i++ {
		var _elem10 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem10 = v
		}
		p.TargetInitVals = append(p.TargetInitVals, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TSerializedRows) readField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.VarlenBuffer = tSlice
	for i := 0; i < size; i++ {
		var _elem11 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem11 = v
		}
		p.VarlenBuffer = append(p.VarlenBuffer, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TSerializedRows) readField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TCountDistinctSet, 0, size)
	p.CountDistinctSets = tSlice
	for i := 0; i < size; i++ {
		_elem12 := &TCountDistinctSet{}
		if err := _elem12.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
		}
		p.CountDistinctSets = append(p.CountDistinctSets, _elem12)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TSerializedRows) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Explanation = v
	}
	return nil
}

func (p *TSerializedRows) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSerializedRows"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSerializedRows) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("buffers", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:buffers: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Buffers)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Buffers {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:buffers: ", p), err)
	}
	return err
}

func (p *TSerializedRows) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("buffer_lengths", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:buffer_lengths: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.BufferLengths)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.BufferLengths {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:buffer_lengths: ", p), err)
	}
	return err
}

func (p *TSerializedRows) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("buffers_total_size", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:buffers_total_size: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BuffersTotalSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.buffers_total_size (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:buffers_total_size: ", p), err)
	}
	return err
}

func (p *TSerializedRows) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total_compression_time_ms", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:total_compression_time_ms: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalCompressionTimeMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total_compression_time_ms (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:total_compression_time_ms: ", p), err)
	}
	return err
}

func (p *TSerializedRows) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("descriptor", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:descriptor: ", p), err)
	}
	if err := p.Descriptor.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Descriptor), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:descriptor: ", p), err)
	}
	return err
}

func (p *TSerializedRows) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targets", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:targets: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Targets)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Targets {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:targets: ", p), err)
	}
	return err
}

func (p *TSerializedRows) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("target_init_vals", thrift.LIST, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:target_init_vals: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.TargetInitVals)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.TargetInitVals {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:target_init_vals: ", p), err)
	}
	return err
}

func (p *TSerializedRows) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("varlen_buffer", thrift.LIST, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:varlen_buffer: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.VarlenBuffer)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VarlenBuffer {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:varlen_buffer: ", p), err)
	}
	return err
}

func (p *TSerializedRows) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count_distinct_sets", thrift.LIST, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:count_distinct_sets: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CountDistinctSets)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.CountDistinctSets {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:count_distinct_sets: ", p), err)
	}
	return err
}

func (p *TSerializedRows) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("explanation", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:explanation: ", p), err)
	}
	if err := oprot.WriteString(string(p.Explanation)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.explanation (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:explanation: ", p), err)
	}
	return err
}

func (p *TSerializedRows) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSerializedRows(%+v)", *p)
}
